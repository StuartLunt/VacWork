
AngularAccelerationEstimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000134  20000000  08005e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020134  2**0
                  CONTENTS
  7 .bss          0000117c  20000134  20000134  00020134  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200012b0  200012b0  00020134  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f769  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000040a0  00000000  00000000  0003f8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001398  00000000  00000000  00043970  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001180  00000000  00000000  00044d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008742  00000000  00000000  00045e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000650a  00000000  00000000  0004e5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054ad4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000503c  00000000  00000000  00054b50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000134 	.word	0x20000134
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005df8 	.word	0x08005df8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000138 	.word	0x20000138
 80001c4:	08005df8 	.word	0x08005df8

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80002b8:	2101      	movs	r1, #1
 80002ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002be:	f000 fd79 	bl	8000db4 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80002c2:	2100      	movs	r1, #0
 80002c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002c8:	f000 fd74 	bl	8000db4 <RCC_APB2PeriphResetCmd>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002f2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002fe:	4313      	orrs	r3, r2
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	4313      	orrs	r3, r2
 8000304:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <ADC_Init+0xa8>)
 8000316:	4013      	ands	r3, r2
 8000318:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000322:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000328:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	795b      	ldrb	r3, [r3, #5]
 800032e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000330:	4313      	orrs	r3, r2
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	4313      	orrs	r3, r2
 8000336:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000342:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800034a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	7d1b      	ldrb	r3, [r3, #20]
 8000350:	3b01      	subs	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	7afb      	ldrb	r3, [r7, #11]
 8000356:	4313      	orrs	r3, r2
 8000358:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800035a:	7afb      	ldrb	r3, [r7, #11]
 800035c:	051b      	lsls	r3, r3, #20
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	4313      	orrs	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	c0fff7fd 	.word	0xc0fff7fd

0800037c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <ADC_CommonInit+0x48>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800038e:	68fa      	ldr	r2, [r7, #12]
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <ADC_CommonInit+0x4c>)
 8000392:	4013      	ands	r3, r2
 8000394:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800039e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003a4:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003aa:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003ac:	68fa      	ldr	r2, [r7, #12]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80003b2:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <ADC_CommonInit+0x48>)
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	6053      	str	r3, [r2, #4]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40012300 	.word	0x40012300
 80003c8:	fffc30e0 	.word	0xfffc30e0

080003cc <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003d8:	78fb      	ldrb	r3, [r7, #3]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d006      	beq.n	80003ec <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f043 0201 	orr.w	r2, r3, #1
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80003ea:	e005      	b.n	80003f8 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	f023 0201 	bic.w	r2, r3, #1
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	609a      	str	r2, [r3, #8]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	4608      	mov	r0, r1
 800040e:	4611      	mov	r1, r2
 8000410:	461a      	mov	r2, r3
 8000412:	4603      	mov	r3, r0
 8000414:	70fb      	strb	r3, [r7, #3]
 8000416:	460b      	mov	r3, r1
 8000418:	70bb      	strb	r3, [r7, #2]
 800041a:	4613      	mov	r3, r2
 800041c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	2b09      	cmp	r3, #9
 800042a:	d923      	bls.n	8000474 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000432:	78fb      	ldrb	r3, [r7, #3]
 8000434:	f1a3 020a 	sub.w	r2, r3, #10
 8000438:	4613      	mov	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	4413      	add	r3, r2
 800043e:	2207      	movs	r2, #7
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	43db      	mvns	r3, r3
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000450:	7879      	ldrb	r1, [r7, #1]
 8000452:	78fb      	ldrb	r3, [r7, #3]
 8000454:	f1a3 020a 	sub.w	r2, r3, #10
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	fa01 f303 	lsl.w	r3, r1, r3
 8000462:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000464:	68fa      	ldr	r2, [r7, #12]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	4313      	orrs	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	e01e      	b.n	80004b2 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	691b      	ldr	r3, [r3, #16]
 8000478:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800047a:	78fa      	ldrb	r2, [r7, #3]
 800047c:	4613      	mov	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	4413      	add	r3, r2
 8000482:	2207      	movs	r2, #7
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	43db      	mvns	r3, r3
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	4013      	ands	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000494:	7879      	ldrb	r1, [r7, #1]
 8000496:	78fa      	ldrb	r2, [r7, #3]
 8000498:	4613      	mov	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4413      	add	r3, r2
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80004b2:	78bb      	ldrb	r3, [r7, #2]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d821      	bhi.n	80004fc <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004bc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80004be:	78bb      	ldrb	r3, [r7, #2]
 80004c0:	1e5a      	subs	r2, r3, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4413      	add	r3, r2
 80004c8:	221f      	movs	r2, #31
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	43db      	mvns	r3, r3
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	4013      	ands	r3, r2
 80004d8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004da:	78f9      	ldrb	r1, [r7, #3]
 80004dc:	78bb      	ldrb	r3, [r7, #2]
 80004de:	1e5a      	subs	r2, r3, #1
 80004e0:	4613      	mov	r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	4413      	add	r3, r2
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004fa:	e047      	b.n	800058c <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	2b0c      	cmp	r3, #12
 8000500:	d821      	bhi.n	8000546 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000508:	78bb      	ldrb	r3, [r7, #2]
 800050a:	1fda      	subs	r2, r3, #7
 800050c:	4613      	mov	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4413      	add	r3, r2
 8000512:	221f      	movs	r2, #31
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	43db      	mvns	r3, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	4013      	ands	r3, r2
 8000522:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000524:	78f9      	ldrb	r1, [r7, #3]
 8000526:	78bb      	ldrb	r3, [r7, #2]
 8000528:	1fda      	subs	r2, r3, #7
 800052a:	4613      	mov	r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	4413      	add	r3, r2
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	4313      	orrs	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000544:	e022      	b.n	800058c <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800054c:	78bb      	ldrb	r3, [r7, #2]
 800054e:	f1a3 020d 	sub.w	r2, r3, #13
 8000552:	4613      	mov	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	221f      	movs	r2, #31
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	43db      	mvns	r3, r3
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800056a:	78f9      	ldrb	r1, [r7, #3]
 800056c:	78bb      	ldrb	r3, [r7, #2]
 800056e:	f1a3 020d 	sub.w	r2, r3, #13
 8000572:	4613      	mov	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
 8000584:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	609a      	str	r2, [r3, #8]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c4:	b29b      	uxth	r3, r3
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b085      	sub	sp, #20
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	4013      	ands	r3, r2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80005ee:	2301      	movs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	e001      	b.n	80005f8 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <DAC_SetChannel1Data+0x34>)
 800061a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	3308      	adds	r3, #8
 8000624:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	461a      	mov	r2, r3
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40007400 	.word	0x40007400

08000640 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <DMA_Init+0xac>)
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800066a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000676:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000682:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000688:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800068e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000694:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	4313      	orrs	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f023 0307 	bic.w	r3, r3, #7
 80006ae:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4313      	orrs	r3, r2
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	4313      	orrs	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	691a      	ldr	r2, [r3, #16]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60da      	str	r2, [r3, #12]
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	f01c803f 	.word	0xf01c803f

080006f0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d006      	beq.n	8000710 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f043 0201 	orr.w	r2, r3, #1
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800070e:	e005      	b.n	800071c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 0201 	bic.w	r2, r3, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	2b00      	cmp	r3, #0
 800073e:	d002      	beq.n	8000746 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000740:	2301      	movs	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	e001      	b.n	800074a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <DMA_GetFlagStatus+0x6c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d802      	bhi.n	8000778 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <DMA_GetFlagStatus+0x70>)
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	e001      	b.n	800077c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <DMA_GetFlagStatus+0x74>)
 800077a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e002      	b.n	8000794 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800079a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800079e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	4013      	ands	r3, r2
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80007aa:	2301      	movs	r3, #1
 80007ac:	75fb      	strb	r3, [r7, #23]
 80007ae:	e001      	b.n	80007b4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80007b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	371c      	adds	r7, #28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	4002640f 	.word	0x4002640f
 80007c8:	40026000 	.word	0x40026000
 80007cc:	40026400 	.word	0x40026400

080007d0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a10      	ldr	r2, [pc, #64]	; (8000820 <DMA_ClearFlag+0x50>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d802      	bhi.n	80007e8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <DMA_ClearFlag+0x54>)
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e001      	b.n	80007ec <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <DMA_ClearFlag+0x58>)
 80007ea:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d007      	beq.n	8000806 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007fc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000804:	e006      	b.n	8000814 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800080c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	6093      	str	r3, [r2, #8]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	4002640f 	.word	0x4002640f
 8000824:	40026000 	.word	0x40026000
 8000828:	40026400 	.word	0x40026400

0800082c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	4613      	mov	r3, r2
 8000838:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00f      	beq.n	8000864 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	e005      	b.n	8000864 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	2b80      	cmp	r3, #128	; 0x80
 8000868:	d014      	beq.n	8000894 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d008      	beq.n	8000882 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	f003 031e 	and.w	r3, r3, #30
 800087a:	431a      	orrs	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000880:	e008      	b.n	8000894 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	f003 031e 	and.w	r3, r3, #30
 800088c:	43db      	mvns	r3, r3
 800088e:	401a      	ands	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <DMA_ClearITPendingBit+0x50>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d802      	bhi.n	80008b8 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <DMA_ClearITPendingBit+0x54>)
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	e001      	b.n	80008bc <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <DMA_ClearITPendingBit+0x58>)
 80008ba:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d007      	beq.n	80008d6 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80008d4:	e006      	b.n	80008e4 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80008dc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	6093      	str	r3, [r2, #8]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	4002640f 	.word	0x4002640f
 80008f4:	40026000 	.word	0x40026000
 80008f8:	40026400 	.word	0x40026400

080008fc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <EXTI_ClearITPendingBit+0x1c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6153      	str	r3, [r2, #20]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40013c00 	.word	0x40013c00

0800091c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e076      	b.n	8000a26 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000938:	2201      	movs	r2, #1
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d165      	bne.n	8000a20 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	2103      	movs	r1, #3
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	791b      	ldrb	r3, [r3, #4]
 8000972:	4619      	mov	r1, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d003      	beq.n	8000992 <GPIO_Init+0x76>
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d12e      	bne.n	80009f0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	2103      	movs	r1, #3
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	401a      	ands	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	795b      	ldrb	r3, [r3, #5]
 80009b0:	4619      	mov	r1, r3
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	2301      	movs	r3, #1
 80009cc:	408b      	lsls	r3, r1
 80009ce:	43db      	mvns	r3, r3
 80009d0:	401a      	ands	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	7992      	ldrb	r2, [r2, #6]
 80009de:	4611      	mov	r1, r2
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	b292      	uxth	r2, r2
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	b292      	uxth	r2, r2
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68da      	ldr	r2, [r3, #12]
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	2103      	movs	r1, #3
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	401a      	ands	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	79db      	ldrb	r3, [r3, #7]
 8000a10:	4619      	mov	r1, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d985      	bls.n	8000938 <GPIO_Init+0x1c>
    }
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	371c      	adds	r7, #28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	71da      	strb	r2, [r3, #7]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	691a      	ldr	r2, [r3, #16]
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	4013      	ands	r3, r2
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e001      	b.n	8000a92 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	4613      	mov	r3, r2
 8000aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000ab0:	787b      	ldrb	r3, [r7, #1]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	887a      	ldrh	r2, [r7, #2]
 8000aba:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000abc:	e002      	b.n	8000ac4 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	887a      	ldrh	r2, [r7, #2]
 8000ac2:	835a      	strh	r2, [r3, #26]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
 8000adc:	4613      	mov	r3, r2
 8000ade:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ae8:	787a      	ldrb	r2, [r7, #1]
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	08db      	lsrs	r3, r3, #3
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	210f      	movs	r1, #15
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	ea02 0103 	and.w	r1, r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f100 0208 	add.w	r2, r0, #8
 8000b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	08db      	lsrs	r3, r3, #3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3208      	adds	r2, #8
 8000b3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	2302      	movs	r3, #2
 8000b82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b84:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f003 030c 	and.w	r3, r3, #12
 8000b8c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d007      	beq.n	8000ba4 <RCC_GetClocksFreq+0x40>
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d009      	beq.n	8000bac <RCC_GetClocksFreq+0x48>
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d13d      	bne.n	8000c18 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a42      	ldr	r2, [pc, #264]	; (8000ca8 <RCC_GetClocksFreq+0x144>)
 8000ba0:	601a      	str	r2, [r3, #0]
      break;
 8000ba2:	e03d      	b.n	8000c20 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a41      	ldr	r2, [pc, #260]	; (8000cac <RCC_GetClocksFreq+0x148>)
 8000ba8:	601a      	str	r2, [r3, #0]
      break;
 8000baa:	e039      	b.n	8000c20 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	0d9b      	lsrs	r3, r3, #22
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bc0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00c      	beq.n	8000be2 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000bc8:	4a38      	ldr	r2, [pc, #224]	; (8000cac <RCC_GetClocksFreq+0x148>)
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd0:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000bd2:	6852      	ldr	r2, [r2, #4]
 8000bd4:	0992      	lsrs	r2, r2, #6
 8000bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bda:	fb02 f303 	mul.w	r3, r2, r3
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	e00b      	b.n	8000bfa <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000be2:	4a31      	ldr	r2, [pc, #196]	; (8000ca8 <RCC_GetClocksFreq+0x144>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4a2e      	ldr	r2, [pc, #184]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000bec:	6852      	ldr	r2, [r2, #4]
 8000bee:	0992      	lsrs	r2, r2, #6
 8000bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	0c1b      	lsrs	r3, r3, #16
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	3301      	adds	r3, #1
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
      break;
 8000c16:	e003      	b.n	8000c20 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <RCC_GetClocksFreq+0x144>)
 8000c1c:	601a      	str	r2, [r3, #0]
      break;
 8000c1e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c28:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	091b      	lsrs	r3, r3, #4
 8000c2e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c30:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <RCC_GetClocksFreq+0x14c>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	40da      	lsrs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c50:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	0a9b      	lsrs	r3, r3, #10
 8000c56:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c58:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <RCC_GetClocksFreq+0x14c>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	40da      	lsrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <RCC_GetClocksFreq+0x140>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000c78:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	0b5b      	lsrs	r3, r3, #13
 8000c7e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <RCC_GetClocksFreq+0x14c>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4413      	add	r3, r2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	40da      	lsrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60da      	str	r2, [r3, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3724      	adds	r7, #36	; 0x24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	00f42400 	.word	0x00f42400
 8000cac:	007a1200 	.word	0x007a1200
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d006      	beq.n	8000cd4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000cc6:	490a      	ldr	r1, [pc, #40]	; (8000cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000cd2:	e006      	b.n	8000ce2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	4013      	ands	r3, r2
 8000ce0:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000d06:	490a      	ldr	r1, [pc, #40]	; (8000d30 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 8000d12:	e006      	b.n	8000d22 <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <RCC_AHB2PeriphClockCmd+0x3c>)
 8000d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000d46:	490a      	ldr	r1, [pc, #40]	; (8000d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000d52:	e006      	b.n	8000d62 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000d54:	4906      	ldr	r1, [pc, #24]	; (8000d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <RCC_APB1PeriphClockCmd+0x3c>)
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d86:	490a      	ldr	r1, [pc, #40]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000d92:	e006      	b.n	8000da2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d94:	4906      	ldr	r1, [pc, #24]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4013      	ands	r3, r2
 8000da0:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000dc6:	490a      	ldr	r1, [pc, #40]	; (8000df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000dd2:	e006      	b.n	8000de2 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000dd4:	4906      	ldr	r1, [pc, #24]	; (8000df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8000dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4013      	ands	r3, r2
 8000de0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800

08000df4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000e0e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	881a      	ldrh	r2, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	885b      	ldrh	r3, [r3, #2]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	89fa      	ldrh	r2, [r7, #14]
 8000e56:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	8b9b      	ldrh	r3, [r3, #28]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	8a1a      	ldrh	r2, [r3, #16]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	821a      	strh	r2, [r3, #16]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d008      	beq.n	8000ea0 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000e9e:	e007      	b.n	8000eb0 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	801a      	strh	r2, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	899b      	ldrh	r3, [r3, #12]
 8000ec8:	b29b      	uxth	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	887a      	ldrh	r2, [r7, #2]
 8000ee6:	819a      	strh	r2, [r3, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	891b      	ldrh	r3, [r3, #8]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <TIM_TimeBaseInit+0xbc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d013      	beq.n	8000f70 <TIM_TimeBaseInit+0x44>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a28      	ldr	r2, [pc, #160]	; (8000fec <TIM_TimeBaseInit+0xc0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00f      	beq.n	8000f70 <TIM_TimeBaseInit+0x44>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f56:	d00b      	beq.n	8000f70 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a25      	ldr	r2, [pc, #148]	; (8000ff0 <TIM_TimeBaseInit+0xc4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <TIM_TimeBaseInit+0x44>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <TIM_TimeBaseInit+0xc8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d003      	beq.n	8000f70 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <TIM_TimeBaseInit+0xcc>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d108      	bne.n	8000f82 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f76:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	885a      	ldrh	r2, [r3, #2]
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <TIM_TimeBaseInit+0xd0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00c      	beq.n	8000fa4 <TIM_TimeBaseInit+0x78>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <TIM_TimeBaseInit+0xd4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d008      	beq.n	8000fa4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000f92:	89fb      	ldrh	r3, [r7, #14]
 8000f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f98:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	891a      	ldrh	r2, [r3, #8]
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	89fa      	ldrh	r2, [r7, #14]
 8000fa8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	881a      	ldrh	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <TIM_TimeBaseInit+0xbc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d003      	beq.n	8000fca <TIM_TimeBaseInit+0x9e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <TIM_TimeBaseInit+0xc0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d104      	bne.n	8000fd4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	7a9b      	ldrb	r3, [r3, #10]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	829a      	strh	r2, [r3, #20]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40010400 	.word	0x40010400
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	40000800 	.word	0x40000800
 8000ff8:	40000c00 	.word	0x40000c00
 8000ffc:	40001000 	.word	0x40001000
 8001000:	40001400 	.word	0x40001400

08001004 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	729a      	strb	r2, [r3, #10]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d008      	beq.n	8001090 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800108e:	e007      	b.n	80010a0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	f023 0301 	bic.w	r3, r3, #1
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	801a      	strh	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	817b      	strh	r3, [r7, #10]
 80010ba:	2300      	movs	r3, #0
 80010bc:	81fb      	strh	r3, [r7, #14]
 80010be:	2300      	movs	r3, #0
 80010c0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8c1b      	ldrh	r3, [r3, #32]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8c1b      	ldrh	r3, [r3, #32]
 80010d6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	889b      	ldrh	r3, [r3, #4]
 80010dc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	8b1b      	ldrh	r3, [r3, #24]
 80010e2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80010e4:	897b      	ldrh	r3, [r7, #10]
 80010e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ea:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80010ec:	897b      	ldrh	r3, [r7, #10]
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	897b      	ldrh	r3, [r7, #10]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	f023 0302 	bic.w	r3, r3, #2
 8001104:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	899a      	ldrh	r2, [r3, #12]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4313      	orrs	r3, r2
 800110e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	885a      	ldrh	r2, [r3, #2]
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	4313      	orrs	r3, r2
 8001118:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <TIM_OC1Init+0xec>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d003      	beq.n	800112a <TIM_OC1Init+0x7e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <TIM_OC1Init+0xf0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d123      	bne.n	8001172 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	f023 0308 	bic.w	r3, r3, #8
 8001130:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	89da      	ldrh	r2, [r3, #14]
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	4313      	orrs	r3, r2
 800113a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	f023 0304 	bic.w	r3, r3, #4
 8001142:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	889a      	ldrh	r2, [r3, #4]
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	4313      	orrs	r3, r2
 800114c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001154:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001156:	89bb      	ldrh	r3, [r7, #12]
 8001158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800115c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	8a1a      	ldrh	r2, [r3, #16]
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	8a5a      	ldrh	r2, [r3, #18]
 800116c:	89bb      	ldrh	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	89ba      	ldrh	r2, [r7, #12]
 8001176:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	897a      	ldrh	r2, [r7, #10]
 800117c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	89fa      	ldrh	r2, [r7, #14]
 800118a:	841a      	strh	r2, [r3, #32]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40010000 	.word	0x40010000
 800119c:	40010400 	.word	0x40010400

080011a0 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	8b1b      	ldrh	r3, [r3, #24]
 80011b4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80011b6:	89fb      	ldrh	r3, [r7, #14]
 80011b8:	f023 0308 	bic.w	r3, r3, #8
 80011bc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80011be:	89fa      	ldrh	r2, [r7, #14]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	89fa      	ldrh	r2, [r7, #14]
 80011ca:	831a      	strh	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	899b      	ldrh	r3, [r3, #12]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80011fe:	e009      	b.n	8001214 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	899b      	ldrh	r3, [r3, #12]
 8001204:	b29a      	uxth	r2, r3
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	43db      	mvns	r3, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	4013      	ands	r3, r2
 800120e:	b29a      	uxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	819a      	strh	r2, [r3, #12]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	43db      	mvns	r3, r3
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	821a      	strh	r2, [r3, #16]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001242:	b480      	push	{r7}
 8001244:	b087      	sub	sp, #28
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	4608      	mov	r0, r1
 800124c:	4611      	mov	r1, r2
 800124e:	461a      	mov	r2, r3
 8001250:	4603      	mov	r3, r0
 8001252:	817b      	strh	r3, [r7, #10]
 8001254:	460b      	mov	r3, r1
 8001256:	813b      	strh	r3, [r7, #8]
 8001258:	4613      	mov	r3, r2
 800125a:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	891b      	ldrh	r3, [r3, #8]
 800126c:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	8b1b      	ldrh	r3, [r3, #24]
 8001272:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8c1b      	ldrh	r3, [r3, #32]
 8001278:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800127a:	8afb      	ldrh	r3, [r7, #22]
 800127c:	f023 0307 	bic.w	r3, r3, #7
 8001280:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8001282:	8afa      	ldrh	r2, [r7, #22]
 8001284:	897b      	ldrh	r3, [r7, #10]
 8001286:	4313      	orrs	r3, r2
 8001288:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800128a:	8abb      	ldrh	r3, [r7, #20]
 800128c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001290:	f023 0303 	bic.w	r3, r3, #3
 8001294:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001296:	8abb      	ldrh	r3, [r7, #20]
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80012a2:	8a7b      	ldrh	r3, [r7, #18]
 80012a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80012a8:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	893b      	ldrh	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	8a7b      	ldrh	r3, [r7, #18]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8afa      	ldrh	r2, [r7, #22]
 80012c0:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8aba      	ldrh	r2, [r7, #20]
 80012c6:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8a7a      	ldrh	r2, [r7, #18]
 80012cc:	841a      	strh	r2, [r3, #32]
}
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	8a1b      	ldrh	r3, [r3, #16]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001304:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	88db      	ldrh	r3, [r3, #6]
 800130a:	461a      	mov	r2, r3
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	4313      	orrs	r3, r2
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	899b      	ldrh	r3, [r3, #12]
 800131e:	b29b      	uxth	r3, r3
 8001320:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001328:	f023 030c 	bic.w	r3, r3, #12
 800132c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	889a      	ldrh	r2, [r3, #4]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	891b      	ldrh	r3, [r3, #8]
 8001336:	4313      	orrs	r3, r2
 8001338:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800133e:	4313      	orrs	r3, r2
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	4313      	orrs	r3, r2
 8001348:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	8a9b      	ldrh	r3, [r3, #20]
 8001356:	b29b      	uxth	r3, r3
 8001358:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001360:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	899b      	ldrh	r3, [r3, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	4313      	orrs	r3, r2
 800136c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	b29a      	uxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fbf2 	bl	8000b64 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <USART_Init+0x168>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d003      	beq.n	8001390 <USART_Init+0xb4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <USART_Init+0x16c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d102      	bne.n	8001396 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	623b      	str	r3, [r7, #32]
 8001394:	e001      	b.n	800139a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	899b      	ldrh	r3, [r3, #12]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	da0c      	bge.n	80013c0 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80013a6:	6a3a      	ldr	r2, [r7, #32]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009a      	lsls	r2, r3, #2
 80013b0:	441a      	add	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e00b      	b.n	80013d8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	009a      	lsls	r2, r3, #2
 80013ca:	441a      	add	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	4a1c      	ldr	r2, [pc, #112]	; (800144c <USART_Init+0x170>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	095b      	lsrs	r3, r3, #5
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	899b      	ldrh	r3, [r3, #12]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da0c      	bge.n	800141c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	3332      	adds	r3, #50	; 0x32
 8001408:	4a10      	ldr	r2, [pc, #64]	; (800144c <USART_Init+0x170>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001416:	4313      	orrs	r3, r2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	e00b      	b.n	8001434 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	3332      	adds	r3, #50	; 0x32
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <USART_Init+0x170>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	095b      	lsrs	r3, r3, #5
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001430:	4313      	orrs	r3, r2
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	b29a      	uxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	811a      	strh	r2, [r3, #8]
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40011000 	.word	0x40011000
 8001448:	40011400 	.word	0x40011400
 800144c:	51eb851f 	.word	0x51eb851f

08001450 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	899b      	ldrh	r3, [r3, #12]
 8001466:	b29b      	uxth	r3, r3
 8001468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001472:	e007      	b.n	8001484 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	899b      	ldrh	r3, [r3, #12]
 8001478:	b29b      	uxth	r3, r3
 800147a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800147e:	b29a      	uxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	819a      	strh	r2, [r3, #12]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	8a9b      	ldrh	r3, [r3, #20]
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 80014b6:	e009      	b.n	80014cc <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	8a9b      	ldrh	r3, [r3, #20]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4013      	ands	r3, r2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	829a      	strh	r2, [r3, #20]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <USB_OTG_BSP_Init>:
*         Initilizes BSP configurations
* @param  None
* @retval None
*/

void USB_OTG_BSP_Init(USB_OTG_CORE_HANDLE *pdev) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;   
#ifdef USE_USB_OTG_FS
	RCC_AHB1PeriphClockCmd( RCC_AHB1Periph_GPIOA , ENABLE);  
 80014e0:	2101      	movs	r1, #1
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fbe6 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 	GPIO_Pin_11 | 	// OTG FS Data -
 80014e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ec:	60bb      	str	r3, [r7, #8]
									GPIO_Pin_12;	// OTG FS Data +

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80014ee:	2303      	movs	r3, #3
 80014f0:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80014f2:	2302      	movs	r3, #2
 80014f4:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);  
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4619      	mov	r1, r3
 8001504:	481f      	ldr	r0, [pc, #124]	; (8001584 <USB_OTG_BSP_Init+0xac>)
 8001506:	f7ff fa09 	bl	800091c <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_OTG1_FS); 
 800150a:	220a      	movs	r2, #10
 800150c:	210b      	movs	r1, #11
 800150e:	481d      	ldr	r0, [pc, #116]	; (8001584 <USB_OTG_BSP_Init+0xac>)
 8001510:	f7ff fade 	bl	8000ad0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_OTG1_FS);
 8001514:	220a      	movs	r2, #10
 8001516:	210c      	movs	r1, #12
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <USB_OTG_BSP_Init+0xac>)
 800151a:	f7ff fad9 	bl	8000ad0 <GPIO_PinAFConfig>
#ifndef USB_VCP_DISABLE_VBUS
	// Configure  VBUS Pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001522:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001524:	2303      	movs	r3, #3
 8001526:	737b      	strb	r3, [r7, #13]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001528:	2300      	movs	r3, #0
 800152a:	733b      	strb	r3, [r7, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800152c:	2301      	movs	r3, #1
 800152e:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);    
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4619      	mov	r1, r3
 800153a:	4812      	ldr	r0, [pc, #72]	; (8001584 <USB_OTG_BSP_Init+0xac>)
 800153c:	f7ff f9ee 	bl	800091c <GPIO_Init>
#endif

#ifndef USB_VCP_DISABLE_ID
	// Configure ID pin
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001546:	2301      	movs	r3, #1
 8001548:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;  
 800154a:	2301      	movs	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800154e:	2303      	movs	r3, #3
 8001550:	737b      	strb	r3, [r7, #13]
	GPIO_Init(GPIOA, &GPIO_InitStructure);  
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4619      	mov	r1, r3
 8001558:	480a      	ldr	r0, [pc, #40]	; (8001584 <USB_OTG_BSP_Init+0xac>)
 800155a:	f7ff f9df 	bl	800091c <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_OTG1_FS); 
 800155e:	220a      	movs	r2, #10
 8001560:	210a      	movs	r1, #10
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <USB_OTG_BSP_Init+0xac>)
 8001564:	f7ff fab4 	bl	8000ad0 <GPIO_PinAFConfig>
#endif

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001568:	2101      	movs	r1, #1
 800156a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800156e:	f7ff fc01 	bl	8000d74 <RCC_APB2PeriphClockCmd>
	RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_OTG_FS, ENABLE); 
 8001572:	2101      	movs	r1, #1
 8001574:	2080      	movs	r0, #128	; 0x80
 8001576:	f7ff fbbd 	bl	8000cf4 <RCC_AHB2PeriphClockCmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_OTG_HS, ENABLE);

#endif
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000

08001588 <USB_OTG_BSP_EnableInterrupt>:
* @brief  USB_OTG_BSP_EnableInterrupt
*         Enabele USB Global interrupt
* @param  None
* @retval None
*/
void USB_OTG_BSP_EnableInterrupt(USB_OTG_CORE_HANDLE *pdev) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	NVIC_InitTypeDef NVIC_InitStructure;
#ifdef USE_USB_OTG_FS
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8001590:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001594:	f7fe fe18 	bl	80001c8 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = OTG_FS_IRQn;  
 8001598:	2343      	movs	r3, #67	; 0x43
 800159a:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = USB_VCP_NVIC_PRIORITY;
 800159c:	2301      	movs	r3, #1
 800159e:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_VCP_NVIC_SUBPRIORITY + 2;
 80015a0:	2303      	movs	r3, #3
 80015a2:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe fe1f 	bl	80001f0 <NVIC_Init>
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = USB_VCP_NVIC_SUBPRIORITY;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure); 

#endif
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <USB_OTG_BSP_uDelay>:
* @brief  USB_OTG_BSP_uDelay
*         This function provides delay time in micro sec
* @param  usec : Value of delay required in micro sec
* @retval None
*/
void USB_OTG_BSP_uDelay (const uint32_t usec) {
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
	const uint32_t utime = (120 * usec / 7);
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <USB_OTG_BSP_uDelay+0x44>)
 80015d6:	fba3 1302 	umull	r1, r3, r3, r2
 80015da:	1ad2      	subs	r2, r2, r3
 80015dc:	0852      	lsrs	r2, r2, #1
 80015de:	4413      	add	r3, r2
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
	
	do
	{
		if ( ++count > utime ) {
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d800      	bhi.n	80015f4 <USB_OTG_BSP_uDelay+0x38>
 80015f2:	e7f7      	b.n	80015e4 <USB_OTG_BSP_uDelay+0x28>
			return ;
 80015f4:	bf00      	nop
		}
	} while (1);
}
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	24924925 	.word	0x24924925

08001604 <USB_OTG_BSP_mDelay>:
* @brief  USB_OTG_BSP_mDelay
*          This function provides delay time in milli sec
* @param  msec : Value of delay required in milli sec
* @retval None
*/
void USB_OTG_BSP_mDelay (const uint32_t msec) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	USB_OTG_BSP_uDelay(msec * 1000);   
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffd0 	bl	80015bc <USB_OTG_BSP_uDelay>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <OTG_FS_WKUP_IRQHandler>:


#ifdef USE_USB_OTG_FS

void OTG_FS_WKUP_IRQHandler(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line18);
 8001628:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800162c:	f7ff f966 	bl	80008fc <EXTI_ClearITPendingBit>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	USBD_OTG_ISR_Handler (&USB_OTG_dev);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <OTG_FS_IRQHandler+0x10>)
 800163a:	f001 fb35 	bl	8002ca8 <USBD_OTG_ISR_Handler>
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000cbc 	.word	0x20000cbc

08001648 <USB_OTG_EnableCommonInt>:
*         Initializes the commmon interrupts, used in both device and modes
* @param  pdev : Selected device
* @retval None
*/
static void USB_OTG_EnableCommonInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  
  int_mask.d32 = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  /* Clear any pending USB_OTG Interrupts */
#ifndef USE_OTG_MODE
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GOTGINT, 0xFFFFFFFF);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	605a      	str	r2, [r3, #4]
#endif
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001666:	615a      	str	r2, [r3, #20]
  /* Enable the interrupts in the INTMSK */
  int_mask.b.wkupintr = 1;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166e:	73fb      	strb	r3, [r7, #15]
  int_mask.b.usbsuspend = 1; 
 8001670:	7b7b      	ldrb	r3, [r7, #13]
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	737b      	strb	r3, [r7, #13]
#ifdef USE_OTG_MODE
  int_mask.b.otgintr = 1;
  int_mask.b.sessreqintr = 1;
  int_mask.b.conidstschng = 1;
#endif
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <USB_OTG_CoreReset>:
* @brief  USB_OTG_CoreReset : Soft reset of the core
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
static USB_OTG_STS USB_OTG_CoreReset(USB_OTG_CORE_HANDLE *pdev)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  /* Wait for AHB master IDLE state. */
  do
  {
    USB_OTG_BSP_uDelay(3);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f7ff ff8b 	bl	80015bc <USB_OTG_BSP_uDelay>
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <USB_OTG_CoreReset+0x8c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <USB_OTG_CoreReset+0x34>
    {
      return USB_OTG_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	e026      	b.n	800170e <USB_OTG_CoreReset+0x82>
    }
  }
  while (greset.b.ahbidle == 0);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0e9      	beq.n	80016a0 <USB_OTG_CoreReset+0x14>
  /* Core Soft Reset */
  count = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  greset.b.csftrst = 1;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRSTCTL, greset.d32 );
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GRSTCTL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <USB_OTG_CoreReset+0x8c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d806      	bhi.n	8001704 <USB_OTG_CoreReset+0x78>
    {
      break;
    }
  }
  while (greset.b.csftrst == 1);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d0ee      	beq.n	80016e0 <USB_OTG_CoreReset+0x54>
 8001702:	e000      	b.n	8001706 <USB_OTG_CoreReset+0x7a>
      break;
 8001704:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001706:	2003      	movs	r0, #3
 8001708:	f7ff ff58 	bl	80015bc <USB_OTG_BSP_uDelay>
  return status;
 800170c:	7cfb      	ldrb	r3, [r7, #19]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	00030d40 	.word	0x00030d40

0800171c <USB_OTG_WritePacket>:
*/
USB_OTG_STS USB_OTG_WritePacket(USB_OTG_CORE_HANDLE *pdev, 
                                uint8_t             *src, 
                                uint8_t             ch_ep_num, 
                                uint16_t            len)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	460b      	mov	r3, r1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	4613      	mov	r3, r2
 8001730:	80bb      	strh	r3, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	76fb      	strb	r3, [r7, #27]
  if (pdev->cfg.dma_enable == 0)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	78db      	ldrb	r3, [r3, #3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d122      	bne.n	8001784 <USB_OTG_WritePacket+0x68>
  {
    uint32_t count32b= 0 , i= 0;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *fifo;
    
    count32b =  (len + 3) / 4;
 8001746:	88bb      	ldrh	r3, [r7, #4]
 8001748:	3303      	adds	r3, #3
 800174a:	2b00      	cmp	r3, #0
 800174c:	da00      	bge.n	8001750 <USB_OTG_WritePacket+0x34>
 800174e:	3303      	adds	r3, #3
 8001750:	109b      	asrs	r3, r3, #2
 8001752:	617b      	str	r3, [r7, #20]
    fifo = pdev->regs.DFIFO[ch_ep_num];
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	3332      	adds	r3, #50	; 0x32
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src+=4)
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	e009      	b.n	800177c <USB_OTG_WritePacket+0x60>
    {
      USB_OTG_WRITE_REG32( fifo, *((__packed uint32_t *)src) );
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < count32b; i++, src+=4)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	3301      	adds	r3, #1
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3304      	adds	r3, #4
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	d3f1      	bcc.n	8001768 <USB_OTG_WritePacket+0x4c>
    }
  }
  return status;
 8001784:	7efb      	ldrb	r3, [r7, #27]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <USB_OTG_ReadPacket>:
* @retval None
*/
void *USB_OTG_ReadPacket(USB_OTG_CORE_HANDLE *pdev, 
                         uint8_t *dest, 
                         uint16_t len)
{
 8001792:	b480      	push	{r7}
 8001794:	b089      	sub	sp, #36	; 0x24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	4613      	mov	r3, r2
 800179e:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b = (len + 3) / 4;
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	3303      	adds	r3, #3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da00      	bge.n	80017ae <USB_OTG_ReadPacket+0x1c>
 80017ac:	3303      	adds	r3, #3
 80017ae:	109b      	asrs	r3, r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
  
  __IO uint32_t *fifo = pdev->regs.DFIFO[0];
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80017b8:	617b      	str	r3, [r7, #20]
  
  for ( i = 0; i < count32b; i++, dest += 4 )
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e009      	b.n	80017d4 <USB_OTG_ReadPacket+0x42>
  {
    *(__packed uint32_t *)dest = USB_OTG_READ_REG32(fifo);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3304      	adds	r3, #4
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d3f1      	bcc.n	80017c0 <USB_OTG_ReadPacket+0x2e>
    
  }
  return ((void *)dest);
 80017dc:	68bb      	ldr	r3, [r7, #8]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	; 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <USB_OTG_SelectCore>:
* @param  coreID : USB OTG Core ID
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SelectCore(USB_OTG_CORE_HANDLE *pdev, 
                               USB_OTG_CORE_ID_TypeDef coreID)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  uint32_t i , baseAddress = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  USB_OTG_STS status = USB_OTG_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  pdev->cfg.dma_enable       = 0;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	70da      	strb	r2, [r3, #3]
  
  /* at startup the core is in FS mode */
  pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	709a      	strb	r2, [r3, #2]
  pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;    
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	809a      	strh	r2, [r3, #4]
  
  /* initialize device cfg following its address */
  if (coreID == USB_OTG_FS_CORE_ID)
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d113      	bne.n	8001840 <USB_OTG_SelectCore+0x54>
  {
    baseAddress                = USB_OTG_FS_BASE_ADDR;
 8001818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800181c:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_FS_CORE_ID;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 8 ;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2208      	movs	r2, #8
 8001828:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 4 ;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 320; /* in 32-bits */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001836:	80da      	strh	r2, [r3, #6]
    pdev->cfg.phy_itface       = USB_OTG_EMBEDDED_PHY;     
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2202      	movs	r2, #2
 800183c:	721a      	strb	r2, [r3, #8]
 800183e:	e011      	b.n	8001864 <USB_OTG_SelectCore+0x78>
    
#ifdef USB_OTG_FS_LOW_PWR_MGMT_SUPPORT    
    pdev->cfg.low_power        = 1;    
#endif     
  }
  else if (coreID == USB_OTG_HS_CORE_ID)
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10e      	bne.n	8001864 <USB_OTG_SelectCore+0x78>
  {
    baseAddress                = USB_OTG_HS_BASE_ADDR;
 8001846:	4b45      	ldr	r3, [pc, #276]	; (800195c <USB_OTG_SelectCore+0x170>)
 8001848:	613b      	str	r3, [r7, #16]
    pdev->cfg.coreID           = USB_OTG_HS_CORE_ID;    
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	72da      	strb	r2, [r3, #11]
    pdev->cfg.host_channels    = 12 ;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	220c      	movs	r2, #12
 8001854:	701a      	strb	r2, [r3, #0]
    pdev->cfg.dev_endpoints    = 6 ;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2206      	movs	r2, #6
 800185a:	705a      	strb	r2, [r3, #1]
    pdev->cfg.TotalFifoSize    = 1280;/* in 32-bits */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001862:	80da      	strh	r2, [r3, #6]
    pdev->cfg.low_power        = 1;    
#endif 
    
  }
  
  pdev->regs.GREGS = (USB_OTG_GREGS *)(baseAddress + \
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60da      	str	r2, [r3, #12]
    USB_OTG_CORE_GLOBAL_REGS_OFFSET);
  pdev->regs.DREGS =  (USB_OTG_DREGS  *)  (baseAddress + \
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]
    USB_OTG_DEV_GLOBAL_REG_OFFSET);
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e01c      	b.n	80018b6 <USB_OTG_SelectCore+0xca>
  {
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_IN_EP_REG_OFFSET + \
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4413      	add	r3, r2
 8001884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    pdev->regs.INEP_REGS[i]  = (USB_OTG_INEPREGS *)  \
 8001888:	4619      	mov	r1, r3
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3304      	adds	r3, #4
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	6099      	str	r1, [r3, #8]
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
        (i * USB_OTG_EP_REG_OFFSET));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	015a      	lsls	r2, r3, #5
      (baseAddress + USB_OTG_DEV_OUT_EP_REG_OFFSET + \
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
    pdev->regs.OUTEP_REGS[i] = (USB_OTG_OUTEPREGS *) \
 80018a2:	4619      	mov	r1, r3
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3314      	adds	r3, #20
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	6059      	str	r1, [r3, #4]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	461a      	mov	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d8dc      	bhi.n	800187c <USB_OTG_SelectCore+0x90>
  }
  pdev->regs.HREGS = (USB_OTG_HREGS *)(baseAddress + \
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	615a      	str	r2, [r3, #20]
    USB_OTG_HOST_GLOBAL_REG_OFFSET);
  pdev->regs.HPRT0 = (uint32_t *)(baseAddress + USB_OTG_HOST_PORT_REGS_OFFSET);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00f      	b.n	8001902 <USB_OTG_SelectCore+0x116>
  {
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
        (i * USB_OTG_CHAN_REGS_OFFSET));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	015a      	lsls	r2, r3, #5
      USB_OTG_HOST_CHAN_REGS_OFFSET + \
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
    pdev->regs.HC_REGS[i] = (USB_OTG_HC_REGS *)(baseAddress + \
 80018ee:	4619      	mov	r1, r3
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3322      	adds	r3, #34	; 0x22
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	429a      	cmp	r2, r3
 800190c:	d8e9      	bhi.n	80018e2 <USB_OTG_SelectCore+0xf6>
  }
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e00f      	b.n	8001934 <USB_OTG_SelectCore+0x148>
  {
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
      (i * USB_OTG_DATA_FIFO_SIZE));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	031a      	lsls	r2, r3, #12
    pdev->regs.DFIFO[i] = (uint32_t *)(baseAddress + USB_OTG_DATA_FIFO_OFFSET +\
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001920:	4619      	mov	r1, r3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3332      	adds	r3, #50	; 0x32
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	6099      	str	r1, [r3, #8]
  for (i = 0; i < pdev->cfg.host_channels; i++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8e9      	bhi.n	8001914 <USB_OTG_SelectCore+0x128>
  }
  pdev->regs.PCGCCTL = (uint32_t *)(baseAddress + USB_OTG_PCGCCTL_OFFSET);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  return status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40040000 	.word	0x40040000

08001960 <USB_OTG_CoreInit>:
*         device mode or host mode operation.
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInit(USB_OTG_CORE_HANDLE *pdev)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	75fb      	strb	r3, [r7, #23]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  USB_OTG_GCCFG_TypeDef    gccfg;
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  usbcfg.d32 = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  gccfg.d32 = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  ahbcfg.d32 = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
  
  
  
  if (pdev->cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7a1b      	ldrb	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d142      	bne.n	8001a06 <USB_OTG_CoreInit+0xa6>
  {
    gccfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GCCFG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001986:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 0;
 8001988:	7bbb      	ldrb	r3, [r7, #14]
 800198a:	f36f 0300 	bfc	r3, #0, #1
 800198e:	73bb      	strb	r3, [r7, #14]
    
    if (pdev->cfg.Sof_output)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a5b      	ldrb	r3, [r3, #9]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <USB_OTG_CoreInit+0x40>
    {
      gccfg.b.sofouten = 1;   
 8001998:	7bbb      	ldrb	r3, [r7, #14]
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	73bb      	strb	r3, [r7, #14]
    }
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Init The ULPI Interface */
    usbcfg.d32 = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	613b      	str	r3, [r7, #16]
    
    usbcfg.b.physel            = 0; /* HS Interface */
 80019b4:	7c3b      	ldrb	r3, [r7, #16]
 80019b6:	f36f 1386 	bfc	r3, #6, #1
 80019ba:	743b      	strb	r3, [r7, #16]
#else
#ifdef USB_OTG_EXTERNAL_VBUS_ENABLED    
    usbcfg.b.ulpi_ext_vbus_drv = 1; /* Use external VBUS */
#endif
#endif 
    usbcfg.b.term_sel_dl_pulse = 0; /* Data line pulsing using utmi_txvalid */    
 80019bc:	7cbb      	ldrb	r3, [r7, #18]
 80019be:	f36f 1386 	bfc	r3, #6, #1
 80019c2:	74bb      	strb	r3, [r7, #18]
    
    usbcfg.b.ulpi_fsls = 0;
 80019c4:	7cbb      	ldrb	r3, [r7, #18]
 80019c6:	f36f 0341 	bfc	r3, #1, #1
 80019ca:	74bb      	strb	r3, [r7, #18]
    usbcfg.b.ulpi_clk_sus_m = 0;
 80019cc:	7cbb      	ldrb	r3, [r7, #18]
 80019ce:	f36f 03c3 	bfc	r3, #3, #1
 80019d2:	74bb      	strb	r3, [r7, #18]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select  */
    USB_OTG_CoreReset(pdev);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fe55 	bl	800168c <USB_OTG_CoreReset>
    
    if(pdev->cfg.dma_enable == 1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d13d      	bne.n	8001a66 <USB_OTG_CoreInit+0x106>
    {
      
      ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 80019ea:	7a3b      	ldrb	r3, [r7, #8]
 80019ec:	2205      	movs	r2, #5
 80019ee:	f362 0344 	bfi	r3, r2, #1, #4
 80019f2:	723b      	strb	r3, [r7, #8]
      ahbcfg.b.dmaenable = 1;
 80019f4:	7a3b      	ldrb	r3, [r7, #8]
 80019f6:	f043 0320 	orr.w	r3, r3, #32
 80019fa:	723b      	strb	r3, [r7, #8]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e02f      	b.n	8001a66 <USB_OTG_CoreInit+0x106>
    }    
  }
  else /* FS interface (embedded Phy) */
  {
    
    usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	613b      	str	r3, [r7, #16]
    usbcfg.b.physel  = 1; /* FS Interface */
 8001a0e:	7c3b      	ldrb	r3, [r7, #16]
 8001a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a14:	743b      	strb	r3, [r7, #16]
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
    /* Reset after a PHY select and set Host mode */
    USB_OTG_CoreReset(pdev);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fe34 	bl	800168c <USB_OTG_CoreReset>
    /* Deactivate the power down*/
    gccfg.d32 = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
    gccfg.b.pwdn = 1;
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	73bb      	strb	r3, [r7, #14]
    
    gccfg.b.vbussensingA = 1 ;
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	73bb      	strb	r3, [r7, #14]
    gccfg.b.vbussensingB = 1 ;     
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	73bb      	strb	r3, [r7, #14]
#ifndef VBUS_SENSING_ENABLED
    gccfg.b.disablevbussensing = 1; 
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	73bb      	strb	r3, [r7, #14]
#endif    
    
    if(pdev->cfg.Sof_output)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7a5b      	ldrb	r3, [r3, #9]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <USB_OTG_CoreInit+0xf8>
    {
      gccfg.b.sofouten = 1;  
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	73bb      	strb	r3, [r7, #14]
    }
    
    USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GCCFG, gccfg.d32);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38
    USB_OTG_BSP_mDelay(20);
 8001a60:	2014      	movs	r0, #20
 8001a62:	f7ff fdcf 	bl	8001604 <USB_OTG_BSP_mDelay>
  }
  /* case the HS core is working in FS mode */
  if(pdev->cfg.dma_enable == 1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	78db      	ldrb	r3, [r3, #3]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d110      	bne.n	8001a90 <USB_OTG_CoreInit+0x130>
  {
    
    ahbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GAHBCFG);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	60bb      	str	r3, [r7, #8]
    ahbcfg.b.hburstlen = 5; /* 64 x 32-bits*/
 8001a76:	7a3b      	ldrb	r3, [r7, #8]
 8001a78:	2205      	movs	r2, #5
 8001a7a:	f362 0344 	bfi	r3, r2, #1, #4
 8001a7e:	723b      	strb	r3, [r7, #8]
    ahbcfg.b.dmaenable = 1;
 8001a80:	7a3b      	ldrb	r3, [r7, #8]
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	723b      	strb	r3, [r7, #8]
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	609a      	str	r2, [r3, #8]
  usbcfg.b.hnpcap = 1;
  usbcfg.b.srpcap = 1;
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
  USB_OTG_EnableCommonInt(pdev);
#endif
  return status;
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <USB_OTG_EnableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  
  ahbcfg.d32 = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8001aaa:	7a3b      	ldrb	r3, [r7, #8]
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, 0, ahbcfg.d32);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68d2      	ldr	r2, [r2, #12]
 8001aba:	6891      	ldr	r1, [r2, #8]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <USB_OTG_DisableGlobalInt>:
*         Enables the controller's Global Int in the AHB Config reg
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_DisableGlobalInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GAHBCFG_TypeDef  ahbcfg;
  ahbcfg.d32 = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  ahbcfg.b.glblintrmsk = 1; /* Enable interrupts */
 8001ae0:	7a3b      	ldrb	r3, [r7, #8]
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	723b      	strb	r3, [r7, #8]
  USB_OTG_MODIFY_REG32(&pdev->regs.GREGS->GAHBCFG, ahbcfg.d32, 0);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68d2      	ldr	r2, [r2, #12]
 8001af0:	6891      	ldr	r1, [r2, #8]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	43d2      	mvns	r2, r2
 8001af6:	400a      	ands	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
  return status;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <USB_OTG_FlushTxFifo>:
* @param  pdev : Selected device
* @param  num : FO num
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushTxFifo (USB_OTG_CORE_HANDLE *pdev , uint32_t num )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  
  uint32_t count = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  greset.d32 = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  greset.b.txfflsh = 1;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	60fb      	str	r3, [r7, #12]
  greset.b.txfnum  = num;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f362 138a 	bfi	r3, r2, #6, #5
 8001b36:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <USB_OTG_FlushTxFifo+0x70>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d806      	bhi.n	8001b64 <USB_OTG_FlushTxFifo+0x5c>
    {
      break;
    }
  }
  while (greset.b.txfflsh == 1);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d0ee      	beq.n	8001b40 <USB_OTG_FlushTxFifo+0x38>
 8001b62:	e000      	b.n	8001b66 <USB_OTG_FlushTxFifo+0x5e>
      break;
 8001b64:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001b66:	2003      	movs	r0, #3
 8001b68:	f7ff fd28 	bl	80015bc <USB_OTG_BSP_uDelay>
  return status;
 8001b6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	00030d40 	.word	0x00030d40

08001b7c <USB_OTG_FlushRxFifo>:
* @brief  USB_OTG_FlushRxFifo : Flush a Rx FIFO
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_FlushRxFifo( USB_OTG_CORE_HANDLE *pdev )
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	74fb      	strb	r3, [r7, #19]
  __IO USB_OTG_GRSTCTL_TypeDef  greset;
  uint32_t count = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  greset.d32 = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  greset.b.rxfflsh = 1;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f043 0310 	orr.w	r3, r3, #16
 8001b96:	60fb      	str	r3, [r7, #12]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GRSTCTL, greset.d32 );
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  do
  {
    greset.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRSTCTL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	60fb      	str	r3, [r7, #12]
    if (++count > 200000)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <USB_OTG_FlushRxFifo+0x5c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d806      	bhi.n	8001bc4 <USB_OTG_FlushRxFifo+0x48>
    {
      break;
    }
  }
  while (greset.b.rxfflsh == 1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d0ee      	beq.n	8001ba0 <USB_OTG_FlushRxFifo+0x24>
 8001bc2:	e000      	b.n	8001bc6 <USB_OTG_FlushRxFifo+0x4a>
      break;
 8001bc4:	bf00      	nop
  /* Wait for 3 PHY Clocks*/
  USB_OTG_BSP_uDelay(3);
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	f7ff fcf8 	bl	80015bc <USB_OTG_BSP_uDelay>
  return status;
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	00030d40 	.word	0x00030d40

08001bdc <USB_OTG_SetCurrentMode>:
* @param  pdev : Selected device
* @param  mode :  (Host/device)
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_SetCurrentMode(USB_OTG_CORE_HANDLE *pdev , uint8_t mode)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_STS status = USB_OTG_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GUSBCFG_TypeDef  usbcfg;
  
  usbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	60bb      	str	r3, [r7, #8]
  
  usbcfg.b.force_host = 0;
 8001bf4:	7afb      	ldrb	r3, [r7, #11]
 8001bf6:	f36f 1345 	bfc	r3, #5, #1
 8001bfa:	72fb      	strb	r3, [r7, #11]
  usbcfg.b.force_dev = 0;
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	f36f 1386 	bfc	r3, #6, #1
 8001c02:	72fb      	strb	r3, [r7, #11]
  
  if ( mode == HOST_MODE)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d104      	bne.n	8001c14 <USB_OTG_SetCurrentMode+0x38>
  {
    usbcfg.b.force_host = 1;
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f043 0320 	orr.w	r3, r3, #32
 8001c10:	72fb      	strb	r3, [r7, #11]
 8001c12:	e006      	b.n	8001c22 <USB_OTG_SetCurrentMode+0x46>
  }
  else if ( mode == DEVICE_MODE)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <USB_OTG_SetCurrentMode+0x46>
  {
    usbcfg.b.force_dev = 1;
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c20:	72fb      	strb	r3, [r7, #11]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, usbcfg.d32);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  USB_OTG_BSP_mDelay(50);
 8001c2a:	2032      	movs	r0, #50	; 0x32
 8001c2c:	f7ff fcea 	bl	8001604 <USB_OTG_BSP_mDelay>
  return status;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <USB_OTG_GetMode>:
* @brief  USB_OTG_GetMode : Get current mode
* @param  pdev : Selected device
* @retval current mode
*/
uint32_t USB_OTG_GetMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  return (USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS ) & 0x1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f003 0301 	and.w	r3, r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <USB_OTG_IsDeviceMode>:
* @brief  USB_OTG_IsDeviceMode : Check if it is device mode
* @param  pdev : Selected device
* @retval num_in_ep
*/
uint8_t USB_OTG_IsDeviceMode(USB_OTG_CORE_HANDLE *pdev)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return (USB_OTG_GetMode(pdev) != HOST_MODE);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffea 	bl	8001c3a <USB_OTG_GetMode>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <USB_OTG_ReadCoreItr>:
* @brief  USB_OTG_ReadCoreItr : returns the Core Interrupt register
* @param  pdev : Selected device
* @retval Status
*/
uint32_t USB_OTG_ReadCoreItr(USB_OTG_CORE_HANDLE *pdev)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  v = USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTSTS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.GREGS->GINTMSK);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  return v;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <USB_OTG_InitDevSpeed>:
*         depending the PHY type and the enumeration speed of the device.
* @param  pdev : Selected device
* @retval : None
*/
void USB_OTG_InitDevSpeed(USB_OTG_CORE_HANDLE *pdev , uint8_t speed)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef   dcfg;
  
  dcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCFG);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60fb      	str	r3, [r7, #12]
  dcfg.b.devspd = speed;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	7b3b      	ldrb	r3, [r7, #12]
 8001cc6:	f362 0301 	bfi	r3, r2, #0, #2
 8001cca:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCFG, dcfg.d32);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <USB_OTG_CoreInitDev>:
*         for device mode
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_CoreInitDev (USB_OTG_CORE_HANDLE *pdev)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status       = USB_OTG_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  USB_OTG_FSIZ_TypeDef    nptxfifosize;
  USB_OTG_FSIZ_TypeDef    txfifosize;
  USB_OTG_DIEPMSK_TypeDef msk;
  USB_OTG_DTHRCTL_TypeDef dthrctl;  
  
  depctl.d32 = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  dcfg.d32 = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  nptxfifosize.d32 = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  txfifosize.d32 = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  msk.d32 = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  
  /* Restart the Phy Clock */
  USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, 0);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
  /* Device configuration register */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	623b      	str	r3, [r7, #32]
  dcfg.b.perfrint = DCFG_FRAME_INTERVAL_80;
 8001d14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d18:	f36f 03c4 	bfc	r3, #3, #2
 8001d1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32 );
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	601a      	str	r2, [r3, #0]
  
#ifdef USB_OTG_FS_CORE
  if(pdev->cfg.coreID == USB_OTG_FS_CORE_ID  )
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7adb      	ldrb	r3, [r3, #11]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d133      	bne.n	8001d98 <USB_OTG_CoreInitDev+0xb8>
  {  
    
    /* Set Full speed phy */
    USB_OTG_InitDevSpeed (pdev , USB_OTG_SPEED_PARAM_FULL);
 8001d30:	2103      	movs	r1, #3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffb8 	bl	8001ca8 <USB_OTG_InitDevSpeed>
    
    /* set Rx FIFO size */
    USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GRXFSIZ, RX_FIFO_FS_SIZE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* EP0 TX*/
    nptxfifosize.b.depth     = TX0_FIFO_FS_SIZE;
 8001d40:	2320      	movs	r3, #32
 8001d42:	83fb      	strh	r3, [r7, #30]
    nptxfifosize.b.startaddr = RX_FIFO_FS_SIZE;
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	83bb      	strh	r3, [r7, #28]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF0_HNPTXFSIZ, nptxfifosize.d32 );
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
    
    
    /* EP1 TX*/
    txfifosize.b.startaddr = nptxfifosize.b.startaddr + nptxfifosize.b.depth;
 8001d50:	8bba      	ldrh	r2, [r7, #28]
 8001d52:	8bfb      	ldrh	r3, [r7, #30]
 8001d54:	4413      	add	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX1_FIFO_FS_SIZE;
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[0], txfifosize.d32 );
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    
    
    /* EP2 TX*/
    txfifosize.b.startaddr += txfifosize.b.depth;
 8001d68:	8b3a      	ldrh	r2, [r7, #24]
 8001d6a:	8b7b      	ldrh	r3, [r7, #26]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX2_FIFO_FS_SIZE;
 8001d72:	2320      	movs	r3, #32
 8001d74:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[1], txfifosize.d32 );
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    
    
    /* EP3 TX*/  
    txfifosize.b.startaddr += txfifosize.b.depth;
 8001d80:	8b3a      	ldrh	r2, [r7, #24]
 8001d82:	8b7b      	ldrh	r3, [r7, #26]
 8001d84:	4413      	add	r3, r2
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	833b      	strh	r3, [r7, #24]
    txfifosize.b.depth = TX3_FIFO_FS_SIZE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	837b      	strh	r3, [r7, #26]
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[2], txfifosize.d32 );
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    txfifosize.b.depth = TX5_FIFO_HS_SIZE;
    USB_OTG_WRITE_REG32( &pdev->regs.GREGS->DIEPTXF[4], txfifosize.d32 );
  }
#endif  
  /* Flush the FIFOs */
  USB_OTG_FlushTxFifo(pdev , 0x10); /* all Tx FIFOs */
 8001d98:	2110      	movs	r1, #16
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff feb4 	bl	8001b08 <USB_OTG_FlushTxFifo>
  USB_OTG_FlushRxFifo(pdev);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff feeb 	bl	8001b7c <USB_OTG_FlushRxFifo>
  /* Clear all pending Device Interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, 0 );
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, 0 );
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	619a      	str	r2, [r3, #24]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, 0 );
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dcc:	e03a      	b.n	8001e44 <USB_OTG_CoreInitDev+0x164>
  {
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[i]->DIEPCTL);
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    if (depctl.b.epena)
 8001dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <USB_OTG_CoreInitDev+0x12a>
    {
      depctl.d32 = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
      depctl.b.epdis = 1;
 8001df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      depctl.b.snak = 1;
 8001dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e08:	e001      	b.n	8001e0e <USB_OTG_CoreInitDev+0x12e>
    }
    else
    {
      depctl.d32 = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPCTL, depctl.d32);
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	3304      	adds	r3, #4
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPTSIZ, 0);
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	3304      	adds	r3, #4
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e32:	3304      	adds	r3, #4
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	22ff      	movs	r2, #255	; 0xff
 8001e3c:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	3301      	adds	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	785b      	ldrb	r3, [r3, #1]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8be      	bhi.n	8001dce <USB_OTG_CoreInitDev+0xee>
  }
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e54:	e035      	b.n	8001ec2 <USB_OTG_CoreInitDev+0x1e2>
  {
    USB_OTG_DEPCTL_TypeDef  depctl;
    depctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[i]->DOEPCTL);
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	3314      	adds	r3, #20
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
    if (depctl.b.epena)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <USB_OTG_CoreInitDev+0x1a8>
    {
      depctl.d32 = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
      depctl.b.epdis = 1;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e7c:	73fb      	strb	r3, [r7, #15]
      depctl.b.snak = 1;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	e001      	b.n	8001e8c <USB_OTG_CoreInitDev+0x1ac>
    }
    else
    {
      depctl.d32 = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
    }
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPCTL, depctl.d32);
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	3314      	adds	r3, #20
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	601a      	str	r2, [r3, #0]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPTSIZ, 0);
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	3314      	adds	r3, #20
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	3314      	adds	r3, #20
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	609a      	str	r2, [r3, #8]
  for (i = 0; i <  pdev->cfg.dev_endpoints; i++)
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d8c3      	bhi.n	8001e56 <USB_OTG_CoreInitDev+0x176>
  }
  msk.d32 = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  msk.b.txfifoundrn = 1;
 8001ed2:	7d7b      	ldrb	r3, [r7, #21]
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	757b      	strb	r3, [r7, #21]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPMSK, msk.d32, msk.d32);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6912      	ldr	r2, [r2, #16]
 8001ee2:	6911      	ldr	r1, [r2, #16]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	43d2      	mvns	r2, r2
 8001ee8:	4011      	ands	r1, r2
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	78db      	ldrb	r3, [r3, #3]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d11b      	bne.n	8001f30 <USB_OTG_CoreInitDev+0x250>
  {
    dthrctl.d32 = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
    dthrctl.b.non_iso_thr_en = 1;
 8001efc:	7c3b      	ldrb	r3, [r7, #16]
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	743b      	strb	r3, [r7, #16]
    dthrctl.b.iso_thr_en = 1;
 8001f04:	7c3b      	ldrb	r3, [r7, #16]
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	743b      	strb	r3, [r7, #16]
    dthrctl.b.tx_thr_len = 64;
 8001f0c:	8a3b      	ldrh	r3, [r7, #16]
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	f362 038a 	bfi	r3, r2, #2, #9
 8001f14:	823b      	strh	r3, [r7, #16]
    dthrctl.b.rx_thr_en = 1;
 8001f16:	7cbb      	ldrb	r3, [r7, #18]
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	74bb      	strb	r3, [r7, #18]
    dthrctl.b.rx_thr_len = 64;
 8001f1e:	8a7b      	ldrh	r3, [r7, #18]
 8001f20:	2240      	movs	r2, #64	; 0x40
 8001f22:	f362 0349 	bfi	r3, r2, #1, #9
 8001f26:	827b      	strh	r3, [r7, #18]
    USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DTHRCTL, dthrctl.d32);  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  USB_OTG_EnableDevInt(pdev);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f806 	bl	8001f42 <USB_OTG_EnableDevInt>
  return status;
 8001f36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3730      	adds	r7, #48	; 0x30
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <USB_OTG_EnableDevInt>:
* @brief  USB_OTG_EnableDevInt : Enables the Device mode interrupts
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EnableDevInt(USB_OTG_CORE_HANDLE *pdev)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  USB_OTG_STS status = USB_OTG_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  USB_OTG_GINTMSK_TypeDef  intmsk;
  
  intmsk.d32 = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  
  /* Disable all interrupts. */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTMSK, 0);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  /* Clear any pending interrupts */
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, 0xBFFFFFFF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001f62:	615a      	str	r2, [r3, #20]
  /* Enable the common interrupts */
  USB_OTG_EnableCommonInt(pdev);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fb6f 	bl	8001648 <USB_OTG_EnableCommonInt>
  
  if (pdev->cfg.dma_enable == 0)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d103      	bne.n	8001f7a <USB_OTG_EnableDevInt+0x38>
  {
    intmsk.b.rxstsqlvl = 1;
 8001f72:	7a3b      	ldrb	r3, [r7, #8]
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	723b      	strb	r3, [r7, #8]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  intmsk.b.usbsuspend = 1;
 8001f7a:	7a7b      	ldrb	r3, [r7, #9]
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	727b      	strb	r3, [r7, #9]
  intmsk.b.usbreset   = 1;
 8001f82:	7a7b      	ldrb	r3, [r7, #9]
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	727b      	strb	r3, [r7, #9]
  intmsk.b.enumdone   = 1;
 8001f8a:	7a7b      	ldrb	r3, [r7, #9]
 8001f8c:	f043 0320 	orr.w	r3, r3, #32
 8001f90:	727b      	strb	r3, [r7, #9]
  intmsk.b.inepintr   = 1;
 8001f92:	7abb      	ldrb	r3, [r7, #10]
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	72bb      	strb	r3, [r7, #10]
  intmsk.b.outepintr  = 1;
 8001f9a:	7abb      	ldrb	r3, [r7, #10]
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	72bb      	strb	r3, [r7, #10]
  intmsk.b.sofintr    = 1; 
 8001fa2:	7a3b      	ldrb	r3, [r7, #8]
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	723b      	strb	r3, [r7, #8]
  
  intmsk.b.incomplisoin    = 1; 
 8001faa:	7abb      	ldrb	r3, [r7, #10]
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	72bb      	strb	r3, [r7, #10]
  intmsk.b.incomplisoout    = 1;   
 8001fb2:	7abb      	ldrb	r3, [r7, #10]
 8001fb4:	f043 0320 	orr.w	r3, r3, #32
 8001fb8:	72bb      	strb	r3, [r7, #10]
#ifdef VBUS_SENSING_ENABLED
  intmsk.b.sessreqintr    = 1; 
  intmsk.b.otgintr    = 1;    
#endif  
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, intmsk.d32, intmsk.d32);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68d2      	ldr	r2, [r2, #12]
 8001fc2:	6991      	ldr	r1, [r2, #24]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	43d2      	mvns	r2, r2
 8001fc8:	4011      	ands	r1, r2
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	619a      	str	r2, [r3, #24]
  return status;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <USB_OTG_GetDeviceSpeed>:
*         Get the device speed from the device status register
* @param  None
* @retval status
*/
enum USB_OTG_SPEED USB_OTG_GetDeviceSpeed (USB_OTG_CORE_HANDLE *pdev)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_DSTS_TypeDef  dsts;
  enum USB_OTG_SPEED speed = USB_SPEED_UNKNOWN;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	60bb      	str	r3, [r7, #8]
  
  switch (dsts.b.enumspd)
 8001fee:	7a3b      	ldrb	r3, [r7, #8]
 8001ff0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d009      	beq.n	800200e <USB_OTG_GetDeviceSpeed+0x34>
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d004      	beq.n	8002008 <USB_OTG_GetDeviceSpeed+0x2e>
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d002      	beq.n	8002008 <USB_OTG_GetDeviceSpeed+0x2e>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
    speed = USB_SPEED_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	73fb      	strb	r3, [r7, #15]
    break;
 8002006:	e005      	b.n	8002014 <USB_OTG_GetDeviceSpeed+0x3a>
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    speed = USB_SPEED_FULL;
 8002008:	2302      	movs	r3, #2
 800200a:	73fb      	strb	r3, [r7, #15]
    break;
 800200c:	e002      	b.n	8002014 <USB_OTG_GetDeviceSpeed+0x3a>
    
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    speed = USB_SPEED_LOW;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
    break;
 8002012:	bf00      	nop
  }
  
  return speed;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <USB_OTG_EP0Activate>:
*   for transmitting packets
* @param  None
* @retval USB_OTG_STS : status
*/
USB_OTG_STS  USB_OTG_EP0Activate(USB_OTG_CORE_HANDLE *pdev)
{
 8002022:	b480      	push	{r7}
 8002024:	b087      	sub	sp, #28
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  USB_OTG_STS             status = USB_OTG_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DSTS_TypeDef    dsts;
  USB_OTG_DEPCTL_TypeDef  diepctl;
  USB_OTG_DCTL_TypeDef    dctl;
  
  dctl.d32 = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  /* Read the Device Status and Endpoint 0 Control registers */
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	613b      	str	r3, [r7, #16]
  diepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  /* Set the MPS of the IN EP based on the enumeration speed */
  switch (dsts.b.enumspd)
 8002042:	7c3b      	ldrb	r3, [r7, #16]
 8002044:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d004      	beq.n	8002058 <USB_OTG_EP0Activate+0x36>
  {
  case DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ:
  case DSTS_ENUMSPD_FS_PHY_48MHZ:
    diepctl.b.mps = DEP0CTL_MPS_64;
 800204e:	89bb      	ldrh	r3, [r7, #12]
 8002050:	f36f 030a 	bfc	r3, #0, #11
 8002054:	81bb      	strh	r3, [r7, #12]
    break;
 8002056:	e005      	b.n	8002064 <USB_OTG_EP0Activate+0x42>
  case DSTS_ENUMSPD_LS_PHY_6MHZ:
    diepctl.b.mps = DEP0CTL_MPS_8;
 8002058:	89bb      	ldrh	r3, [r7, #12]
 800205a:	2203      	movs	r2, #3
 800205c:	f362 030a 	bfi	r3, r2, #0, #11
 8002060:	81bb      	strh	r3, [r7, #12]
    break;
 8002062:	bf00      	nop
  }
  USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[0]->DIEPCTL, diepctl.d32);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	601a      	str	r2, [r3, #0]
  dctl.b.cgnpinnak = 1;
 800206c:	7a7b      	ldrb	r3, [r7, #9]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	727b      	strb	r3, [r7, #9]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, dctl.d32);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6912      	ldr	r2, [r2, #16]
 800207c:	6851      	ldr	r1, [r2, #4]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	43d2      	mvns	r2, r2
 8002082:	4011      	ands	r1, r2
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  return status;
 800208a:	7dfb      	ldrb	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <USB_OTG_EPActivate>:
* @brief  USB_OTG_EPActivate : Activates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPActivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  
  depctl.d32 = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10f      	bne.n	80020d6 <USB_OTG_EPActivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	2301      	movs	r3, #1
 80020ce:	4093      	lsls	r3, r2
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	813b      	strh	r3, [r7, #8]
 80020d4:	e00e      	b.n	80020f4 <USB_OTG_EPActivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	3314      	adds	r3, #20
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	2301      	movs	r3, #1
 80020ee:	4093      	lsls	r3, r2
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	817b      	strh	r3, [r7, #10]
  }
  /* If the EP is already active don't change the EP Control
  * register. */
  depctl.d32 = USB_OTG_READ_REG32(addr);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  if (!depctl.b.usbactep)
 80020fa:	7b7b      	ldrb	r3, [r7, #13]
 80020fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d127      	bne.n	8002156 <USB_OTG_EPActivate+0xbe>
  {
    depctl.b.mps    = ep->maxpacket;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	b29b      	uxth	r3, r3
 800210c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002110:	b29a      	uxth	r2, r3
 8002112:	89bb      	ldrh	r3, [r7, #12]
 8002114:	f362 030a 	bfi	r3, r2, #0, #11
 8002118:	81bb      	strh	r3, [r7, #12]
    depctl.b.eptype = ep->type;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	78db      	ldrb	r3, [r3, #3]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	b2da      	uxtb	r2, r3
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	f362 0383 	bfi	r3, r2, #2, #2
 800212a:	73bb      	strb	r3, [r7, #14]
    depctl.b.txfnum = ep->tx_fifo_num;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	88db      	ldrh	r3, [r3, #6]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	b2da      	uxtb	r2, r3
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	f362 1389 	bfi	r3, r2, #6, #4
 800213e:	81fb      	strh	r3, [r7, #14]
    depctl.b.setd0pid = 1;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	73fb      	strb	r3, [r7, #15]
    depctl.b.usbactep = 1;
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214e:	737b      	strb	r3, [r7, #13]
    USB_OTG_WRITE_REG32(addr, depctl.d32);
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, 0, daintmsk.d32);
  }
  else
#endif   
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, 0, daintmsk.d32);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6912      	ldr	r2, [r2, #16]
 800215e:	69d1      	ldr	r1, [r2, #28]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	430a      	orrs	r2, r1
 8002164:	61da      	str	r2, [r3, #28]
  return status;
 8002166:	7cfb      	ldrb	r3, [r7, #19]
}
 8002168:	4618      	mov	r0, r3
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <USB_OTG_EPDeactivate>:
* @brief  USB_OTG_EPDeactivate : Deactivates an EP
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPDeactivate(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  USB_OTG_DAINT_TypeDef  daintmsk;
  __IO uint32_t *addr;
  
  depctl.d32 = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
  daintmsk.d32 = 0;  
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	785b      	ldrb	r3, [r3, #1]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10f      	bne.n	80021b2 <USB_OTG_EPDeactivate+0x3e>
  {
    addr = &pdev->regs.INEP_REGS[ep->num]->DIEPCTL;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	617b      	str	r3, [r7, #20]
    daintmsk.ep.in = 1 << ep->num;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	2301      	movs	r3, #1
 80021aa:	4093      	lsls	r3, r2
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	813b      	strh	r3, [r7, #8]
 80021b0:	e00e      	b.n	80021d0 <USB_OTG_EPDeactivate+0x5c>
  }
  else
  {
    addr = &pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	3314      	adds	r3, #20
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	617b      	str	r3, [r7, #20]
    daintmsk.ep.out = 1 << ep->num;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	2301      	movs	r3, #1
 80021ca:	4093      	lsls	r3, r2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	817b      	strh	r3, [r7, #10]
  }
  depctl.b.usbactep = 0;
 80021d0:	7b7b      	ldrb	r3, [r7, #13]
 80021d2:	f36f 13c7 	bfc	r3, #7, #1
 80021d6:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32(addr, depctl.d32);
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]
  {
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DEACHMSK, daintmsk.d32, 0);
  }
  else
#endif    
    USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DAINTMSK, daintmsk.d32, 0);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6912      	ldr	r2, [r2, #16]
 80021e6:	69d1      	ldr	r1, [r2, #28]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	43d2      	mvns	r2, r2
 80021ec:	400a      	ands	r2, r1
 80021ee:	61da      	str	r2, [r3, #28]
  return status;
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <USB_OTG_EPStartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPStartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef     depctl;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  USB_OTG_DSTS_TypeDef       dsts;    
  uint32_t fifoemptymsk = 0;  
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
  
  depctl.d32 = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  deptsiz.d32 = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  /* IN endpoint */
  if (ep->is_in == 1)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2b01      	cmp	r3, #1
 800221e:	f040 80ab 	bne.w	8002378 <USB_OTG_EPStartXfer+0x17a>
  {
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPCTL));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	613b      	str	r3, [r7, #16]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <USB_OTG_EPStartXfer+0x64>
    {
      deptsiz.b.xfersize = 0;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f36f 0312 	bfc	r3, #0, #19
 8002254:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 8002256:	8a7b      	ldrh	r3, [r7, #18]
 8002258:	2201      	movs	r2, #1
 800225a:	f362 03cc 	bfi	r3, r2, #3, #10
 800225e:	827b      	strh	r3, [r7, #18]
 8002260:	e022      	b.n	80022a8 <USB_OTG_EPStartXfer+0xaa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      deptsiz.b.xfersize = ep->xfer_len;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f362 0312 	bfi	r3, r2, #0, #19
 8002270:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = (ep->xfer_len - 1 + ep->maxpacket) / ep->maxpacket;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4413      	add	r3, r2
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228c:	b29a      	uxth	r2, r3
 800228e:	8a7b      	ldrh	r3, [r7, #18]
 8002290:	f362 03cc 	bfi	r3, r2, #3, #10
 8002294:	827b      	strh	r3, [r7, #18]
      
      if (ep->type == EP_TYPE_ISOC)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	78db      	ldrb	r3, [r3, #3]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d104      	bne.n	80022a8 <USB_OTG_EPStartXfer+0xaa>
      {
        deptsiz.b.mc = 1;
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f362 1346 	bfi	r3, r2, #5, #2
 80022a6:	74fb      	strb	r3, [r7, #19]
      }       
    }
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPTSIZ, deptsiz.d32);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	3304      	adds	r3, #4
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	78db      	ldrb	r3, [r3, #3]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10a      	bne.n	80022d8 <USB_OTG_EPStartXfer+0xda>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	6912      	ldr	r2, [r2, #16]
 80022d4:	615a      	str	r2, [r3, #20]
 80022d6:	e015      	b.n	8002304 <USB_OTG_EPStartXfer+0x106>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	78db      	ldrb	r3, [r3, #3]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d011      	beq.n	8002304 <USB_OTG_EPStartXfer+0x106>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <USB_OTG_EPStartXfer+0x106>
        {
          fifoemptymsk = 1 << ep->num;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	2301      	movs	r3, #1
 80022f0:	4093      	lsls	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6912      	ldr	r2, [r2, #16]
 80022fc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	430a      	orrs	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	; 0x34
        }
      }
    }
    
    
    if (ep->type == EP_TYPE_ISOC)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	78db      	ldrb	r3, [r3, #3]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d114      	bne.n	8002336 <USB_OTG_EPStartXfer+0x138>
    {
      dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	60fb      	str	r3, [r7, #12]
      
      if (((dsts.b.soffn)&0x1) == 0)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800231a:	b29b      	uxth	r3, r3
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d104      	bne.n	800232e <USB_OTG_EPStartXfer+0x130>
      {
        depctl.b.setd1pid = 1;
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	f043 0320 	orr.w	r3, r3, #32
 800232a:	75fb      	strb	r3, [r7, #23]
 800232c:	e003      	b.n	8002336 <USB_OTG_EPStartXfer+0x138>
      }
      else
      {
        depctl.b.setd0pid = 1;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	f043 0310 	orr.w	r3, r3, #16
 8002334:	75fb      	strb	r3, [r7, #23]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPCTL, depctl.d32);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	78db      	ldrb	r3, [r3, #3]
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 8089 	bne.w	8002474 <USB_OTG_EPStartXfer+0x276>
    {
      USB_OTG_WritePacket(pdev, ep->xfer_buff, ep->num, ep->xfer_len);   
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68d9      	ldr	r1, [r3, #12]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	b29b      	uxth	r3, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff f9d3 	bl	800171c <USB_OTG_WritePacket>
 8002376:	e07d      	b.n	8002474 <USB_OTG_EPStartXfer+0x276>
    }    
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	3314      	adds	r3, #20
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	617b      	str	r3, [r7, #20]
    deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	3314      	adds	r3, #20
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	613b      	str	r3, [r7, #16]
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    if (ep->xfer_len == 0)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <USB_OTG_EPStartXfer+0x1c2>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f362 0312 	bfi	r3, r2, #0, #19
 80023b2:	613b      	str	r3, [r7, #16]
      deptsiz.b.pktcnt = 1;
 80023b4:	8a7b      	ldrh	r3, [r7, #18]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f362 03cc 	bfi	r3, r2, #3, #10
 80023bc:	827b      	strh	r3, [r7, #18]
 80023be:	e020      	b.n	8002402 <USB_OTG_EPStartXfer+0x204>
    }
    else
    {
      deptsiz.b.pktcnt = (ep->xfer_len + (ep->maxpacket - 1)) / ep->maxpacket;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	1e5a      	subs	r2, r3, #1
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023da:	b29a      	uxth	r2, r3
 80023dc:	8a7b      	ldrh	r3, [r7, #18]
 80023de:	f362 03cc 	bfi	r3, r2, #3, #10
 80023e2:	827b      	strh	r3, [r7, #18]
      deptsiz.b.xfersize = deptsiz.b.pktcnt * ep->maxpacket;
 80023e4:	8a7b      	ldrh	r3, [r7, #18]
 80023e6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	fb03 f302 	mul.w	r3, r3, r2
 80023f6:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f362 0312 	bfi	r3, r2, #0, #19
 8002400:	613b      	str	r3, [r7, #16]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	3314      	adds	r3, #20
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d109      	bne.n	8002430 <USB_OTG_EPStartXfer+0x232>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	3314      	adds	r3, #20
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6912      	ldr	r2, [r2, #16]
 800242e:	615a      	str	r2, [r3, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10c      	bne.n	8002452 <USB_OTG_EPStartXfer+0x254>
    {
      if (ep->even_odd_frame)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	795b      	ldrb	r3, [r3, #5]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <USB_OTG_EPStartXfer+0x24c>
      {
        depctl.b.setd1pid = 1;
 8002440:	7dfb      	ldrb	r3, [r7, #23]
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	75fb      	strb	r3, [r7, #23]
 8002448:	e003      	b.n	8002452 <USB_OTG_EPStartXfer+0x254>
      }
      else
      {
        depctl.b.setd0pid = 1;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	f043 0310 	orr.w	r3, r3, #16
 8002450:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	75fb      	strb	r3, [r7, #23]
    depctl.b.epena = 1;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002460:	75fb      	strb	r3, [r7, #23]
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL, depctl.d32);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	3314      	adds	r3, #20
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002474:	7ffb      	ldrb	r3, [r7, #31]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <USB_OTG_EP0StartXfer>:
*         starts the xfer
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EP0StartXfer(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 800247e:	b480      	push	{r7}
 8002480:	b089      	sub	sp, #36	; 0x24
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  USB_OTG_STS                 status = USB_OTG_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	77fb      	strb	r3, [r7, #31]
  USB_OTG_DEPCTL_TypeDef      depctl;
  USB_OTG_DEP0XFRSIZ_TypeDef  deptsiz;
  USB_OTG_INEPREGS          *in_regs;
  uint32_t fifoemptymsk = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
  
  depctl.d32   = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  deptsiz.d32  = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  /* IN endpoint */
  if (ep->is_in == 1)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d170      	bne.n	8002582 <USB_OTG_EP0StartXfer+0x104>
  {
    in_regs = pdev->regs.INEP_REGS[0];
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	617b      	str	r3, [r7, #20]
    depctl.d32  = USB_OTG_READ_REG32(&in_regs->DIEPCTL);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&in_regs->DIEPTSIZ);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	60bb      	str	r3, [r7, #8]
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <USB_OTG_EP0StartXfer+0x50>
    {
      deptsiz.b.xfersize = 0;
 80024ba:	7a3b      	ldrb	r3, [r7, #8]
 80024bc:	f36f 0306 	bfc	r3, #0, #7
 80024c0:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80024c2:	7abb      	ldrb	r3, [r7, #10]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f362 03c4 	bfi	r3, r2, #3, #2
 80024ca:	72bb      	strb	r3, [r7, #10]
 80024cc:	e023      	b.n	8002516 <USB_OTG_EP0StartXfer+0x98>
      
    }
    else
    {
      if (ep->xfer_len > ep->maxpacket)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d90e      	bls.n	80024f8 <USB_OTG_EP0StartXfer+0x7a>
      {
        ep->xfer_len = ep->maxpacket;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	615a      	str	r2, [r3, #20]
        deptsiz.b.xfersize = ep->maxpacket;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	7a3b      	ldrb	r3, [r7, #8]
 80024f0:	f362 0306 	bfi	r3, r2, #0, #7
 80024f4:	723b      	strb	r3, [r7, #8]
 80024f6:	e009      	b.n	800250c <USB_OTG_EP0StartXfer+0x8e>
      }
      else
      {
        deptsiz.b.xfersize = ep->xfer_len;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002502:	b2da      	uxtb	r2, r3
 8002504:	7a3b      	ldrb	r3, [r7, #8]
 8002506:	f362 0306 	bfi	r3, r2, #0, #7
 800250a:	723b      	strb	r3, [r7, #8]
      }
      deptsiz.b.pktcnt = 1;
 800250c:	7abb      	ldrb	r3, [r7, #10]
 800250e:	2201      	movs	r2, #1
 8002510:	f362 03c4 	bfi	r3, r2, #3, #2
 8002514:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&in_regs->DIEPTSIZ, deptsiz.d32);
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	611a      	str	r2, [r3, #16]
    
    if (pdev->cfg.dma_enable == 1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	78db      	ldrb	r3, [r3, #3]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d109      	bne.n	8002538 <USB_OTG_EP0StartXfer+0xba>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.INEP_REGS[ep->num]->DIEPDMA, ep->dma_addr);  
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	6912      	ldr	r2, [r2, #16]
 8002536:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable, IN data in FIFO */
    depctl.b.cnak = 1;
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002546:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32(&in_regs->DIEPCTL, depctl.d32);
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	601a      	str	r2, [r3, #0]
    
    
    
    if (pdev->cfg.dma_enable == 0)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	78db      	ldrb	r3, [r3, #3]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d176      	bne.n	8002644 <USB_OTG_EP0StartXfer+0x1c6>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d072      	beq.n	8002644 <USB_OTG_EP0StartXfer+0x1c6>
      {
        {
          fifoemptymsk |= 1 << ep->num;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	2301      	movs	r3, #1
 8002566:	4093      	lsls	r3, r2
 8002568:	461a      	mov	r2, r3
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
          USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, 0, fifoemptymsk);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6912      	ldr	r2, [r2, #16]
 8002578:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	430a      	orrs	r2, r1
 800257e:	635a      	str	r2, [r3, #52]	; 0x34
 8002580:	e060      	b.n	8002644 <USB_OTG_EP0StartXfer+0x1c6>
    }
  }
  else
  {
    /* OUT endpoint */
    depctl.d32  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	3314      	adds	r3, #20
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
    deptsiz.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	3314      	adds	r3, #20
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	60bb      	str	r3, [r7, #8]
    /* Program the transfer size and packet count as follows:
    * xfersize = N * (maxpacket + 4 - (maxpacket % 4))
    * pktcnt = N           */
    if (ep->xfer_len == 0)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <USB_OTG_EP0StartXfer+0x150>
    {
      deptsiz.b.xfersize = ep->maxpacket;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	7a3b      	ldrb	r3, [r7, #8]
 80025bc:	f362 0306 	bfi	r3, r2, #0, #7
 80025c0:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f362 03c4 	bfi	r3, r2, #3, #2
 80025ca:	72bb      	strb	r3, [r7, #10]
 80025cc:	e012      	b.n	80025f4 <USB_OTG_EP0StartXfer+0x176>
    }
    else
    {
      ep->xfer_len = ep->maxpacket;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	615a      	str	r2, [r3, #20]
      deptsiz.b.xfersize = ep->maxpacket;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	7a3b      	ldrb	r3, [r7, #8]
 80025e4:	f362 0306 	bfi	r3, r2, #0, #7
 80025e8:	723b      	strb	r3, [r7, #8]
      deptsiz.b.pktcnt = 1;
 80025ea:	7abb      	ldrb	r3, [r7, #10]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f362 03c4 	bfi	r3, r2, #3, #2
 80025f2:	72bb      	strb	r3, [r7, #10]
    }
    USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPTSIZ, deptsiz.d32);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	3314      	adds	r3, #20
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	611a      	str	r2, [r3, #16]
    if (pdev->cfg.dma_enable == 1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d109      	bne.n	8002622 <USB_OTG_EP0StartXfer+0x1a4>
    {
      USB_OTG_WRITE_REG32(&pdev->regs.OUTEP_REGS[ep->num]->DOEPDMA, ep->dma_addr);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	3314      	adds	r3, #20
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	6912      	ldr	r2, [r2, #16]
 8002620:	615a      	str	r2, [r3, #20]
    }
    /* EP enable */
    depctl.b.cnak = 1;
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	74fb      	strb	r3, [r7, #19]
    depctl.b.epena = 1;
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002630:	74fb      	strb	r3, [r7, #19]
    USB_OTG_WRITE_REG32 (&(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL), depctl.d32);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	3314      	adds	r3, #20
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	601a      	str	r2, [r3, #0]
    
  }
  return status;
 8002644:	7ffb      	ldrb	r3, [r7, #31]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <USB_OTG_EPSetStall>:
* @brief  USB_OTG_EPSetStall : Set the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPSetStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 8002652:	b480      	push	{r7}
 8002654:	b087      	sub	sp, #28
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  if (ep->is_in == 1)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d11c      	bne.n	80026a6 <USB_OTG_EPSetStall+0x54>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	3304      	adds	r3, #4
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
    /* set the disable and stall bits */
    if (depctl.b.epena)
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <USB_OTG_EPSetStall+0x44>
    {
      depctl.b.epdis = 1;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002694:	73fb      	strb	r3, [r7, #15]
    }
    depctl.b.stall = 1;
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e011      	b.n	80026ca <USB_OTG_EPSetStall+0x78>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	3314      	adds	r3, #20
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]
    depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
    /* set the stall bit */
    depctl.b.stall = 1;
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	f043 0320 	orr.w	r3, r3, #32
 80026c2:	73bb      	strb	r3, [r7, #14]
    USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]
  }
  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <USB_OTG_EPClearStall>:
* @brief  Clear the EP STALL
* @param  pdev : Selected device
* @retval USB_OTG_STS : status
*/
USB_OTG_STS USB_OTG_EPClearStall(USB_OTG_CORE_HANDLE *pdev , USB_OTG_EP *ep)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  USB_OTG_STS status = USB_OTG_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	74fb      	strb	r3, [r7, #19]
  USB_OTG_DEPCTL_TypeDef  depctl;
  __IO uint32_t *depctl_addr;
  
  depctl.d32 = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  
  if (ep->is_in == 1)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	785b      	ldrb	r3, [r3, #1]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d108      	bne.n	8002704 <USB_OTG_EPClearStall+0x2c>
  {
    depctl_addr = &(pdev->regs.INEP_REGS[ep->num]->DIEPCTL);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e007      	b.n	8002714 <USB_OTG_EPClearStall+0x3c>
  }
  else
  {
    depctl_addr = &(pdev->regs.OUTEP_REGS[ep->num]->DOEPCTL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	3314      	adds	r3, #20
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	617b      	str	r3, [r7, #20]
  }
  depctl.d32 = USB_OTG_READ_REG32(depctl_addr);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
  /* clear the stall bits */
  depctl.b.stall = 0;
 800271a:	7bbb      	ldrb	r3, [r7, #14]
 800271c:	f36f 1345 	bfc	r3, #5, #1
 8002720:	73bb      	strb	r3, [r7, #14]
  if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	78db      	ldrb	r3, [r3, #3]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d003      	beq.n	8002732 <USB_OTG_EPClearStall+0x5a>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	78db      	ldrb	r3, [r3, #3]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d103      	bne.n	800273a <USB_OTG_EPClearStall+0x62>
  {
    depctl.b.setd0pid = 1; /* DATA0 */
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	73fb      	strb	r3, [r7, #15]
  }
  USB_OTG_WRITE_REG32(depctl_addr, depctl.d32);
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]
  return status;
 8002740:	7cfb      	ldrb	r3, [r7, #19]
}
 8002742:	4618      	mov	r0, r3
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <USB_OTG_ReadDevAllOutEp_itr>:
* @brief  USB_OTG_ReadDevAllOutEp_itr : returns OUT endpoint interrupt bits
* @param  pdev : Selected device
* @retval OUT endpoint interrupt bits
*/
uint32_t USB_OTG_ReadDevAllOutEp_itr(USB_OTG_CORE_HANDLE *pdev)
{
 800274e:	b480      	push	{r7}
 8002750:	b085      	sub	sp, #20
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	0c1b      	lsrs	r3, r3, #16
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <USB_OTG_ReadDevOutEP_itr>:
* @param  pdev : Selected device
* @param  ep : end point number
* @retval Device OUT EP Interrupt register
*/
uint32_t USB_OTG_ReadDevOutEP_itr(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[epnum]->DOEPINT);
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	3314      	adds	r3, #20
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DOEPMSK);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  return v;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <USB_OTG_ReadDevAllInEPItr>:
* @brief  USB_OTG_ReadDevAllInEPItr : Get int status register
* @param  pdev : Selected device
* @retval int status register
*/
uint32_t USB_OTG_ReadDevAllInEPItr(USB_OTG_CORE_HANDLE *pdev)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v = USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]
  v &= USB_OTG_READ_REG32(&pdev->regs.DREGS->DAINTMSK);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  return (v & 0xffff);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	b29b      	uxth	r3, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <USB_OTG_EP0_OutStart>:
* @brief  configures EPO to receive SETUP packets
* @param  None
* @retval : None
*/
void USB_OTG_EP0_OutStart(USB_OTG_CORE_HANDLE *pdev)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  USB_OTG_DEP0XFRSIZ_TypeDef  doeptsize0;
  doeptsize0.d32 = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  doeptsize0.b.supcnt = 3;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ee:	74fb      	strb	r3, [r7, #19]
  doeptsize0.b.pktcnt = 1;
 80027f0:	7cbb      	ldrb	r3, [r7, #18]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f362 03c4 	bfi	r3, r2, #3, #2
 80027f8:	74bb      	strb	r3, [r7, #18]
  doeptsize0.b.xfersize = 8 * 3;
 80027fa:	7c3b      	ldrb	r3, [r7, #16]
 80027fc:	2218      	movs	r2, #24
 80027fe:	f362 0306 	bfi	r3, r2, #0, #7
 8002802:	743b      	strb	r3, [r7, #16]
  USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPTSIZ, doeptsize0.d32 );
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	611a      	str	r2, [r3, #16]
  
  if (pdev->cfg.dma_enable == 1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	78db      	ldrb	r3, [r3, #3]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d116      	bne.n	8002842 <USB_OTG_EP0_OutStart+0x66>
  {
    USB_OTG_DEPCTL_TypeDef  doepctl;
    doepctl.d32 = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPDMA, 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	f202 52cc 	addw	r2, r2, #1484	; 0x5cc
 8002822:	615a      	str	r2, [r3, #20]
                        (uint32_t)&pdev->dev.setup_packet);
    
    /* EP enable */
    doepctl.d32 = USB_OTG_READ_REG32(&pdev->regs.OUTEP_REGS[0]->DOEPCTL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
    doepctl.b.epena = 1;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002832:	73fb      	strb	r3, [r7, #15]
    doepctl.d32 = 0x80008000;
 8002834:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8002838:	60fb      	str	r3, [r7, #12]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[0]->DOEPCTL, doepctl.d32);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]
  }
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <DCD_Init>:



void DCD_Init(USB_OTG_CORE_HANDLE *pdev , 
              USB_OTG_CORE_ID_TypeDef coreID)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
  uint32_t i;
  USB_OTG_EP *ep;
  
  USB_OTG_SelectCore (pdev , coreID);
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	4619      	mov	r1, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe ffc4 	bl	80017ec <USB_OTG_SelectCore>
  
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_address = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  
  /* Init ep structure */
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e024      	b.n	80028c4 <DCD_Init+0x76>
  {
    ep = &pdev->dev.in_ep[i];
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 1;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2201      	movs	r2, #1
 8002894:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	80da      	strh	r2, [r3, #6]
    /* Control until ep is actvated */
    ep->type = EP_TYPE_CTRL;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2200      	movs	r2, #0
 80028aa:	70da      	strb	r2, [r3, #3]
    ep->maxpacket =  USB_OTG_MAX_EP0_SIZE;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3301      	adds	r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d8d4      	bhi.n	800287a <DCD_Init+0x2c>
  }
  
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e024      	b.n	8002920 <DCD_Init+0xd2>
  {
    ep = &pdev->dev.out_ep[i];
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	60bb      	str	r3, [r7, #8]
    /* Init ep structure */
    ep->is_in = 0;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	705a      	strb	r2, [r3, #1]
    ep->num = i;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	701a      	strb	r2, [r3, #0]
    ep->tx_fifo_num = i;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	80da      	strh	r2, [r3, #6]
    /* Control until ep is activated */
    ep->type = EP_TYPE_CTRL;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	70da      	strb	r2, [r3, #3]
    ep->maxpacket = USB_OTG_MAX_EP0_SIZE;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	609a      	str	r2, [r3, #8]
    ep->xfer_buff = 0;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  for (i = 0; i < pdev->cfg.dev_endpoints; i++)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3301      	adds	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	461a      	mov	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	d8d4      	bhi.n	80028d6 <DCD_Init+0x88>
  }
  
  USB_OTG_DisableGlobalInt(pdev);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff f8cf 	bl	8001ad0 <USB_OTG_DisableGlobalInt>
  
  /*Init the Core (common init.) */
  USB_OTG_CoreInit(pdev);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff f814 	bl	8001960 <USB_OTG_CoreInit>


  /* Force Device Mode*/
  USB_OTG_SetCurrentMode(pdev, DEVICE_MODE);
 8002938:	2100      	movs	r1, #0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff f94e 	bl	8001bdc <USB_OTG_SetCurrentMode>
  
  /* Init Device */
  USB_OTG_CoreInitDev(pdev);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff f9cd 	bl	8001ce0 <USB_OTG_CoreInitDev>
  
  
  /* Enable USB Global interrupt */
  USB_OTG_EnableGlobalInt(pdev);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff f8a7 	bl	8001a9a <USB_OTG_EnableGlobalInt>
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <DCD_EP_Open>:
*/
uint32_t DCD_EP_Open(USB_OTG_CORE_HANDLE *pdev , 
                     uint8_t ep_addr,
                     uint16_t ep_mps,
                     uint8_t ep_type)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	70fb      	strb	r3, [r7, #3]
 8002966:	460b      	mov	r3, r1
 8002968:	803b      	strh	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	70bb      	strb	r3, [r7, #2]
  USB_OTG_EP *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800296e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002972:	2b00      	cmp	r3, #0
 8002974:	da0d      	bge.n	8002992 <DCD_EP_Open+0x3e>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e00c      	b.n	80029ac <DCD_EP_Open+0x58>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80029b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	09db      	lsrs	r3, r3, #7
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 80029c8:	883a      	ldrh	r2, [r7, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	78ba      	ldrb	r2, [r7, #2]
 80029d2:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	785b      	ldrb	r3, [r3, #1]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <DCD_EP_Open+0x92>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == USB_OTG_EP_BULK )
 80029e6:	78bb      	ldrb	r3, [r7, #2]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d102      	bne.n	80029f2 <DCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	711a      	strb	r2, [r3, #4]
  }
  USB_OTG_EPActivate(pdev , ep );
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fb4f 	bl	8002098 <USB_OTG_EPActivate>
  return 0;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <DCD_EP_Close>:
* @param pdev: device instance
* @param ep_addr: endpoint address
* @retval : status
*/
uint32_t DCD_EP_Close(USB_OTG_CORE_HANDLE *pdev , uint8_t  ep_addr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if ((ep_addr&0x80) == 0x80)
 8002a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da0d      	bge.n	8002a34 <DCD_EP_Close+0x30>
  {
    ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e00c      	b.n	8002a4e <DCD_EP_Close+0x4a>
  }
  else
  {
    ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	701a      	strb	r2, [r3, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	09db      	lsrs	r3, r3, #7
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	705a      	strb	r2, [r3, #1]
  USB_OTG_EPDeactivate(pdev , ep );
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fb81 	bl	8002174 <USB_OTG_EPDeactivate>
  return 0;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <DCD_EP_PrepareRx>:
*/
uint32_t   DCD_EP_PrepareRx( USB_OTG_CORE_HANDLE *pdev,
                            uint8_t   ep_addr,
                            uint8_t *pbuf,                        
                            uint16_t  buf_len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	461a      	mov	r2, r3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	72fb      	strb	r3, [r7, #11]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	813b      	strh	r3, [r7, #8]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.out_ep[ep_addr & 0x7F];
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pbuf;  
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = buf_len;
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	701a      	strb	r2, [r3, #0]
  
  if (pdev->cfg.dma_enable == 1)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <DCD_EP_PrepareRx+0x60>
  {
    ep->dma_addr = (uint32_t)pbuf;  
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	611a      	str	r2, [r3, #16]
  }
  
  if ( ep->num == 0 )
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <DCD_EP_PrepareRx+0x72>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8002ae4:	6979      	ldr	r1, [r7, #20]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff fcc9 	bl	800247e <USB_OTG_EP0StartXfer>
 8002aec:	e003      	b.n	8002af6 <DCD_EP_PrepareRx+0x7a>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff fb84 	bl	80021fe <USB_OTG_EPStartXfer>
  }
  return 0;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <DCD_EP_Tx>:
*/
uint32_t  DCD_EP_Tx ( USB_OTG_CORE_HANDLE *pdev,
                     uint8_t   ep_addr,
                     uint8_t   *pbuf,
                     uint32_t   buf_len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EP *ep;
  
  ep = &pdev->dev.in_ep[ep_addr & 0x7F];
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	617b      	str	r3, [r7, #20]
  
  /* Setup and start the Transfer */
  ep->is_in = 1;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;  
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	701a      	strb	r2, [r3, #0]
  ep->xfer_buff = pbuf;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	60da      	str	r2, [r3, #12]
  ep->dma_addr = (uint32_t)pbuf;  
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  ep->xfer_len  = buf_len;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	615a      	str	r2, [r3, #20]
  
  if ( ep->num == 0 )
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <DCD_EP_Tx+0x66>
  {
    USB_OTG_EP0StartXfer(pdev , ep);
 8002b5c:	6979      	ldr	r1, [r7, #20]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff fc8d 	bl	800247e <USB_OTG_EP0StartXfer>
 8002b64:	e003      	b.n	8002b6e <DCD_EP_Tx+0x6e>
  }
  else
  {
    USB_OTG_EPStartXfer(pdev, ep );
 8002b66:	6979      	ldr	r1, [r7, #20]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff fb48 	bl	80021fe <USB_OTG_EPStartXfer>
  }
  return 0;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DCD_EP_Stall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_Stall (USB_OTG_CORE_HANDLE *pdev, uint8_t   epnum)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8002b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da0d      	bge.n	8002ba8 <DCD_EP_Stall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e00a      	b.n	8002bbe <DCD_EP_Stall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3304      	adds	r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8002bd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	09db      	lsrs	r3, r3, #7
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPSetStall(pdev , ep);
 8002be0:	68f9      	ldr	r1, [r7, #12]
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fd35 	bl	8002652 <USB_OTG_EPSetStall>
  return (0);
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <DCD_EP_ClrStall>:
* @param pdev: device instance
* @param epnum: endpoint address
* @retval : status
*/
uint32_t  DCD_EP_ClrStall (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  if ((0x80 & epnum) == 0x80)
 8002bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da0d      	bge.n	8002c22 <DCD_EP_ClrStall+0x30>
  {
    ep = &pdev->dev.in_ep[epnum & 0x7F];    
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e00a      	b.n	8002c38 <DCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &pdev->dev.out_ep[epnum];
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	3304      	adds	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;  
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	709a      	strb	r2, [r3, #2]
  ep->num   = epnum & 0x7F;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((epnum & 0x80) == 0x80);
 8002c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	09db      	lsrs	r3, r3, #7
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	705a      	strb	r2, [r3, #1]
  
  USB_OTG_EPClearStall(pdev , ep);
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff fd3b 	bl	80026d8 <USB_OTG_EPClearStall>
  return (0);
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DCD_EP_SetAddress>:
* @param pdev: device instance
* @param address: new device address
* @retval : status
*/
void  DCD_EP_SetAddress (USB_OTG_CORE_HANDLE *pdev, uint8_t address)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_DCFG_TypeDef  dcfg;
  dcfg.d32 = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  dcfg.b.devaddr = address;
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	89bb      	ldrh	r3, [r7, #12]
 8002c86:	f362 130a 	bfi	r3, r2, #4, #7
 8002c8a:	81bb      	strh	r3, [r7, #12]
  USB_OTG_MODIFY_REG32( &pdev->regs.DREGS->DCFG, 0, dcfg.d32);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6912      	ldr	r2, [r2, #16]
 8002c94:	6811      	ldr	r1, [r2, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <USBD_OTG_ISR_Handler>:
*         handles all USB Interrupts
* @param  pdev: device instance
* @retval status
*/
uint32_t USBD_OTG_ISR_Handler (USB_OTG_CORE_HANDLE *pdev)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintr_status;
  uint32_t retval = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  
  if (USB_OTG_IsDeviceMode(pdev)) /* ensure that we are in device mode */
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fe ffcf 	bl	8001c58 <USB_OTG_IsDeviceMode>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 809c 	beq.w	8002dfa <USBD_OTG_ISR_Handler+0x152>
  {
    gintr_status.d32 = USB_OTG_ReadCoreItr(pdev);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe ffd9 	bl	8001c7a <USB_OTG_ReadCoreItr>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	613b      	str	r3, [r7, #16]
    if (!gintr_status.d32) /* avoid spurious interrupt */
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <USBD_OTG_ISR_Handler+0x2e>
    {
      return 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e092      	b.n	8002dfc <USBD_OTG_ISR_Handler+0x154>
    }
    
    if (gintr_status.b.outepintr)
 8002cd6:	7cbb      	ldrb	r3, [r7, #18]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <USBD_OTG_ISR_Handler+0x48>
    {
      retval |= DCD_HandleOutEP_ISR(pdev);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9fa 	bl	80030dc <DCD_HandleOutEP_ISR>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
    }    
    
    if (gintr_status.b.inepint)
 8002cf0:	7cbb      	ldrb	r3, [r7, #18]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <USBD_OTG_ISR_Handler+0x62>
    {
      retval |= DCD_HandleInEP_ISR(pdev);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f91f 	bl	8002f40 <DCD_HandleInEP_ISR>
 8002d02:	4602      	mov	r2, r0
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.modemismatch)
 8002d0a:	7c3b      	ldrb	r3, [r7, #16]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <USBD_OTG_ISR_Handler+0x82>
    {
      USB_OTG_GINTSTS_TypeDef  gintsts;
      
      /* Clear interrupt */
      gintsts.d32 = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
      gintsts.b.modemismatch = 1;
 8002d1a:	7b3b      	ldrb	r3, [r7, #12]
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	733b      	strb	r3, [r7, #12]
      USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	615a      	str	r2, [r3, #20]
    }
    
    if (gintr_status.b.wkupintr)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <USBD_OTG_ISR_Handler+0x9c>
    {
      retval |= DCD_HandleResume_ISR(pdev);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f864 	bl	8002e04 <DCD_HandleResume_ISR>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.usbsuspend)
 8002d44:	7c7b      	ldrb	r3, [r7, #17]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <USBD_OTG_ISR_Handler+0xb6>
    {
      retval |= DCD_HandleUSBSuspend_ISR(pdev);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f897 	bl	8002e84 <DCD_HandleUSBSuspend_ISR>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
    }
    if (gintr_status.b.sofintr)
 8002d5e:	7c3b      	ldrb	r3, [r7, #16]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <USBD_OTG_ISR_Handler+0xd0>
    {
      retval |= DCD_HandleSof_ISR(pdev);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa5e 	bl	800322c <DCD_HandleSof_ISR>
 8002d70:	4602      	mov	r2, r0
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.rxstsqlvl)
 8002d78:	7c3b      	ldrb	r3, [r7, #16]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <USBD_OTG_ISR_Handler+0xea>
    {
      retval |= DCD_HandleRxStatusQueueLevel_ISR(pdev);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa6b 	bl	8003260 <DCD_HandleRxStatusQueueLevel_ISR>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
      
    }
    
    if (gintr_status.b.usbreset)
 8002d92:	7c7b      	ldrb	r3, [r7, #17]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <USBD_OTG_ISR_Handler+0x104>
    {
      retval |= DCD_HandleUsbReset_ISR(pdev);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fb52 	bl	8003448 <DCD_HandleUsbReset_ISR>
 8002da4:	4602      	mov	r2, r0
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
      
    }
    if (gintr_status.b.enumdone)
 8002dac:	7c7b      	ldrb	r3, [r7, #17]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <USBD_OTG_ISR_Handler+0x11e>
    {
      retval |= DCD_HandleEnumDone_ISR(pdev);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fbd5 	bl	8003568 <DCD_HandleEnumDone_ISR>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
    }
    
    if (gintr_status.b.incomplisoin)
 8002dc6:	7cbb      	ldrb	r3, [r7, #18]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <USBD_OTG_ISR_Handler+0x138>
    {
      retval |= DCD_IsoINIncomplete_ISR(pdev);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fc04 	bl	80035e0 <DCD_IsoINIncomplete_ISR>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
    }

    if (gintr_status.b.incomplisoout)
 8002de0:	7cbb      	ldrb	r3, [r7, #18]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <USBD_OTG_ISR_Handler+0x152>
    {
      retval |= DCD_IsoOUTIncomplete_ISR(pdev);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fc11 	bl	8003614 <DCD_IsoOUTIncomplete_ISR>
 8002df2:	4602      	mov	r2, r0
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
    {
      retval |= DCD_OTG_ISR(pdev);
    }   
#endif    
  }
  return retval;
 8002dfa:	697b      	ldr	r3, [r7, #20]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <DCD_HandleResume_ISR>:
*                 remote Wake-up sequence
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleResume_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_DCTL_TypeDef     devctl;
  USB_OTG_PCGCCTL_TypeDef  power;
  
  if(pdev->cfg.low_power)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7a9b      	ldrb	r3, [r3, #10]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d011      	beq.n	8002e38 <DCD_HandleResume_ISR+0x34>
  {
    /* un-gate USB Core clock */
    power.d32 = USB_OTG_READ_REG32(&pdev->regs.PCGCCTL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
    power.b.gatehclk = 0;
 8002e1e:	7b3b      	ldrb	r3, [r7, #12]
 8002e20:	f36f 0341 	bfc	r3, #1, #1
 8002e24:	733b      	strb	r3, [r7, #12]
    power.b.stoppclk = 0;
 8002e26:	7b3b      	ldrb	r3, [r7, #12]
 8002e28:	f36f 0300 	bfc	r3, #0, #1
 8002e2c:	733b      	strb	r3, [r7, #12]
    USB_OTG_WRITE_REG32(pdev->regs.PCGCCTL, power.d32);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	601a      	str	r2, [r3, #0]
  }
  
  /* Clear the Remote Wake-up Signaling */
  devctl.d32 = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  devctl.b.rmtwkupsig = 1;
 8002e3c:	7c3b      	ldrb	r3, [r7, #16]
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, devctl.d32, 0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6912      	ldr	r2, [r2, #16]
 8002e4c:	6851      	ldr	r1, [r2, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	43d2      	mvns	r2, r2
 8002e52:	400a      	ands	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
  
  /* Inform upper layer by the Resume Event */
  USBD_DCD_INT_fops->Resume (pdev);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <DCD_HandleResume_ISR+0x7c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  gintsts.b.wkupintr = 1;
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6a:	75fb      	strb	r3, [r7, #23]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	615a      	str	r2, [r3, #20]
  return 1;
 8002e74:	2301      	movs	r3, #1
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200000cc 	.word	0x200000cc

08002e84 <DCD_HandleUSBSuspend_ISR>:
*         Indicates that SUSPEND state has been detected on the USB
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUSBSuspend_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_PCGCCTL_TypeDef  power;
  USB_OTG_DSTS_TypeDef     dsts;
  __IO uint8_t prev_status = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	72fb      	strb	r3, [r7, #11]
  
  prev_status = pdev->dev.device_status;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8002e96:	72fb      	strb	r3, [r7, #11]
  USBD_DCD_INT_fops->Suspend (pdev);      
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <DCD_HandleUSBSuspend_ISR+0xb4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
  
  dsts.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DSTS);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	60fb      	str	r3, [r7, #12]
    
  /* Clear interrupt */
  gintsts.d32 = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  gintsts.b.usbsuspend = 1;
 8002eae:	7d7b      	ldrb	r3, [r7, #21]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	757b      	strb	r3, [r7, #21]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	615a      	str	r2, [r3, #20]
  
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7a9b      	ldrb	r3, [r3, #10]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d032      	beq.n	8002f2c <DCD_HandleUSBSuspend_ISR+0xa8>
 8002ec6:	7b3b      	ldrb	r3, [r7, #12]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d02c      	beq.n	8002f2c <DCD_HandleUSBSuspend_ISR+0xa8>
    (pdev->dev.connection_status == 1) && 
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
  if((pdev->cfg.low_power) && (dsts.b.suspsts == 1)  && 
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d127      	bne.n	8002f2c <DCD_HandleUSBSuspend_ISR+0xa8>
    (prev_status  == USB_OTG_CONFIGURED))
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	b2db      	uxtb	r3, r3
    (pdev->dev.connection_status == 1) && 
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d123      	bne.n	8002f2c <DCD_HandleUSBSuspend_ISR+0xa8>
  {
	/*  switch-off the clocks */
    power.d32 = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
    power.b.stoppclk = 1;
 8002ee8:	7c3b      	ldrb	r3, [r7, #16]
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);  
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
    
    power.b.gatehclk = 1;
 8002f04:	7c3b      	ldrb	r3, [r7, #16]
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	743b      	strb	r3, [r7, #16]
    USB_OTG_MODIFY_REG32(pdev->regs.PCGCCTL, 0, power.d32);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8002f18:	6811      	ldr	r1, [r2, #0]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
    
    /* Request to enter Sleep mode after exit from current ISR */
    SCB->SCR |= (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk);
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <DCD_HandleUSBSuspend_ISR+0xb8>)
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <DCD_HandleUSBSuspend_ISR+0xb8>)
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f043 0306 	orr.w	r3, r3, #6
 8002f2a:	6113      	str	r3, [r2, #16]
  }
  return 1;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200000cc 	.word	0x200000cc
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <DCD_HandleInEP_ISR>:
*         Indicates that an IN EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleInEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  USB_OTG_DIEPINTn_TypeDef  diepint;
  
  uint32_t ep_intr;
  uint32_t epnum = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
  uint32_t fifoemptymsk;
  diepint.d32 = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  ep_intr = USB_OTG_ReadDevAllInEPItr(pdev);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff fc2d 	bl	80027b0 <USB_OTG_ReadDevAllInEPItr>
 8002f56:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 8002f58:	e0b4      	b.n	80030c4 <DCD_HandleInEP_ISR+0x184>
  {
    if (ep_intr&0x1) /* In ITR */
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a9 	beq.w	80030b8 <DCD_HandleInEP_ISR+0x178>
    {
      diepint.d32 = DCD_ReadDevInEP(pdev , epnum); /* Get In ITR status */
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fb6b 	bl	8003648 <DCD_ReadDevInEP>
 8002f72:	4603      	mov	r3, r0
 8002f74:	60bb      	str	r3, [r7, #8]
      if ( diepint.b.xfercompl )
 8002f76:	7a3b      	ldrb	r3, [r7, #8]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d032      	beq.n	8002fe8 <DCD_HandleInEP_ISR+0xa8>
      {
        fifoemptymsk = 0x1 << epnum;
 8002f82:	2201      	movs	r2, #1
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	60fb      	str	r3, [r7, #12]
        USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DIEPEMPMSK, fifoemptymsk, 0);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6912      	ldr	r2, [r2, #16]
 8002f94:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	43d2      	mvns	r2, r2
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34
        CLEAR_IN_EP_INTR(epnum, xfercompl);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	7a3b      	ldrb	r3, [r7, #8]
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	723b      	strb	r3, [r7, #8]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	609a      	str	r2, [r3, #8]
        /* TX COMPLETE */
        USBD_DCD_INT_fops->DataInStage(pdev , epnum);
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <DCD_HandleInEP_ISR+0x198>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	78db      	ldrb	r3, [r3, #3]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10a      	bne.n	8002fe8 <DCD_HandleInEP_ISR+0xa8>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_IN))
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <DCD_HandleInEP_ISR+0xa8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d102      	bne.n	8002fe8 <DCD_HandleInEP_ISR+0xa8>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fbfa 	bl	80027dc <USB_OTG_EP0_OutStart>
          }
        }           
      }
      if ( diepint.b.timeout )
 8002fe8:	7a3b      	ldrb	r3, [r7, #8]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <DCD_HandleInEP_ISR+0xd0>
      {
        CLEAR_IN_EP_INTR(epnum, timeout);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	7a3b      	ldrb	r3, [r7, #8]
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	723b      	strb	r3, [r7, #8]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	3304      	adds	r3, #4
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.intktxfemp)
 8003010:	7a3b      	ldrb	r3, [r7, #8]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <DCD_HandleInEP_ISR+0xf8>
      {
        CLEAR_IN_EP_INTR(epnum, intktxfemp);
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	7a3b      	ldrb	r3, [r7, #8]
 8003022:	f043 0310 	orr.w	r3, r3, #16
 8003026:	723b      	strb	r3, [r7, #8]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	3304      	adds	r3, #4
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]
      }
      if (diepint.b.inepnakeff)
 8003038:	7a3b      	ldrb	r3, [r7, #8]
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00d      	beq.n	8003060 <DCD_HandleInEP_ISR+0x120>
      {
        CLEAR_IN_EP_INTR(epnum, inepnakeff);
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	7a3b      	ldrb	r3, [r7, #8]
 800304a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800304e:	723b      	strb	r3, [r7, #8]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	3304      	adds	r3, #4
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]
      }
      if ( diepint.b.epdisabled )
 8003060:	7a3b      	ldrb	r3, [r7, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <DCD_HandleInEP_ISR+0x148>
      {
        CLEAR_IN_EP_INTR(epnum, epdisabled);
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	7a3b      	ldrb	r3, [r7, #8]
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	723b      	strb	r3, [r7, #8]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	3304      	adds	r3, #4
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	609a      	str	r2, [r3, #8]
      }       
      if (diepint.b.emptyintr)
 8003088:	7a3b      	ldrb	r3, [r7, #8]
 800308a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d011      	beq.n	80030b8 <DCD_HandleInEP_ISR+0x178>
      {
        
        DCD_WriteEmptyTxFifo(pdev , epnum);
 8003094:	6939      	ldr	r1, [r7, #16]
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f964 	bl	8003364 <DCD_WriteEmptyTxFifo>
        
        CLEAR_IN_EP_INTR(epnum, emptyintr);
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	7a3b      	ldrb	r3, [r7, #8]
 80030a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a6:	723b      	strb	r3, [r7, #8]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	3304      	adds	r3, #4
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	3301      	adds	r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	085b      	lsrs	r3, r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f47f af47 	bne.w	8002f5a <DCD_HandleInEP_ISR+0x1a>
  }
  
  return 1;
 80030cc:	2301      	movs	r3, #1
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200000cc 	.word	0x200000cc

080030dc <DCD_HandleOutEP_ISR>:
*         Indicates that an OUT EP has a pending Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleOutEP_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t ep_intr;
  USB_OTG_DOEPINTn_TypeDef  doepint;
  USB_OTG_DEPXFRSIZ_TypeDef  deptsiz;
  uint32_t epnum = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
  
  doepint.d32 = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  
  /* Read in the device interrupt bits */
  ep_intr = USB_OTG_ReadDevAllOutEp_itr(pdev);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fb2e 	bl	800274e <USB_OTG_ReadDevAllOutEp_itr>
 80030f2:	6178      	str	r0, [r7, #20]
  
  while ( ep_intr )
 80030f4:	e08f      	b.n	8003216 <DCD_HandleOutEP_ISR+0x13a>
  {
    if (ep_intr&0x1)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8084 	beq.w	800320a <DCD_HandleOutEP_ISR+0x12e>
    {
      
      doepint.d32 = USB_OTG_ReadDevOutEP_itr(pdev, epnum);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fb36 	bl	800277a <USB_OTG_ReadDevOutEP_itr>
 800310e:	4603      	mov	r3, r0
 8003110:	60fb      	str	r3, [r7, #12]
      
      /* Transfer complete */
      if ( doepint.b.xfercompl )
 8003112:	7b3b      	ldrb	r3, [r7, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d048      	beq.n	80031b0 <DCD_HandleOutEP_ISR+0xd4>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, xfercompl);
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	7b3b      	ldrb	r3, [r7, #12]
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	733b      	strb	r3, [r7, #12]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	3314      	adds	r3, #20
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	609a      	str	r2, [r3, #8]
        if (pdev->cfg.dma_enable == 1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	78db      	ldrb	r3, [r3, #3]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11f      	bne.n	8003182 <DCD_HandleOutEP_ISR+0xa6>
        {
          deptsiz.d32 = USB_OTG_READ_REG32(&(pdev->regs.OUTEP_REGS[epnum]->DOEPTSIZ));
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3314      	adds	r3, #20
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	60bb      	str	r3, [r7, #8]
          /*ToDo : handle more than one single MPS size packet */
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8003164:	681b      	ldr	r3, [r3, #0]
            deptsiz.b.xfersize;
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	f3c2 0212 	ubfx	r2, r2, #0, #19
          pdev->dev.out_ep[epnum].xfer_count = pdev->dev.out_ep[epnum].maxpacket - \
 800316c:	1a99      	subs	r1, r3, r2
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4403      	add	r3, r0
 800317c:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 8003180:	6019      	str	r1, [r3, #0]
        }
        /* Inform upper layer: data ready */
        /* RX COMPLETE */
        USBD_DCD_INT_fops->DataOutStage(pdev , epnum);
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <DCD_HandleOutEP_ISR+0x14c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	4611      	mov	r1, r2
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
        
        if (pdev->cfg.dma_enable == 1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	78db      	ldrb	r3, [r3, #3]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10a      	bne.n	80031b0 <DCD_HandleOutEP_ISR+0xd4>
        {
          if((epnum == 0) && (pdev->dev.device_state == USB_OTG_EP0_STATUS_OUT))
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <DCD_HandleOutEP_ISR+0xd4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d102      	bne.n	80031b0 <DCD_HandleOutEP_ISR+0xd4>
          {
            /* prepare to rx more setup packets */
            USB_OTG_EP0_OutStart(pdev);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fb16 	bl	80027dc <USB_OTG_EP0_OutStart>
          }
        }        
      }
      /* Endpoint disable  */
      if ( doepint.b.epdisabled )
 80031b0:	7b3b      	ldrb	r3, [r7, #12]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <DCD_HandleOutEP_ISR+0xfc>
      {
        /* Clear the bit in DOEPINTn for this interrupt */
        CLEAR_OUT_EP_INTR(epnum, epdisabled);
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	7b3b      	ldrb	r3, [r7, #12]
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	733b      	strb	r3, [r7, #12]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3314      	adds	r3, #20
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]
      }
      /* Setup Phase Done (control EPs) */
      if ( doepint.b.setup )
 80031d8:	7b3b      	ldrb	r3, [r7, #12]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <DCD_HandleOutEP_ISR+0x12e>
      {
        
        /* inform the upper layer that a setup packet is available */
        /* SETUP COMPLETE */
        USBD_DCD_INT_fops->SetupStage(pdev);
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <DCD_HandleOutEP_ISR+0x14c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
        CLEAR_OUT_EP_INTR(epnum, setup);
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	7b3b      	ldrb	r3, [r7, #12]
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	733b      	strb	r3, [r7, #12]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	3314      	adds	r3, #20
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	609a      	str	r2, [r3, #8]
      }
    }
    epnum++;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	3301      	adds	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
    ep_intr >>= 1;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	617b      	str	r3, [r7, #20]
  while ( ep_intr )
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f47f af6c 	bne.w	80030f6 <DCD_HandleOutEP_ISR+0x1a>
  }
  return 1;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200000cc 	.word	0x200000cc

0800322c <DCD_HandleSof_ISR>:
*         Handles the SOF Interrupts
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleSof_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  GINTSTS;
  
  
  USBD_DCD_INT_fops->SOF(pdev);
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <DCD_HandleSof_ISR+0x30>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
  
  /* Clear interrupt */
  GINTSTS.d32 = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
  GINTSTS.b.sofintr = 1;
 8003242:	7b3b      	ldrb	r3, [r7, #12]
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	733b      	strb	r3, [r7, #12]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, GINTSTS.d32);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	615a      	str	r2, [r3, #20]
  
  return 1;
 8003252:	2301      	movs	r3, #1
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200000cc 	.word	0x200000cc

08003260 <DCD_HandleRxStatusQueueLevel_ISR>:
*         Handles the Rx Status Queue Level Interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleRxStatusQueueLevel_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTMSK_TypeDef  int_mask;
  USB_OTG_DRXSTS_TypeDef   status;
  USB_OTG_EP *ep;
  
  /* Disable the Rx Status Queue Level interrupt */
  int_mask.d32 = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
  int_mask.b.rxstsqlvl = 1;
 800326c:	7c3b      	ldrb	r3, [r7, #16]
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, int_mask.d32, 0);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68d2      	ldr	r2, [r2, #12]
 800327c:	6991      	ldr	r1, [r2, #24]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	43d2      	mvns	r2, r2
 8003282:	400a      	ands	r2, r1
 8003284:	619a      	str	r2, [r3, #24]
  
  /* Get the Status from the top of the FIFO */
  status.d32 = USB_OTG_READ_REG32( &pdev->regs.GREGS->GRXSTSP );
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	60fb      	str	r3, [r7, #12]
  
  ep = &pdev->dev.out_ep[status.b.epnum];
 800328e:	7b3b      	ldrb	r3, [r7, #12]
 8003290:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	617b      	str	r3, [r7, #20]
  
  switch (status.b.pktsts)
 80032ac:	7bbb      	ldrb	r3, [r7, #14]
 80032ae:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d844      	bhi.n	8003344 <DCD_HandleRxStatusQueueLevel_ISR+0xe4>
 80032ba:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <DCD_HandleRxStatusQueueLevel_ISR+0x60>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	08003345 	.word	0x08003345
 80032c4:	080032d9 	.word	0x080032d9
 80032c8:	08003345 	.word	0x08003345
 80032cc:	08003345 	.word	0x08003345
 80032d0:	08003345 	.word	0x08003345
 80032d4:	08003321 	.word	0x08003321
  {
  case STS_GOUT_NAK:
    break;
  case STS_DATA_UPDT:
    if (status.b.bcnt)
 80032d8:	89ba      	ldrh	r2, [r7, #12]
 80032da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032de:	4013      	ands	r3, r2
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d030      	beq.n	8003348 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    {
      USB_OTG_ReadPacket(pdev,ep->xfer_buff, status.b.bcnt);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	68d9      	ldr	r1, [r3, #12]
 80032ea:	89bb      	ldrh	r3, [r7, #12]
 80032ec:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fe fa4c 	bl	8001792 <USB_OTG_ReadPacket>
      ep->xfer_buff += status.b.bcnt;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	89ba      	ldrh	r2, [r7, #12]
 8003300:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8003304:	b292      	uxth	r2, r2
 8003306:	441a      	add	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	60da      	str	r2, [r3, #12]
      ep->xfer_count += status.b.bcnt;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	89ba      	ldrh	r2, [r7, #12]
 8003312:	f3c2 120a 	ubfx	r2, r2, #4, #11
 8003316:	b292      	uxth	r2, r2
 8003318:	441a      	add	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	619a      	str	r2, [r3, #24]
    }
    break;
 800331e:	e013      	b.n	8003348 <DCD_HandleRxStatusQueueLevel_ISR+0xe8>
    break;
  case STS_SETUP_COMP:
    break;
  case STS_SETUP_UPDT:
    /* Copy the setup packet received in FIFO into the setup buffer in RAM */
    USB_OTG_ReadPacket(pdev , pdev->dev.setup_packet, 8);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 8003326:	2208      	movs	r2, #8
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fa31 	bl	8001792 <USB_OTG_ReadPacket>
    ep->xfer_count += status.b.bcnt;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	89ba      	ldrh	r2, [r7, #12]
 8003336:	f3c2 120a 	ubfx	r2, r2, #4, #11
 800333a:	b292      	uxth	r2, r2
 800333c:	441a      	add	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	619a      	str	r2, [r3, #24]
    break;
 8003342:	e002      	b.n	800334a <DCD_HandleRxStatusQueueLevel_ISR+0xea>
  default:
    break;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <DCD_HandleRxStatusQueueLevel_ISR+0xea>
    break;
 8003348:	bf00      	nop
  }
  
  /* Enable the Rx Status Queue Level interrupt */
  USB_OTG_MODIFY_REG32( &pdev->regs.GREGS->GINTMSK, 0, int_mask.d32);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	6991      	ldr	r1, [r2, #24]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	430a      	orrs	r2, r1
 8003358:	619a      	str	r2, [r3, #24]
  
  return 1;
 800335a:	2301      	movs	r3, #1
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <DCD_WriteEmptyTxFifo>:
*         check FIFO for the next packet to be loaded
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_WriteEmptyTxFifo(USB_OTG_CORE_HANDLE *pdev, uint32_t epnum)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  USB_OTG_DTXFSTSn_TypeDef  txstatus;
  USB_OTG_EP *ep;
  uint32_t len = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  uint32_t len32b;
  txstatus.d32 = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  
  ep = &pdev->dev.in_ep[epnum];    
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	3304      	adds	r3, #4
 800338a:	60fb      	str	r3, [r7, #12]
  
  len = ep->xfer_len - ep->xfer_count;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	617b      	str	r3, [r7, #20]
  
  if (len > ep->maxpacket)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d202      	bcs.n	80033a8 <DCD_WriteEmptyTxFifo+0x44>
  {
    len = ep->maxpacket;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	617b      	str	r3, [r7, #20]
  }
  
  len32b = (len + 3) / 4;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3303      	adds	r3, #3
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	613b      	str	r3, [r7, #16]
  txstatus.d32 = USB_OTG_READ_REG32( &pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3304      	adds	r3, #4
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	60bb      	str	r3, [r7, #8]
  
  
  
  while  (txstatus.b.txfspcavail > len32b &&
 80033c0:	e02e      	b.n	8003420 <DCD_WriteEmptyTxFifo+0xbc>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    
    if (len > ep->maxpacket)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d202      	bcs.n	80033de <DCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	617b      	str	r3, [r7, #20]
    }
    len32b = (len + 3) / 4;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3303      	adds	r3, #3
 80033e2:	089b      	lsrs	r3, r3, #2
 80033e4:	613b      	str	r3, [r7, #16]
    
    USB_OTG_WritePacket (pdev , ep->xfer_buff, epnum, len);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	68d9      	ldr	r1, [r3, #12]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe f992 	bl	800171c <USB_OTG_WritePacket>
    
    ep->xfer_buff  += len;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	441a      	add	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	619a      	str	r2, [r3, #24]
    
    txstatus.d32 = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DTXFSTS);
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	3304      	adds	r3, #4
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	60bb      	str	r3, [r7, #8]
  while  (txstatus.b.txfspcavail > len32b &&
 8003420:	893b      	ldrh	r3, [r7, #8]
 8003422:	461a      	mov	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	429a      	cmp	r2, r3
 8003428:	d909      	bls.n	800343e <DCD_WriteEmptyTxFifo+0xda>
          ep->xfer_count < ep->xfer_len &&
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	695b      	ldr	r3, [r3, #20]
  while  (txstatus.b.txfspcavail > len32b &&
 8003432:	429a      	cmp	r2, r3
 8003434:	d203      	bcs.n	800343e <DCD_WriteEmptyTxFifo+0xda>
            ep->xfer_len != 0)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1c1      	bne.n	80033c2 <DCD_WriteEmptyTxFifo+0x5e>
  }
  
  return 1;
 800343e:	2301      	movs	r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <DCD_HandleUsbReset_ISR>:
*         This interrupt occurs when a USB Reset is detected
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleUsbReset_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  USB_OTG_DCFG_TypeDef     dcfg;
  USB_OTG_DCTL_TypeDef     dctl;
  USB_OTG_GINTSTS_TypeDef  gintsts;
  uint32_t i;
  
  dctl.d32 = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
  doepmsk.d32 = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
  diepmsk.d32 = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
  dcfg.d32 = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
  gintsts.d32 = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Remote Wake-up Signaling */
  dctl.b.rmtwkupsig = 1;
 8003468:	7c3b      	ldrb	r3, [r7, #16]
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	743b      	strb	r3, [r7, #16]
  USB_OTG_MODIFY_REG32(&pdev->regs.DREGS->DCTL, dctl.d32, 0 );
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6912      	ldr	r2, [r2, #16]
 8003478:	6851      	ldr	r1, [r2, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	43d2      	mvns	r2, r2
 800347e:	400a      	ands	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  
  /* Flush the Tx FIFO */
  USB_OTG_FlushTxFifo(pdev ,  0 );
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7fe fb3f 	bl	8001b08 <USB_OTG_FlushTxFifo>
  
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e012      	b.n	80034b6 <DCD_HandleUsbReset_ISR+0x6e>
  {
    USB_OTG_WRITE_REG32( &pdev->regs.INEP_REGS[i]->DIEPINT, 0xFF);
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	3304      	adds	r3, #4
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	22ff      	movs	r2, #255	; 0xff
 800349e:	609a      	str	r2, [r3, #8]
    USB_OTG_WRITE_REG32( &pdev->regs.OUTEP_REGS[i]->DOEPINT, 0xFF);
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	3314      	adds	r3, #20
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	22ff      	movs	r2, #255	; 0xff
 80034ae:	609a      	str	r2, [r3, #8]
  for (i = 0; i < pdev->cfg.dev_endpoints ; i++)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3301      	adds	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	461a      	mov	r2, r3
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	429a      	cmp	r2, r3
 80034c0:	d8e6      	bhi.n	8003490 <DCD_HandleUsbReset_ISR+0x48>
  }
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINT, 0xFFFFFFFF );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ca:	619a      	str	r2, [r3, #24]
  
  daintmsk.ep.in = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	843b      	strh	r3, [r7, #32]
  daintmsk.ep.out = 1;
 80034d0:	2301      	movs	r3, #1
 80034d2:	847b      	strh	r3, [r7, #34]	; 0x22
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DAINTMSK, daintmsk.d32 );
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	61da      	str	r2, [r3, #28]
  
  doepmsk.b.setup = 1;
 80034dc:	7f3b      	ldrb	r3, [r7, #28]
 80034de:	f043 0308 	orr.w	r3, r3, #8
 80034e2:	773b      	strb	r3, [r7, #28]
  doepmsk.b.xfercompl = 1;
 80034e4:	7f3b      	ldrb	r3, [r7, #28]
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	773b      	strb	r3, [r7, #28]
  doepmsk.b.epdisabled = 1;
 80034ec:	7f3b      	ldrb	r3, [r7, #28]
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	773b      	strb	r3, [r7, #28]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOEPMSK, doepmsk.d32 );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	615a      	str	r2, [r3, #20]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED   
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DOUTEP1MSK, doepmsk.d32 );
#endif
  diepmsk.b.xfercompl = 1;
 80034fc:	7e3b      	ldrb	r3, [r7, #24]
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	763b      	strb	r3, [r7, #24]
  diepmsk.b.timeout = 1;
 8003504:	7e3b      	ldrb	r3, [r7, #24]
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	763b      	strb	r3, [r7, #24]
  diepmsk.b.epdisabled = 1;
 800350c:	7e3b      	ldrb	r3, [r7, #24]
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	763b      	strb	r3, [r7, #24]

  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DIEPMSK, diepmsk.d32 );
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	611a      	str	r2, [r3, #16]
#ifdef USB_OTG_HS_DEDICATED_EP1_ENABLED  
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DINEP1MSK, diepmsk.d32 );
#endif
  /* Reset Device Address */
  dcfg.d32 = USB_OTG_READ_REG32( &pdev->regs.DREGS->DCFG);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]
  dcfg.b.devaddr = 0;
 8003524:	8abb      	ldrh	r3, [r7, #20]
 8003526:	f36f 130a 	bfc	r3, #4, #7
 800352a:	82bb      	strh	r3, [r7, #20]
  USB_OTG_WRITE_REG32( &pdev->regs.DREGS->DCFG, dcfg.d32);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	601a      	str	r2, [r3, #0]
  
  
  /* setup EP0 to receive SETUP packets */
  USB_OTG_EP0_OutStart(pdev);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff f951 	bl	80027dc <USB_OTG_EP0_OutStart>
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  gintsts.b.usbreset = 1;
 800353e:	7b7b      	ldrb	r3, [r7, #13]
 8003540:	f043 0310 	orr.w	r3, r3, #16
 8003544:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32 (&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	615a      	str	r2, [r3, #20]
  
  /*Reset internal state machine */
  USBD_DCD_INT_fops->Reset(pdev);
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <DCD_HandleUsbReset_ISR+0x11c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
  return 1;
 8003558:	2301      	movs	r3, #1
}
 800355a:	4618      	mov	r0, r3
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200000cc 	.word	0x200000cc

08003568 <DCD_HandleEnumDone_ISR>:
*         Read the device status register and set the device speed
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_HandleEnumDone_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef  gintsts;
  USB_OTG_GUSBCFG_TypeDef  gusbcfg;
  
  USB_OTG_EP0Activate(pdev);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fe fd56 	bl	8002022 <USB_OTG_EP0Activate>
  
  /* Set USB turn-around time based on device speed and PHY interface. */
  gusbcfg.d32 = USB_OTG_READ_REG32(&pdev->regs.GREGS->GUSBCFG);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  
  /* Full or High speed */
  if ( USB_OTG_GetDeviceSpeed(pdev) == USB_SPEED_HIGH)
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe fd2b 	bl	8001fda <USB_OTG_GetDeviceSpeed>
 8003584:	4603      	mov	r3, r0
 8003586:	2b03      	cmp	r3, #3
 8003588:	d10c      	bne.n	80035a4 <DCD_HandleEnumDone_ISR+0x3c>
  {
    pdev->cfg.speed            = USB_OTG_SPEED_HIGH;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003596:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 9;
 8003598:	7a7b      	ldrb	r3, [r7, #9]
 800359a:	2209      	movs	r2, #9
 800359c:	f362 0385 	bfi	r3, r2, #2, #4
 80035a0:	727b      	strb	r3, [r7, #9]
 80035a2:	e00a      	b.n	80035ba <DCD_HandleEnumDone_ISR+0x52>
  }
  else
  {
    pdev->cfg.speed            = USB_OTG_SPEED_FULL;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	709a      	strb	r2, [r3, #2]
    pdev->cfg.mps              = USB_OTG_FS_MAX_PACKET_SIZE ;  
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2240      	movs	r2, #64	; 0x40
 80035ae:	809a      	strh	r2, [r3, #4]
    gusbcfg.b.usbtrdtim = 5;
 80035b0:	7a7b      	ldrb	r3, [r7, #9]
 80035b2:	2205      	movs	r2, #5
 80035b4:	f362 0385 	bfi	r3, r2, #2, #4
 80035b8:	727b      	strb	r3, [r7, #9]
  }
  
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GUSBCFG, gusbcfg.d32);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	60da      	str	r2, [r3, #12]
  
  /* Clear interrupt */
  gintsts.d32 = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
  gintsts.b.enumdone = 1;
 80035c6:	7b7b      	ldrb	r3, [r7, #13]
 80035c8:	f043 0320 	orr.w	r3, r3, #32
 80035cc:	737b      	strb	r3, [r7, #13]
  USB_OTG_WRITE_REG32( &pdev->regs.GREGS->GINTSTS, gintsts.d32 );
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	615a      	str	r2, [r3, #20]
  return 1;
 80035d6:	2301      	movs	r3, #1
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <DCD_IsoINIncomplete_ISR>:
*         handle the ISO IN incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoINIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoINIncomplete (pdev); 
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <DCD_IsoINIncomplete_ISR+0x30>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoin = 1;
 80035f6:	7bbb      	ldrb	r3, [r7, #14]
 80035f8:	f043 0310 	orr.w	r3, r3, #16
 80035fc:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	615a      	str	r2, [r3, #20]
  
  return 1;
 8003606:	2301      	movs	r3, #1
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200000cc 	.word	0x200000cc

08003614 <DCD_IsoOUTIncomplete_ISR>:
*         handle the ISO OUT incomplete interrupt
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_IsoOUTIncomplete_ISR(USB_OTG_CORE_HANDLE *pdev)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  USB_OTG_GINTSTS_TypeDef gintsts;  
  
  gintsts.d32 = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	60fb      	str	r3, [r7, #12]

  USBD_DCD_INT_fops->IsoOUTIncomplete (pdev); 
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <DCD_IsoOUTIncomplete_ISR+0x30>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
  
  /* Clear interrupt */
  gintsts.b.incomplisoout = 1;
 800362a:	7bbb      	ldrb	r3, [r7, #14]
 800362c:	f043 0320 	orr.w	r3, r3, #32
 8003630:	73bb      	strb	r3, [r7, #14]
  USB_OTG_WRITE_REG32(&pdev->regs.GREGS->GINTSTS, gintsts.d32);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	615a      	str	r2, [r3, #20]
  return 1;
 800363a:	2301      	movs	r3, #1
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200000cc 	.word	0x200000cc

08003648 <DCD_ReadDevInEP>:
*         Reads ep flags
* @param  pdev: device instance
* @retval status
*/
static uint32_t DCD_ReadDevInEP (USB_OTG_CORE_HANDLE *pdev, uint8_t epnum)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  msk = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPMSK);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	617b      	str	r3, [r7, #20]
  emp = USB_OTG_READ_REG32(&pdev->regs.DREGS->DIEPEMPMSK);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	01db      	lsls	r3, r3, #7
 800366e:	b2db      	uxtb	r3, r3
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
  v = USB_OTG_READ_REG32(&pdev->regs.INEP_REGS[epnum]->DIEPINT) & msk;
 8003676:	78fb      	ldrb	r3, [r7, #3]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4013      	ands	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  return v;
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	4618      	mov	r0, r3
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <usbd_cdc_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_Init (void  *pdev, 
                               uint8_t cfgidx)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
  uint8_t *pbuf;

  /* Open EP IN */
  DCD_EP_Open(pdev,
 80036a4:	2302      	movs	r3, #2
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	2181      	movs	r1, #129	; 0x81
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff f952 	bl	8002954 <DCD_EP_Open>
              CDC_IN_EP,
              CDC_DATA_IN_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open EP OUT */
  DCD_EP_Open(pdev,
 80036b0:	2302      	movs	r3, #2
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	2101      	movs	r1, #1
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff f94c 	bl	8002954 <DCD_EP_Open>
              CDC_OUT_EP,
              CDC_DATA_OUT_PACKET_SIZE,
              USB_OTG_EP_BULK);
  
  /* Open Command IN EP */
  DCD_EP_Open(pdev,
 80036bc:	2303      	movs	r3, #3
 80036be:	2208      	movs	r2, #8
 80036c0:	2182      	movs	r1, #130	; 0x82
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff f946 	bl	8002954 <DCD_EP_Open>
              CDC_CMD_EP,
              CDC_CMD_PACKET_SZE,
              USB_OTG_EP_INT);
  
  pbuf = (uint8_t *)USBD_DeviceDesc;
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <usbd_cdc_Init+0x60>)
 80036ca:	60fb      	str	r3, [r7, #12]
  pbuf[4] = DEVICE_CLASS_CDC;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3304      	adds	r3, #4
 80036d0:	2202      	movs	r2, #2
 80036d2:	701a      	strb	r2, [r3, #0]
  pbuf[5] = DEVICE_SUBCLASS_CDC;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3305      	adds	r3, #5
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  
  /* Initialize the Interface physical components */
  APP_FOPS.pIf_Init();
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <usbd_cdc_Init+0x64>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4798      	blx	r3

  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 80036e2:	2340      	movs	r3, #64	; 0x40
 80036e4:	4a06      	ldr	r2, [pc, #24]	; (8003700 <usbd_cdc_Init+0x68>)
 80036e6:	2101      	movs	r1, #1
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff f9c7 	bl	8002a7c <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);
  
  return USBD_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200000ec 	.word	0x200000ec
 80036fc:	2000008c 	.word	0x2000008c
 8003700:	200001d0 	.word	0x200001d0

08003704 <usbd_cdc_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  usbd_cdc_DeInit (void  *pdev, 
                                 uint8_t cfgidx)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  DCD_EP_Close(pdev,
 8003710:	2181      	movs	r1, #129	; 0x81
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff f976 	bl	8002a04 <DCD_EP_Close>
              CDC_IN_EP);
  
  /* Open EP OUT */
  DCD_EP_Close(pdev,
 8003718:	2101      	movs	r1, #1
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff f972 	bl	8002a04 <DCD_EP_Close>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  DCD_EP_Close(pdev,
 8003720:	2182      	movs	r1, #130	; 0x82
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff f96e 	bl	8002a04 <DCD_EP_Close>
              CDC_CMD_EP);

  /* Restore default state of the Interface physical components */
  APP_FOPS.pIf_DeInit();
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <usbd_cdc_DeInit+0x34>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4798      	blx	r3
  
  return USBD_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	2000008c 	.word	0x2000008c

0800373c <usbd_cdc_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  usbd_cdc_Setup (void  *pdev, 
                                USB_SETUP_REQ *req)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_CDC_DESC_SIZ;
 8003746:	233a      	movs	r3, #58	; 0x3a
 8003748:	81fb      	strh	r3, [r7, #14]
  uint8_t  *pbuf=usbd_cdc_CfgDesc + 9;
 800374a:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <usbd_cdc_Setup+0x10c>)
 800374c:	60bb      	str	r3, [r7, #8]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003756:	2b00      	cmp	r3, #0
 8003758:	d03d      	beq.n	80037d6 <usbd_cdc_Setup+0x9a>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d135      	bne.n	80037ca <usbd_cdc_Setup+0x8e>
  {
    /* CDC Class Requests -------------------------------*/
  case USB_REQ_TYPE_CLASS :
      /* Check if the request is a data setup packet */
      if (req->wLength)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	88db      	ldrh	r3, [r3, #6]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d027      	beq.n	80037b6 <usbd_cdc_Setup+0x7a>
      {
        /* Check if the request is Device-to-Host */
        if (req->bmRequest & 0x80)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	b25b      	sxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	da10      	bge.n	8003792 <usbd_cdc_Setup+0x56>
        {
          /* Get the data to be sent to Host from interface layer */
          APP_FOPS.pIf_Ctrl(req->bRequest, CmdBuff, req->wLength);
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <usbd_cdc_Setup+0x110>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	7852      	ldrb	r2, [r2, #1]
 8003778:	4610      	mov	r0, r2
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	88d2      	ldrh	r2, [r2, #6]
 800377e:	4934      	ldr	r1, [pc, #208]	; (8003850 <usbd_cdc_Setup+0x114>)
 8003780:	4798      	blx	r3
          
          /* Send the data to the host */
          USBD_CtlSendData (pdev, 
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	88db      	ldrh	r3, [r3, #6]
 8003786:	461a      	mov	r2, r3
 8003788:	4931      	ldr	r1, [pc, #196]	; (8003850 <usbd_cdc_Setup+0x114>)
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fd44 	bl	8004218 <USBD_CtlSendData>
 8003790:	e019      	b.n	80037c6 <usbd_cdc_Setup+0x8a>
                            req->wLength);          
        }
        else /* Host-to-Device requeset */
        {
          /* Set the value of the current command to be processed */
          cdcCmd = req->bRequest;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	785b      	ldrb	r3, [r3, #1]
 8003796:	461a      	mov	r2, r3
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <usbd_cdc_Setup+0x118>)
 800379a:	601a      	str	r2, [r3, #0]
          cdcLen = req->wLength;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	88db      	ldrh	r3, [r3, #6]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <usbd_cdc_Setup+0x11c>)
 80037a4:	601a      	str	r2, [r3, #0]
          
          /* Prepare the reception of the buffer over EP0
          Next step: the received data will be managed in usbd_cdc_EP0_TxSent() 
          function. */
          USBD_CtlPrepareRx (pdev,
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	88db      	ldrh	r3, [r3, #6]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4928      	ldr	r1, [pc, #160]	; (8003850 <usbd_cdc_Setup+0x114>)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fd66 	bl	8004280 <USBD_CtlPrepareRx>
 80037b4:	e007      	b.n	80037c6 <usbd_cdc_Setup+0x8a>
        }
      }
      else /* No Data request */
      {
        /* Transfer the command to the interface layer */
        APP_FOPS.pIf_Ctrl(req->bRequest, NULL, 0);
 80037b6:	4b25      	ldr	r3, [pc, #148]	; (800384c <usbd_cdc_Setup+0x110>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	7852      	ldrb	r2, [r2, #1]
 80037be:	4610      	mov	r0, r2
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	4798      	blx	r3
      }
      
      return USBD_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e03a      	b.n	8003840 <usbd_cdc_Setup+0x104>
      
    default:
      USBD_CtlError (pdev, req);
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f001 f9da 	bl	8004b86 <USBD_CtlError>
      return USBD_FAIL;
 80037d2:	2302      	movs	r3, #2
 80037d4:	e034      	b.n	8003840 <usbd_cdc_Setup+0x104>
    
      
      
    /* Standard Requests -------------------------------*/
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b0a      	cmp	r3, #10
 80037dc:	d018      	beq.n	8003810 <usbd_cdc_Setup+0xd4>
 80037de:	2b0b      	cmp	r3, #11
 80037e0:	d01c      	beq.n	800381c <usbd_cdc_Setup+0xe0>
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d12b      	bne.n	800383e <usbd_cdc_Setup+0x102>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( (req->wValue >> 8) == CDC_DESCRIPTOR_TYPE)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	885b      	ldrh	r3, [r3, #2]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b21      	cmp	r3, #33	; 0x21
 80037f0:	d107      	bne.n	8003802 <usbd_cdc_Setup+0xc6>
      {
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
        pbuf = usbd_cdc_Desc;   
#else
        pbuf = usbd_cdc_CfgDesc + 9 + (9 * USBD_ITF_MAX_NUM);
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <usbd_cdc_Setup+0x120>)
 80037f4:	60bb      	str	r3, [r7, #8]
#endif 
        len = MIN(USB_CDC_DESC_SIZ , req->wLength);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	88db      	ldrh	r3, [r3, #6]
 80037fa:	2b3a      	cmp	r3, #58	; 0x3a
 80037fc:	bf28      	it	cs
 80037fe:	233a      	movcs	r3, #58	; 0x3a
 8003800:	81fb      	strh	r3, [r7, #14]
      }
      
      USBD_CtlSendData (pdev, 
 8003802:	89fb      	ldrh	r3, [r7, #14]
 8003804:	461a      	mov	r2, r3
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fd05 	bl	8004218 <USBD_CtlSendData>
                        pbuf,
                        len);
      break;
 800380e:	e016      	b.n	800383e <usbd_cdc_Setup+0x102>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8003810:	2201      	movs	r2, #1
 8003812:	4913      	ldr	r1, [pc, #76]	; (8003860 <usbd_cdc_Setup+0x124>)
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fcff 	bl	8004218 <USBD_CtlSendData>
                        (uint8_t *)&usbd_cdc_AltSet,
                        1);
      break;
 800381a:	e010      	b.n	800383e <usbd_cdc_Setup+0x102>
      
    case USB_REQ_SET_INTERFACE :
      if ((uint8_t)(req->wValue) < USBD_ITF_MAX_NUM)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	885b      	ldrh	r3, [r3, #2]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <usbd_cdc_Setup+0xf8>
      {
        usbd_cdc_AltSet = (uint8_t)(req->wValue);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <usbd_cdc_Setup+0x124>)
 8003830:	601a      	str	r2, [r3, #0]
      else
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError (pdev, req);
      }
      break;
 8003832:	e003      	b.n	800383c <usbd_cdc_Setup+0x100>
        USBD_CtlError (pdev, req);
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f001 f9a5 	bl	8004b86 <USBD_CtlError>
      break;
 800383c:	bf00      	nop
    }
  }
  return USBD_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000019 	.word	0x20000019
 800384c:	2000008c 	.word	0x2000008c
 8003850:	20000210 	.word	0x20000210
 8003854:	20000054 	.word	0x20000054
 8003858:	20000164 	.word	0x20000164
 800385c:	20000022 	.word	0x20000022
 8003860:	20000150 	.word	0x20000150

08003864 <usbd_cdc_EP0_RxReady>:
  *         Data received on control endpoint
  * @param  pdev: device device instance
  * @retval status
  */
static uint8_t  usbd_cdc_EP0_RxReady (void  *pdev)
{ 
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (cdcCmd != NO_CMD)
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <usbd_cdc_EP0_RxReady+0x30>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2bff      	cmp	r3, #255	; 0xff
 8003872:	d00a      	beq.n	800388a <usbd_cdc_EP0_RxReady+0x26>
  {
    /* Process the data */
    APP_FOPS.pIf_Ctrl(cdcCmd, CmdBuff, cdcLen);
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <usbd_cdc_EP0_RxReady+0x34>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a06      	ldr	r2, [pc, #24]	; (8003894 <usbd_cdc_EP0_RxReady+0x30>)
 800387a:	6810      	ldr	r0, [r2, #0]
 800387c:	4a07      	ldr	r2, [pc, #28]	; (800389c <usbd_cdc_EP0_RxReady+0x38>)
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <usbd_cdc_EP0_RxReady+0x3c>)
 8003882:	4798      	blx	r3
    
    /* Reset the command variable to default value */
    cdcCmd = NO_CMD;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <usbd_cdc_EP0_RxReady+0x30>)
 8003886:	22ff      	movs	r2, #255	; 0xff
 8003888:	601a      	str	r2, [r3, #0]
  }
  
  return USBD_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000054 	.word	0x20000054
 8003898:	2000008c 	.word	0x2000008c
 800389c:	20000164 	.word	0x20000164
 80038a0:	20000210 	.word	0x20000210

080038a4 <usbd_cdc_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataIn (void *pdev, uint8_t epnum)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State == 1)
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <usbd_cdc_DataIn+0x88>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d133      	bne.n	8003920 <usbd_cdc_DataIn+0x7c>
  {
    if (APP_Rx_length == 0) 
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <usbd_cdc_DataIn+0x8c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d103      	bne.n	80038c8 <usbd_cdc_DataIn+0x24>
    {
      USB_Tx_State = 0;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <usbd_cdc_DataIn+0x88>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e02b      	b.n	8003920 <usbd_cdc_DataIn+0x7c>
    }
    else 
    {
      if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE){
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <usbd_cdc_DataIn+0x8c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d90f      	bls.n	80038f0 <usbd_cdc_DataIn+0x4c>
        USB_Tx_ptr = APP_Rx_ptr_out;
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <usbd_cdc_DataIn+0x90>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;
 80038da:	4b16      	ldr	r3, [pc, #88]	; (8003934 <usbd_cdc_DataIn+0x90>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3340      	adds	r3, #64	; 0x40
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <usbd_cdc_DataIn+0x90>)
 80038e2:	6013      	str	r3, [r2, #0]
        APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;    
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <usbd_cdc_DataIn+0x8c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3b40      	subs	r3, #64	; 0x40
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <usbd_cdc_DataIn+0x8c>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00f      	b.n	8003910 <usbd_cdc_DataIn+0x6c>
      }
      else 
      {
        USB_Tx_ptr = APP_Rx_ptr_out;
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <usbd_cdc_DataIn+0x90>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	81fb      	strh	r3, [r7, #14]
        USB_Tx_length = APP_Rx_length;
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <usbd_cdc_DataIn+0x8c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	81bb      	strh	r3, [r7, #12]
        
        APP_Rx_ptr_out += APP_Rx_length;
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <usbd_cdc_DataIn+0x90>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <usbd_cdc_DataIn+0x8c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4413      	add	r3, r2
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <usbd_cdc_DataIn+0x90>)
 8003908:	6013      	str	r3, [r2, #0]
        APP_Rx_length = 0;
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <usbd_cdc_DataIn+0x8c>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
      }
      
      /* Prepare the available data buffer to be sent on IN endpoint */
      DCD_EP_Tx (pdev,
                 CDC_IN_EP,
                 (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 8003910:	89fb      	ldrh	r3, [r7, #14]
      DCD_EP_Tx (pdev,
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <usbd_cdc_DataIn+0x94>)
 8003914:	441a      	add	r2, r3
 8003916:	89bb      	ldrh	r3, [r7, #12]
 8003918:	2181      	movs	r1, #129	; 0x81
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff f8f0 	bl	8002b00 <DCD_EP_Tx>
                 USB_Tx_length);
    }
  }  
  
  return USBD_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000160 	.word	0x20000160
 8003930:	2000015c 	.word	0x2000015c
 8003934:	20000158 	.word	0x20000158
 8003938:	20000218 	.word	0x20000218

0800393c <usbd_cdc_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_DataOut (void *pdev, uint8_t epnum)
{      
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = ((USB_OTG_CORE_HANDLE*)pdev)->dev.out_ep[epnum].xfer_count;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	81fb      	strh	r3, [r7, #14]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
     NAKed till the end of the application Xfer */
  APP_FOPS.pIf_DataRx(USB_Rx_Buffer, USB_Rx_Cnt);
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <usbd_cdc_DataOut+0x44>)
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	89fa      	ldrh	r2, [r7, #14]
 8003964:	4611      	mov	r1, r2
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <usbd_cdc_DataOut+0x48>)
 8003968:	4798      	blx	r3
  
  /* Prepare Out endpoint to receive next packet */
  DCD_EP_PrepareRx(pdev,
 800396a:	2340      	movs	r3, #64	; 0x40
 800396c:	4a05      	ldr	r2, [pc, #20]	; (8003984 <usbd_cdc_DataOut+0x48>)
 800396e:	2101      	movs	r1, #1
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff f883 	bl	8002a7c <DCD_EP_PrepareRx>
                   CDC_OUT_EP,
                   (uint8_t*)(USB_Rx_Buffer),
                   CDC_DATA_OUT_PACKET_SIZE);

  return USBD_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000008c 	.word	0x2000008c
 8003984:	200001d0 	.word	0x200001d0

08003988 <usbd_cdc_SOF>:
  * @param  pdev: instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  usbd_cdc_SOF (void *pdev)
{      
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  static uint32_t FrameCount = 0;
  
  if (FrameCount++ == CDC_IN_FRAME_INTERVAL)
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <usbd_cdc_SOF+0x2c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	4907      	ldr	r1, [pc, #28]	; (80039b4 <usbd_cdc_SOF+0x2c>)
 8003998:	600a      	str	r2, [r1, #0]
 800399a:	2b05      	cmp	r3, #5
 800399c:	d105      	bne.n	80039aa <usbd_cdc_SOF+0x22>
  {
    /* Reset the frame counter */
    FrameCount = 0;
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <usbd_cdc_SOF+0x2c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
    
    /* Check the data to be sent through IN pipe */
    Handle_USBAsynchXfer(pdev);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f807 	bl	80039b8 <Handle_USBAsynchXfer>
  }
  
  return USBD_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000168 	.word	0x20000168

080039b8 <Handle_USBAsynchXfer>:
  *         Send data to USB
  * @param  pdev: instance
  * @retval None
  */
static void Handle_USBAsynchXfer (void *pdev)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 80039c0:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <Handle_USBAsynchXfer+0xc0>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d054      	beq.n	8003a72 <Handle_USBAsynchXfer+0xba>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 80039c8:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d0:	d102      	bne.n	80039d8 <Handle_USBAsynchXfer+0x20>
    {
      APP_Rx_ptr_out = 0;
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
    }
    
    if(APP_Rx_ptr_out == APP_Rx_ptr_in) 
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <Handle_USBAsynchXfer+0xc8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d103      	bne.n	80039ec <Handle_USBAsynchXfer+0x34>
    {
      USB_Tx_State = 0; 
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <Handle_USBAsynchXfer+0xc0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
      return;
 80039ea:	e042      	b.n	8003a72 <Handle_USBAsynchXfer+0xba>
    }
    
    if(APP_Rx_ptr_out > APP_Rx_ptr_in) /* rollback */
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <Handle_USBAsynchXfer+0xc8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d906      	bls.n	8003a06 <Handle_USBAsynchXfer+0x4e>
    { 
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8003a00:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e006      	b.n	8003a14 <Handle_USBAsynchXfer+0x5c>
    
    }
    else 
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <Handle_USBAsynchXfer+0xc8>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a12:	6013      	str	r3, [r2, #0]
    }
#ifdef USB_OTG_HS_INTERNAL_DMA_ENABLED
     APP_Rx_length &= ~0x03;
#endif /* USB_OTG_HS_INTERNAL_DMA_ENABLED */
    
    if (APP_Rx_length > CDC_DATA_IN_PACKET_SIZE)
 8003a14:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d90f      	bls.n	8003a3c <Handle_USBAsynchXfer+0x84>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = CDC_DATA_IN_PACKET_SIZE;
 8003a22:	2340      	movs	r3, #64	; 0x40
 8003a24:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += CDC_DATA_IN_PACKET_SIZE;	
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3340      	adds	r3, #64	; 0x40
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 8003a2e:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= CDC_DATA_IN_PACKET_SIZE;
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3b40      	subs	r3, #64	; 0x40
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e00f      	b.n	8003a5c <Handle_USBAsynchXfer+0xa4>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	81fb      	strh	r3, [r7, #14]
      USB_Tx_length = APP_Rx_length;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	81bb      	strh	r3, [r7, #12]
      
      APP_Rx_ptr_out += APP_Rx_length;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4413      	add	r3, r2
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <Handle_USBAsynchXfer+0xc4>)
 8003a54:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <Handle_USBAsynchXfer+0xcc>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1; 
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <Handle_USBAsynchXfer+0xc0>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]

    DCD_EP_Tx (pdev,
               CDC_IN_EP,
               (uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],
 8003a62:	89fb      	ldrh	r3, [r7, #14]
    DCD_EP_Tx (pdev,
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <Handle_USBAsynchXfer+0xd0>)
 8003a66:	441a      	add	r2, r3
 8003a68:	89bb      	ldrh	r3, [r7, #12]
 8003a6a:	2181      	movs	r1, #129	; 0x81
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff f847 	bl	8002b00 <DCD_EP_Tx>
               USB_Tx_length);
  }  
  
}
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000160 	.word	0x20000160
 8003a7c:	20000158 	.word	0x20000158
 8003a80:	20000154 	.word	0x20000154
 8003a84:	2000015c 	.word	0x2000015c
 8003a88:	20000218 	.word	0x20000218

08003a8c <USBD_cdc_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_cdc_GetCfgDesc (uint8_t speed, uint16_t *length)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	71fb      	strb	r3, [r7, #7]
  *length = sizeof (usbd_cdc_CfgDesc);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2243      	movs	r2, #67	; 0x43
 8003a9c:	801a      	strh	r2, [r3, #0]
  return usbd_cdc_CfgDesc;
 8003a9e:	4b03      	ldr	r3, [pc, #12]	; (8003aac <USBD_cdc_GetCfgDesc+0x20>)
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	20000010 	.word	0x20000010

08003ab0 <VCP_Init>:
  * @brief  VCP_Init
  *         Initializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Init(void) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return USBD_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <VCP_DeInit>:
  * @brief  VCP_DeInit
  *         DeInitializes the Media on the STM32
  * @param  None
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_DeInit(void) {
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return USBD_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <VCP_Ctrl>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion (USBD_OK in all cases)
  */
static uint16_t VCP_Ctrl (uint32_t Cmd, uint8_t* Buf, uint32_t Len)
{ /*
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
	for (i = 0; i < Len; i++) {
		printf("0x%02X ", Buf[i]);
	}
	printf("\n");
	*/
  switch (Cmd)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b23      	cmp	r3, #35	; 0x23
 8003ae0:	f200 809b 	bhi.w	8003c1a <VCP_Ctrl+0x14a>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <VCP_Ctrl+0x1c>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003c1b 	.word	0x08003c1b
 8003af0:	08003c1b 	.word	0x08003c1b
 8003af4:	08003c1b 	.word	0x08003c1b
 8003af8:	08003c1b 	.word	0x08003c1b
 8003afc:	08003c1b 	.word	0x08003c1b
 8003b00:	08003c1b 	.word	0x08003c1b
 8003b04:	08003c1b 	.word	0x08003c1b
 8003b08:	08003c1b 	.word	0x08003c1b
 8003b0c:	08003c1b 	.word	0x08003c1b
 8003b10:	08003c1b 	.word	0x08003c1b
 8003b14:	08003c1b 	.word	0x08003c1b
 8003b18:	08003c1b 	.word	0x08003c1b
 8003b1c:	08003c1b 	.word	0x08003c1b
 8003b20:	08003c1b 	.word	0x08003c1b
 8003b24:	08003c1b 	.word	0x08003c1b
 8003b28:	08003c1b 	.word	0x08003c1b
 8003b2c:	08003c1b 	.word	0x08003c1b
 8003b30:	08003c1b 	.word	0x08003c1b
 8003b34:	08003c1b 	.word	0x08003c1b
 8003b38:	08003c1b 	.word	0x08003c1b
 8003b3c:	08003c1b 	.word	0x08003c1b
 8003b40:	08003c1b 	.word	0x08003c1b
 8003b44:	08003c1b 	.word	0x08003c1b
 8003b48:	08003c1b 	.word	0x08003c1b
 8003b4c:	08003c1b 	.word	0x08003c1b
 8003b50:	08003c1b 	.word	0x08003c1b
 8003b54:	08003c1b 	.word	0x08003c1b
 8003b58:	08003c1b 	.word	0x08003c1b
 8003b5c:	08003c1b 	.word	0x08003c1b
 8003b60:	08003c1b 	.word	0x08003c1b
 8003b64:	08003c1b 	.word	0x08003c1b
 8003b68:	08003c1b 	.word	0x08003c1b
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003bc7 	.word	0x08003bc7
 8003b74:	08003c1b 	.word	0x08003c1b
 8003b78:	08003c1b 	.word	0x08003c1b
  case CLEAR_COMM_FEATURE:
    /* Not  needed for this driver */
    break;

  case SET_LINE_CODING:
    linecoding.bitrate = (uint32_t)(Buf[0] | (Buf[1] << 8) | (Buf[2] << 16) | (Buf[3] << 24));
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3301      	adds	r3, #1
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3302      	adds	r3, #2
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3303      	adds	r3, #3
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003ba4:	601a      	str	r2, [r3, #0]
    linecoding.format = Buf[4];
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	791a      	ldrb	r2, [r3, #4]
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003bac:	711a      	strb	r2, [r3, #4]
    linecoding.paritytype = Buf[5];
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	795a      	ldrb	r2, [r3, #5]
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003bb4:	715a      	strb	r2, [r3, #5]
    linecoding.datatype = Buf[6];
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	799a      	ldrb	r2, [r3, #6]
 8003bba:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003bbc:	719a      	strb	r2, [r3, #6]
	linecoding.changed = 1;
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	71da      	strb	r2, [r3, #7]
  
    //VCP_COMConfig(OTHER_CONFIG);
    break;
 8003bc4:	e02a      	b.n	8003c1c <VCP_Ctrl+0x14c>

  case GET_LINE_CODING:
    Buf[0] = (uint8_t)(linecoding.bitrate);
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	701a      	strb	r2, [r3, #0]
    Buf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	0a12      	lsrs	r2, r2, #8
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]
    Buf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3302      	adds	r3, #2
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	0c12      	lsrs	r2, r2, #16
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
    Buf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3303      	adds	r3, #3
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	0e12      	lsrs	r2, r2, #24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]
    Buf[4] = linecoding.format;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4a0b      	ldr	r2, [pc, #44]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003c00:	7912      	ldrb	r2, [r2, #4]
 8003c02:	701a      	strb	r2, [r3, #0]
    Buf[5] = linecoding.paritytype;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3305      	adds	r3, #5
 8003c08:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003c0a:	7952      	ldrb	r2, [r2, #5]
 8003c0c:	701a      	strb	r2, [r3, #0]
    Buf[6] = linecoding.datatype; 
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3306      	adds	r3, #6
 8003c12:	4a06      	ldr	r2, [pc, #24]	; (8003c2c <VCP_Ctrl+0x15c>)
 8003c14:	7992      	ldrb	r2, [r2, #6]
 8003c16:	701a      	strb	r2, [r3, #0]
    break;
 8003c18:	e000      	b.n	8003c1c <VCP_Ctrl+0x14c>
  case SEND_BREAK:
    /* Not  needed for this driver */
    break;    
    
  default:
    break;
 8003c1a:	bf00      	nop
  }

  return USBD_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000084 	.word	0x20000084

08003c30 <VCP_DataTx>:
  *         this function.
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t VCP_DataTx (uint8_t* Buf, uint32_t Len) {
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	uint32_t tx_counter = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
	
	while (tx_counter < Len) {
 8003c3e:	e017      	b.n	8003c70 <VCP_DataTx+0x40>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(Buf+tx_counter);
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <VCP_DataTx+0x58>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	440a      	add	r2, r1
 8003c4a:	7811      	ldrb	r1, [r2, #0]
 8003c4c:	4a0f      	ldr	r2, [pc, #60]	; (8003c8c <VCP_DataTx+0x5c>)
 8003c4e:	54d1      	strb	r1, [r2, r3]
		
		APP_Rx_ptr_in++;
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <VCP_DataTx+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <VCP_DataTx+0x58>)
 8003c58:	6013      	str	r3, [r2, #0]
		
		/* To avoid buffer overflow */
		if (APP_Rx_ptr_in >= APP_RX_DATA_SIZE) {
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <VCP_DataTx+0x58>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c62:	d302      	bcc.n	8003c6a <VCP_DataTx+0x3a>
			APP_Rx_ptr_in = 0;
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <VCP_DataTx+0x58>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
		}
		
		tx_counter++;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
	while (tx_counter < Len) {
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d3e3      	bcc.n	8003c40 <VCP_DataTx+0x10>
	}
	
	return USBD_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000154 	.word	0x20000154
 8003c8c:	20000218 	.word	0x20000218

08003c90 <VCP_DataRx>:
  *                 
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else VCP_FAIL
  */
uint16_t VCP_DataRx (uint8_t* Buf, uint32_t Len) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
	uint32_t i;
	for (i = 0; i < Len; i++) {
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e009      	b.n	8003cb4 <VCP_DataRx+0x24>
		/* Add data to internal buffer */
		TM_INT_USB_VCP_AddReceived(*(Buf + i));
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f002 f84b 	bl	8005d44 <TM_INT_USB_VCP_AddReceived>
	for (i = 0; i < Len; i++) {
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d3f1      	bcc.n	8003ca0 <VCP_DataRx+0x10>
	}
	
	return USBD_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <USBD_Init>:
void USBD_Init(USB_OTG_CORE_HANDLE *pdev,
               USB_OTG_CORE_ID_TypeDef coreID,
               USBD_DEVICE *pDevice,                  
               USBD_Class_cb_TypeDef *class_cb, 
               USBD_Usr_cb_TypeDef *usr_cb)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	72fb      	strb	r3, [r7, #11]
  /* Hardware Init */
  USB_OTG_BSP_Init(pdev);  
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7fd fbfe 	bl	80014d8 <USB_OTG_BSP_Init>
  
  USBD_DeInit(pdev);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f81d 	bl	8003d1c <USBD_DeInit>
  
  /*Register class and user callbacks */
  pdev->dev.class_cb = class_cb;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
  pdev->dev.usr_cb = usr_cb;  
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
  pdev->dev.usr_device = pDevice;    
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
  
  /* set USB OTG core params */
  DCD_Init(pdev , coreID);
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7fe fda5 	bl	800284e <DCD_Init>
  
  /* Upon Init call usr callback */
  pdev->dev.usr_cb->Init();
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4798      	blx	r3
  
  /* Enable Interrupts */
  USB_OTG_BSP_EnableInterrupt(pdev);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7fd fc3a 	bl	8001588 <USB_OTG_BSP_EnableInterrupt>
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_Status USBD_DeInit(USB_OTG_CORE_HANDLE *pdev)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Software Init */
  
  return USBD_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <USBD_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_SetupStage(USB_OTG_CORE_HANDLE *pdev)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  USB_SETUP_REQ req;
  
  USBD_ParseSetupRequest(pdev , &req);
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fed7 	bl	8004af4 <USBD_ParseSetupRequest>
  
  switch (req.bmRequest & 0x1F) 
 8003d46:	7a3b      	ldrb	r3, [r7, #8]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d00a      	beq.n	8003d66 <USBD_SetupStage+0x34>
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d00f      	beq.n	8003d74 <USBD_SetupStage+0x42>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d114      	bne.n	8003d82 <USBD_SetupStage+0x50>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &req);
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 faf2 	bl	8004348 <USBD_StdDevReq>
    break;
 8003d64:	e016      	b.n	8003d94 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &req);
 8003d66:	f107 0308 	add.w	r3, r7, #8
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fb3b 	bl	80043e8 <USBD_StdItfReq>
    break;
 8003d72:	e00f      	b.n	8003d94 <USBD_SetupStage+0x62>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &req);   
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	4619      	mov	r1, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fb68 	bl	8004450 <USBD_StdEPReq>
    break;
 8003d80:	e008      	b.n	8003d94 <USBD_SetupStage+0x62>
    
  default:           
    DCD_EP_Stall(pdev , req.bmRequest & 0x80);
 8003d82:	7a3b      	ldrb	r3, [r7, #8]
 8003d84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fe fef3 	bl	8002b78 <DCD_EP_Stall>
    break;
 8003d92:	bf00      	nop
  }  
  return USBD_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <USBD_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataOutStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d144      	bne.n	8003e3a <USBD_DataOutStage+0x9c>
  {
    ep = &pdev->dev.out_ep[0];
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8003db6:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_OUT)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d14e      	bne.n	8003e60 <USBD_DataOutStage+0xc2>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d920      	bls.n	8003e10 <USBD_DataOutStage+0x72>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	1ad2      	subs	r2, r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	61da      	str	r2, [r3, #28]
        
        if(pdev->cfg.dma_enable == 1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	78db      	ldrb	r3, [r3, #3]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d106      	bne.n	8003df2 <USBD_DataOutStage+0x54>
        {
          /* in slave mode this, is handled by the RxSTSQLvl ISR */
          ep->xfer_buff += ep->maxpacket; 
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	441a      	add	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	60da      	str	r2, [r3, #12]
        }        
        USBD_CtlContinueRx (pdev, 
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68d9      	ldr	r1, [r3, #12]
                            ep->xfer_buff,
                            MIN(ep->rem_data_len ,ep->maxpacket));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	bf28      	it	cs
 8003e02:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa59 	bl	80042c0 <USBD_CtlContinueRx>
 8003e0e:	e027      	b.n	8003e60 <USBD_DataOutStage+0xc2>
      }
      else
      {
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <USBD_DataOutStage+0x94>
           (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
        if((pdev->dev.class_cb->EP0_RxReady != NULL)&&
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d105      	bne.n	8003e32 <USBD_DataOutStage+0x94>
        {
          pdev->dev.class_cb->EP0_RxReady(pdev); 
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa58 	bl	80042e8 <USBD_CtlSendStatus>
 8003e38:	e012      	b.n	8003e60 <USBD_DataOutStage+0xc2>
      }
    }
  }
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <USBD_DataOutStage+0xc2>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataOut != NULL)&&
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d107      	bne.n	8003e60 <USBD_DataOutStage+0xc2>
  {
    pdev->dev.class_cb->DataOut(pdev, epnum); 
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
  }  
  return USBD_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <USBD_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_DataInStage(USB_OTG_CORE_HANDLE *pdev , uint8_t epnum)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	460b      	mov	r3, r1
 8003e74:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EP *ep;
  
  if(epnum == 0) 
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d16b      	bne.n	8003f54 <USBD_DataInStage+0xea>
  {
    ep = &pdev->dev.in_ep[0];
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8003e82:	60fb      	str	r3, [r7, #12]
    if ( pdev->dev.device_state == USB_OTG_EP0_DATA_IN)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d155      	bne.n	8003f3a <USBD_DataInStage+0xd0>
    {
      if(ep->rem_data_len > ep->maxpacket)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d91b      	bls.n	8003ed2 <USBD_DataInStage+0x68>
      {
        ep->rem_data_len -=  ep->maxpacket;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	1ad2      	subs	r2, r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	61da      	str	r2, [r3, #28]
        if(pdev->cfg.dma_enable == 1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	78db      	ldrb	r3, [r3, #3]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <USBD_DataInStage+0x54>
        {
          /* in slave mode this, is handled by the TxFifoEmpty ISR */
          ep->xfer_buff += ep->maxpacket;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	441a      	add	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	60da      	str	r2, [r3, #12]
        }
        USBD_CtlContinueSendData (pdev, 
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
                                  ep->xfer_buff, 
                                  ep->rem_data_len);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	69db      	ldr	r3, [r3, #28]
        USBD_CtlContinueSendData (pdev, 
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f9c4 	bl	8004258 <USBD_CtlContinueSendData>
 8003ed0:	e033      	b.n	8003f3a <USBD_DataInStage+0xd0>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	6892      	ldr	r2, [r2, #8]
 8003eda:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ede:	fb02 f201 	mul.w	r2, r2, r1
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d114      	bne.n	8003f12 <USBD_DataInStage+0xa8>
           (ep->total_data_len >= ep->maxpacket) &&
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
        if((ep->total_data_len % ep->maxpacket == 0) &&
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d30e      	bcc.n	8003f12 <USBD_DataInStage+0xa8>
             (ep->total_data_len < ep->ctl_data_len ))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (ep->total_data_len >= ep->maxpacket) &&
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d208      	bcs.n	8003f12 <USBD_DataInStage+0xa8>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f9a7 	bl	8004258 <USBD_CtlContinueSendData>
          ep->ctl_data_len = 0;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24
 8003f10:	e013      	b.n	8003f3a <USBD_DataInStage+0xd0>
        }
        else
        {
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <USBD_DataInStage+0xca>
             (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
          if((pdev->dev.class_cb->EP0_TxSent != NULL)&&
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d105      	bne.n	8003f34 <USBD_DataInStage+0xca>
          {
            pdev->dev.class_cb->EP0_TxSent(pdev); 
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f9ef 	bl	8004318 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev.test_mode == 1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d11a      	bne.n	8003f7a <USBD_DataInStage+0x110>
    {
      USBD_RunTestMode(pdev); 
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f81d 	bl	8003f84 <USBD_RunTestMode>
      pdev->dev.test_mode = 0;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 8003f52:	e012      	b.n	8003f7a <USBD_DataInStage+0x110>
    }
  }
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <USBD_DataInStage+0x110>
          (pdev->dev.device_status == USB_OTG_CONFIGURED))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
  else if((pdev->dev.class_cb->DataIn != NULL)&& 
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d107      	bne.n	8003f7a <USBD_DataInStage+0x110>
  {
    pdev->dev.class_cb->DataIn(pdev, epnum); 
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	4611      	mov	r1, r2
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
  }  
  return USBD_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
static uint8_t  USBD_RunTestMode (USB_OTG_CORE_HANDLE  *pdev) 
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_WRITE_REG32(&pdev->regs.DREGS->DCTL, SET_TEST_MODE.d32);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <USBD_RunTestMode+0x20>)
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	605a      	str	r2, [r3, #4]
  return USBD_OK;  
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20000a18 	.word	0x20000a18

08003fa8 <USBD_Reset>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Reset(USB_OTG_CORE_HANDLE  *pdev)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  DCD_EP_Open(pdev,
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe fccc 	bl	8002954 <DCD_EP_Open>
              0x00,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Open EP0 IN */
  DCD_EP_Open(pdev,
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2240      	movs	r2, #64	; 0x40
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fe fcc6 	bl	8002954 <DCD_EP_Open>
              0x80,
              USB_OTG_MAX_EP0_SIZE,
              EP_TYPE_CTRL);
  
  /* Upon Reset call usr call back */
  pdev->dev.device_status = USB_OTG_DEFAULT;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.usr_cb->DeviceReset(pdev->cfg.speed);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	7892      	ldrb	r2, [r2, #2]
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4798      	blx	r3
  
  return USBD_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <USBD_Resume>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Resume(USB_OTG_CORE_HANDLE  *pdev)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceResumed(); 
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	4798      	blx	r3
  pdev->dev.device_status = pdev->dev.device_old_status;  
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  pdev->dev.device_status = USB_OTG_CONFIGURED;  
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2203      	movs	r2, #3
 800400c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  return USBD_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <USBD_Suspend>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_Suspend(USB_OTG_CORE_HANDLE  *pdev)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  pdev->dev.device_old_status = pdev->dev.device_status;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 2112 	ldrb.w	r2, [r3, #274]	; 0x112
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
  pdev->dev.device_status  = USB_OTG_SUSPENDED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
  /* Upon Resume call usr call back */
  pdev->dev.usr_cb->DeviceSuspended(); 
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4798      	blx	r3
  return USBD_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <USBD_SOF>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_SOF(USB_OTG_CORE_HANDLE  *pdev)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  if(pdev->dev.class_cb->SOF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <USBD_SOF+0x20>
  {
    pdev->dev.class_cb->SOF(pdev); 
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
  }
  return USBD_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <USBD_SetCfg>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_Status USBD_SetCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->Init(pdev, cfgidx); 
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	4611      	mov	r1, r2
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
  
  /* Upon set config call usr call back */
  pdev->dev.usr_cb->DeviceConfigured();
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 35e8 	ldr.w	r3, [r3, #1512]	; 0x5e8
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4798      	blx	r3
  return USBD_OK; 
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <USBD_ClrCfg>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_Status
*/
USBD_Status USBD_ClrCfg(USB_OTG_CORE_HANDLE  *pdev, uint8_t cfgidx)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev.class_cb->DeInit(pdev, cfgidx);   
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	4611      	mov	r1, r2
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	4798      	blx	r3
  return USBD_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <USBD_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoINIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoINIncomplete(pdev);   
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
  return USBD_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <USBD_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_IsoOUTIncomplete(USB_OTG_CORE_HANDLE  *pdev)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  pdev->dev.class_cb->IsoOUTIncomplete(pdev);   
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
  return USBD_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <USBD_USR_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_DeviceDescriptor( uint8_t speed , uint16_t *length)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	6039      	str	r1, [r7, #0]
 8004112:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2212      	movs	r2, #18
 8004118:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800411a:	4b03      	ldr	r3, [pc, #12]	; (8004128 <USBD_USR_DeviceDescriptor+0x20>)
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	200000ec 	.word	0x200000ec

0800412c <USBD_USR_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_LangIDStrDescriptor( uint8_t speed , uint16_t *length)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2204      	movs	r2, #4
 800413c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <USBD_USR_LangIDStrDescriptor+0x20>)
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	20000100 	.word	0x20000100

08004150 <USBD_USR_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ProductStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	4904      	ldr	r1, [pc, #16]	; (8004170 <USBD_USR_ProductStrDescriptor+0x20>)
 8004160:	4804      	ldr	r0, [pc, #16]	; (8004174 <USBD_USR_ProductStrDescriptor+0x24>)
 8004162:	f000 fd24 	bl	8004bae <USBD_GetString>
  return USBD_StrDesc;
 8004166:	4b02      	ldr	r3, [pc, #8]	; (8004170 <USBD_USR_ProductStrDescriptor+0x20>)
}
 8004168:	4618      	mov	r0, r3
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000a1c 	.word	0x20000a1c
 8004174:	08005e10 	.word	0x08005e10

08004178 <USBD_USR_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ManufacturerStrDescriptor( uint8_t speed , uint16_t *length)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	4904      	ldr	r1, [pc, #16]	; (8004198 <USBD_USR_ManufacturerStrDescriptor+0x20>)
 8004188:	4804      	ldr	r0, [pc, #16]	; (800419c <USBD_USR_ManufacturerStrDescriptor+0x24>)
 800418a:	f000 fd10 	bl	8004bae <USBD_GetString>
  return USBD_StrDesc;
 800418e:	4b02      	ldr	r3, [pc, #8]	; (8004198 <USBD_USR_ManufacturerStrDescriptor+0x20>)
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000a1c 	.word	0x20000a1c
 800419c:	08005e34 	.word	0x08005e34

080041a0 <USBD_USR_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_SerialStrDescriptor( uint8_t speed , uint16_t *length)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	6039      	str	r1, [r7, #0]
 80041aa:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);    
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	4904      	ldr	r1, [pc, #16]	; (80041c0 <USBD_USR_SerialStrDescriptor+0x20>)
 80041b0:	4804      	ldr	r0, [pc, #16]	; (80041c4 <USBD_USR_SerialStrDescriptor+0x24>)
 80041b2:	f000 fcfc 	bl	8004bae <USBD_GetString>
  return USBD_StrDesc;
 80041b6:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <USBD_USR_SerialStrDescriptor+0x20>)
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000a1c 	.word	0x20000a1c
 80041c4:	08005e48 	.word	0x08005e48

080041c8 <USBD_USR_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_ConfigStrDescriptor( uint8_t speed , uint16_t *length)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	4904      	ldr	r1, [pc, #16]	; (80041e8 <USBD_USR_ConfigStrDescriptor+0x20>)
 80041d8:	4804      	ldr	r0, [pc, #16]	; (80041ec <USBD_USR_ConfigStrDescriptor+0x24>)
 80041da:	f000 fce8 	bl	8004bae <USBD_GetString>
  return USBD_StrDesc;  
 80041de:	4b02      	ldr	r3, [pc, #8]	; (80041e8 <USBD_USR_ConfigStrDescriptor+0x20>)
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000a1c 	.word	0x20000a1c
 80041ec:	08005e58 	.word	0x08005e58

080041f0 <USBD_USR_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_USR_InterfaceStrDescriptor( uint8_t speed , uint16_t *length)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	4904      	ldr	r1, [pc, #16]	; (8004210 <USBD_USR_InterfaceStrDescriptor+0x20>)
 8004200:	4804      	ldr	r0, [pc, #16]	; (8004214 <USBD_USR_InterfaceStrDescriptor+0x24>)
 8004202:	f000 fcd4 	bl	8004bae <USBD_GetString>
  return USBD_StrDesc;  
 8004206:	4b02      	ldr	r3, [pc, #8]	; (8004210 <USBD_USR_InterfaceStrDescriptor+0x20>)
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000a1c 	.word	0x20000a1c
 8004214:	08005e64 	.word	0x08005e64

08004218 <USBD_CtlSendData>:
* @retval status
*/
USBD_Status  USBD_CtlSendData (USB_OTG_CORE_HANDLE  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.in_ep[0].total_data_len = len;
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  pdev->dev.in_ep[0].rem_data_len   = len;
 8004232:	88fa      	ldrh	r2, [r7, #6]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  pdev->dev.device_state = USB_OTG_EP0_DATA_IN;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111

  DCD_EP_Tx (pdev, 0, pbuf, len);
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	2100      	movs	r1, #0
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7fe fc59 	bl	8002b00 <DCD_EP_Tx>
 
  return ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_Status  USBD_CtlContinueSendData (USB_OTG_CORE_HANDLE  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_Tx (pdev, 0, pbuf, len);
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	2100      	movs	r1, #0
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7fe fc45 	bl	8002b00 <DCD_EP_Tx>
  
  
  return ret;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_Status  USBD_CtlPrepareRx (USB_OTG_CORE_HANDLE  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	75fb      	strb	r3, [r7, #23]
  
  pdev->dev.out_ep[0].total_data_len = len;
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  pdev->dev.out_ep[0].rem_data_len   = len;
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
  pdev->dev.device_state = USB_OTG_EP0_DATA_OUT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2203      	movs	r2, #3
 80042a6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  
  DCD_EP_PrepareRx (pdev,
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	2100      	movs	r1, #0
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7fe fbe3 	bl	8002a7c <DCD_EP_PrepareRx>
                    0,
                    pbuf,
                    len);
  

  return ret;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_Status  USBD_CtlContinueRx (USB_OTG_CORE_HANDLE  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	4613      	mov	r3, r2
 80042cc:	80fb      	strh	r3, [r7, #6]
  USBD_Status ret = USBD_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	75fb      	strb	r3, [r7, #23]
  
  DCD_EP_PrepareRx (pdev,
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	2100      	movs	r1, #0
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7fe fbcf 	bl	8002a7c <DCD_EP_PrepareRx>
                    0,                     
                    pbuf,                         
                    len);
  return ret;
 80042de:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlSendStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_IN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_Tx (pdev,
 80042fc:	2300      	movs	r3, #0
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fe fbfc 	bl	8002b00 <DCD_EP_Tx>
             0,
             NULL, 
             0); 
  
  USB_OTG_EP0_OutStart(pdev);  
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fe fa67 	bl	80027dc <USB_OTG_EP0_OutStart>
  
  return ret;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: USB OTG device instance
* @retval status
*/
USBD_Status  USBD_CtlReceiveStatus (USB_OTG_CORE_HANDLE  *pdev)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  USBD_Status ret = USBD_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
  pdev->dev.device_state = USB_OTG_EP0_STATUS_OUT;  
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2205      	movs	r2, #5
 8004328:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
  DCD_EP_PrepareRx ( pdev,
 800432c:	2300      	movs	r3, #0
 800432e:	2200      	movs	r2, #0
 8004330:	2100      	movs	r1, #0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe fba2 	bl	8002a7c <DCD_EP_PrepareRx>
                    0,
                    NULL,
                    0);  

  USB_OTG_EP0_OutStart(pdev);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fe fa4f 	bl	80027dc <USB_OTG_EP0_OutStart>
  
  return ret;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdDevReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK;  
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b09      	cmp	r3, #9
 800435c:	d839      	bhi.n	80043d2 <USBD_StdDevReq+0x8a>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <USBD_StdDevReq+0x1c>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	080043b5 	.word	0x080043b5
 8004368:	080043c9 	.word	0x080043c9
 800436c:	080043d3 	.word	0x080043d3
 8004370:	080043bf 	.word	0x080043bf
 8004374:	080043d3 	.word	0x080043d3
 8004378:	08004397 	.word	0x08004397
 800437c:	0800438d 	.word	0x0800438d
 8004380:	080043d3 	.word	0x080043d3
 8004384:	080043ab 	.word	0x080043ab
 8004388:	080043a1 	.word	0x080043a1
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f936 	bl	8004600 <USBD_GetDescriptor>
    break;
 8004394:	e022      	b.n	80043dc <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004396:	6839      	ldr	r1, [r7, #0]
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fa05 	bl	80047a8 <USBD_SetAddress>
    break;
 800439e:	e01d      	b.n	80043dc <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 80043a0:	6839      	ldr	r1, [r7, #0]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa3e 	bl	8004824 <USBD_SetConfig>
    break;
 80043a8:	e018      	b.n	80043dc <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fab3 	bl	8004918 <USBD_GetConfig>
    break;
 80043b2:	e013      	b.n	80043dc <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80043b4:	6839      	ldr	r1, [r7, #0]
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fade 	bl	8004978 <USBD_GetStatus>
    break;
 80043bc:	e00e      	b.n	80043dc <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80043be:	6839      	ldr	r1, [r7, #0]
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fb03 	bl	80049cc <USBD_SetFeature>
    break;
 80043c6:	e009      	b.n	80043dc <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fb6a 	bl	8004aa4 <USBD_ClrFeature>
    break;
 80043d0:	e004      	b.n	80043dc <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80043d2:	6839      	ldr	r1, [r7, #0]
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fbd6 	bl	8004b86 <USBD_CtlError>
    break;
 80043da:	bf00      	nop
  }
  
  return ret;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop

080043e8 <USBD_StdItfReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdItfReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  USBD_Status ret = USBD_OK; 
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev.device_status) 
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d11b      	bne.n	8004438 <USBD_StdItfReq+0x50>
  {
  case USB_OTG_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	889b      	ldrh	r3, [r3, #4]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d811      	bhi.n	800442e <USBD_StdItfReq+0x46>
    {
      pdev->dev.class_cb->Setup (pdev, req); 
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	88db      	ldrh	r3, [r3, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d110      	bne.n	8004442 <USBD_StdItfReq+0x5a>
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff5e 	bl	80042e8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800442c:	e009      	b.n	8004442 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800442e:	6839      	ldr	r1, [r7, #0]
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fba8 	bl	8004b86 <USBD_CtlError>
    break;
 8004436:	e004      	b.n	8004442 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fba3 	bl	8004b86 <USBD_CtlError>
    break;
 8004440:	e000      	b.n	8004444 <USBD_StdItfReq+0x5c>
    break;
 8004442:	bf00      	nop
  }
  return ret;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <USBD_StdEPReq>:
* @param  pdev: USB OTG device instance
* @param  req: usb request
* @retval status
*/
USBD_Status  USBD_StdEPReq (USB_OTG_CORE_HANDLE  *pdev, USB_SETUP_REQ  *req)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_Status ret = USBD_OK; 
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  
  ep_addr  = LOBYTE(req->wIndex);   
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	889b      	ldrh	r3, [r3, #4]
 8004462:	73bb      	strb	r3, [r7, #14]
  
  switch (req->bRequest) 
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d039      	beq.n	80044e0 <USBD_StdEPReq+0x90>
 800446c:	2b03      	cmp	r3, #3
 800446e:	d002      	beq.n	8004476 <USBD_StdEPReq+0x26>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d06c      	beq.n	800454e <USBD_StdEPReq+0xfe>
      break;
    }
    break;
    
  default:
    break;
 8004474:	e0bd      	b.n	80045f2 <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800447c:	2b02      	cmp	r3, #2
 800447e:	d002      	beq.n	8004486 <USBD_StdEPReq+0x36>
 8004480:	2b03      	cmp	r3, #3
 8004482:	d00c      	beq.n	800449e <USBD_StdEPReq+0x4e>
 8004484:	e025      	b.n	80044d2 <USBD_StdEPReq+0x82>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004486:	7bbb      	ldrb	r3, [r7, #14]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d027      	beq.n	80044dc <USBD_StdEPReq+0x8c>
 800448c:	7bbb      	ldrb	r3, [r7, #14]
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	d024      	beq.n	80044dc <USBD_StdEPReq+0x8c>
        DCD_EP_Stall(pdev , ep_addr);
 8004492:	7bbb      	ldrb	r3, [r7, #14]
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fe fb6e 	bl	8002b78 <DCD_EP_Stall>
      break;	
 800449c:	e01e      	b.n	80044dc <USBD_StdEPReq+0x8c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	885b      	ldrh	r3, [r3, #2]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <USBD_StdEPReq+0x6c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80044a6:	7bbb      	ldrb	r3, [r7, #14]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <USBD_StdEPReq+0x6c>
 80044ac:	7bbb      	ldrb	r3, [r7, #14]
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d004      	beq.n	80044bc <USBD_StdEPReq+0x6c>
          DCD_EP_Stall(pdev , ep_addr);
 80044b2:	7bbb      	ldrb	r3, [r7, #14]
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fe fb5e 	bl	8002b78 <DCD_EP_Stall>
      pdev->dev.class_cb->Setup (pdev, req);   
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff0c 	bl	80042e8 <USBD_CtlSendStatus>
      break;
 80044d0:	e005      	b.n	80044de <USBD_StdEPReq+0x8e>
      USBD_CtlError(pdev , req);
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fb56 	bl	8004b86 <USBD_CtlError>
      break;    
 80044da:	e000      	b.n	80044de <USBD_StdEPReq+0x8e>
      break;	
 80044dc:	bf00      	nop
    break;
 80044de:	e088      	b.n	80045f2 <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d002      	beq.n	80044f0 <USBD_StdEPReq+0xa0>
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d00c      	beq.n	8004508 <USBD_StdEPReq+0xb8>
 80044ee:	e025      	b.n	800453c <USBD_StdEPReq+0xec>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80044f0:	7bbb      	ldrb	r3, [r7, #14]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d027      	beq.n	8004546 <USBD_StdEPReq+0xf6>
 80044f6:	7bbb      	ldrb	r3, [r7, #14]
 80044f8:	2b80      	cmp	r3, #128	; 0x80
 80044fa:	d024      	beq.n	8004546 <USBD_StdEPReq+0xf6>
        DCD_EP_Stall(pdev , ep_addr);
 80044fc:	7bbb      	ldrb	r3, [r7, #14]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7fe fb39 	bl	8002b78 <DCD_EP_Stall>
      break;	
 8004506:	e01e      	b.n	8004546 <USBD_StdEPReq+0xf6>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	885b      	ldrh	r3, [r3, #2]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11c      	bne.n	800454a <USBD_StdEPReq+0xfa>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004510:	7bbb      	ldrb	r3, [r7, #14]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00e      	beq.n	8004534 <USBD_StdEPReq+0xe4>
 8004516:	7bbb      	ldrb	r3, [r7, #14]
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d00b      	beq.n	8004534 <USBD_StdEPReq+0xe4>
          DCD_EP_ClrStall(pdev , ep_addr);
 800451c:	7bbb      	ldrb	r3, [r7, #14]
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7fe fb66 	bl	8002bf2 <DCD_EP_ClrStall>
          pdev->dev.class_cb->Setup (pdev, req);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff fed7 	bl	80042e8 <USBD_CtlSendStatus>
      break;
 800453a:	e006      	b.n	800454a <USBD_StdEPReq+0xfa>
       USBD_CtlError(pdev , req);
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fb21 	bl	8004b86 <USBD_CtlError>
      break;    
 8004544:	e002      	b.n	800454c <USBD_StdEPReq+0xfc>
      break;	
 8004546:	bf00      	nop
 8004548:	e053      	b.n	80045f2 <USBD_StdEPReq+0x1a2>
      break;
 800454a:	bf00      	nop
    break;
 800454c:	e051      	b.n	80045f2 <USBD_StdEPReq+0x1a2>
    switch (pdev->dev.device_status) 
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004554:	2b02      	cmp	r3, #2
 8004556:	d002      	beq.n	800455e <USBD_StdEPReq+0x10e>
 8004558:	2b03      	cmp	r3, #3
 800455a:	d00c      	beq.n	8004576 <USBD_StdEPReq+0x126>
 800455c:	e042      	b.n	80045e4 <USBD_StdEPReq+0x194>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800455e:	7bbb      	ldrb	r3, [r7, #14]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d044      	beq.n	80045ee <USBD_StdEPReq+0x19e>
 8004564:	7bbb      	ldrb	r3, [r7, #14]
 8004566:	2b80      	cmp	r3, #128	; 0x80
 8004568:	d041      	beq.n	80045ee <USBD_StdEPReq+0x19e>
        DCD_EP_Stall(pdev , ep_addr);
 800456a:	7bbb      	ldrb	r3, [r7, #14]
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fe fb02 	bl	8002b78 <DCD_EP_Stall>
      break;	
 8004574:	e03b      	b.n	80045ee <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x80)== 0x80)
 8004576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800457a:	2b00      	cmp	r3, #0
 800457c:	da15      	bge.n	80045aa <USBD_StdEPReq+0x15a>
        if(pdev->dev.in_ep[ep_addr & 0x7F].is_stall)
 800457e:	7bbb      	ldrb	r3, [r7, #14]
 8004580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <USBD_StdEPReq+0x152>
          USBD_ep_status = 0x0001;     
 800459a:	4b18      	ldr	r3, [pc, #96]	; (80045fc <USBD_StdEPReq+0x1ac>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e01a      	b.n	80045d8 <USBD_StdEPReq+0x188>
          USBD_ep_status = 0x0000;  
 80045a2:	4b16      	ldr	r3, [pc, #88]	; (80045fc <USBD_StdEPReq+0x1ac>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e016      	b.n	80045d8 <USBD_StdEPReq+0x188>
      else if ((ep_addr & 0x80)== 0x00)
 80045aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	db12      	blt.n	80045d8 <USBD_StdEPReq+0x188>
        if(pdev->dev.out_ep[ep_addr].is_stall)
 80045b2:	7bba      	ldrb	r2, [r7, #14]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	440b      	add	r3, r1
 80045c0:	f203 3376 	addw	r3, r3, #886	; 0x376
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <USBD_StdEPReq+0x182>
          USBD_ep_status = 0x0001;     
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <USBD_StdEPReq+0x1ac>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e002      	b.n	80045d8 <USBD_StdEPReq+0x188>
          USBD_ep_status = 0x0000;     
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <USBD_StdEPReq+0x1ac>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
      USBD_CtlSendData (pdev,
 80045d8:	2202      	movs	r2, #2
 80045da:	4908      	ldr	r1, [pc, #32]	; (80045fc <USBD_StdEPReq+0x1ac>)
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff fe1b 	bl	8004218 <USBD_CtlSendData>
      break;
 80045e2:	e005      	b.n	80045f0 <USBD_StdEPReq+0x1a0>
       USBD_CtlError(pdev , req);
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 facd 	bl	8004b86 <USBD_CtlError>
      break;
 80045ec:	e000      	b.n	80045f0 <USBD_StdEPReq+0x1a0>
      break;	
 80045ee:	bf00      	nop
    break;
 80045f0:	bf00      	nop
  }
  return ret;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	2000016c 	.word	0x2000016c

08004600 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USB_OTG_CORE_HANDLE  *pdev, 
                               USB_SETUP_REQ *req)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	885b      	ldrh	r3, [r3, #2]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	2b06      	cmp	r3, #6
 8004616:	f200 80a9 	bhi.w	800476c <USBD_GetDescriptor+0x16c>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <USBD_GetDescriptor+0x20>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	0800463d 	.word	0x0800463d
 8004624:	0800466d 	.word	0x0800466d
 8004628:	08004695 	.word	0x08004695
 800462c:	0800476d 	.word	0x0800476d
 8004630:	0800476d 	.word	0x0800476d
 8004634:	08004759 	.word	0x08004759
 8004638:	08004763 	.word	0x08004763
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->dev.usr_device->GetDeviceDescriptor(pdev->cfg.speed, &len);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	7892      	ldrb	r2, [r2, #2]
 8004648:	f107 010a 	add.w	r1, r7, #10
 800464c:	4610      	mov	r0, r2
 800464e:	4798      	blx	r3
 8004650:	60f8      	str	r0, [r7, #12]
    if ((req->wLength == 64) ||( pdev->dev.device_status == USB_OTG_DEFAULT))  
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	88db      	ldrh	r3, [r3, #6]
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d005      	beq.n	8004666 <USBD_GetDescriptor+0x66>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004660:	2b01      	cmp	r3, #1
 8004662:	f040 8088 	bne.w	8004776 <USBD_GetDescriptor+0x176>
    {                  
      len = 8;
 8004666:	2308      	movs	r3, #8
 8004668:	817b      	strh	r3, [r7, #10]
    }
    break;
 800466a:	e084      	b.n	8004776 <USBD_GetDescriptor+0x176>
    
  case USB_DESC_TYPE_CONFIGURATION:
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetConfigDescriptor(pdev->cfg.speed, &len);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	7892      	ldrb	r2, [r2, #2]
 8004678:	f107 010a 	add.w	r1, r7, #10
 800467c:	4610      	mov	r0, r2
 800467e:	4798      	blx	r3
 8004680:	60f8      	str	r0, [r7, #12]
       (pdev->cfg.phy_itface  == USB_OTG_ULPI_PHY))
    {
      pbuf   = (uint8_t *)pdev->dev.class_cb->GetOtherConfigDescriptor(pdev->cfg.speed, &len);
    }
#endif  
    pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3301      	adds	r3, #1
 8004686:	2202      	movs	r2, #2
 8004688:	701a      	strb	r2, [r3, #0]
    pdev->dev.pConfig_descriptor = pbuf;    
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
    break;
 8004692:	e071      	b.n	8004778 <USBD_GetDescriptor+0x178>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	885b      	ldrh	r3, [r3, #2]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b05      	cmp	r3, #5
 800469c:	d856      	bhi.n	800474c <USBD_GetDescriptor+0x14c>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <USBD_GetDescriptor+0xa4>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046bd 	.word	0x080046bd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	080046ed 	.word	0x080046ed
 80046b0:	08004705 	.word	0x08004705
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	08004735 	.word	0x08004735
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->dev.usr_device->GetLangIDStrDescriptor(pdev->cfg.speed, &len);        
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	7892      	ldrb	r2, [r2, #2]
 80046c8:	f107 010a 	add.w	r1, r7, #10
 80046cc:	4610      	mov	r0, r2
 80046ce:	4798      	blx	r3
 80046d0:	60f8      	str	r0, [r7, #12]
      break;
 80046d2:	e040      	b.n	8004756 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->dev.usr_device->GetManufacturerStrDescriptor(pdev->cfg.speed, &len);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	7892      	ldrb	r2, [r2, #2]
 80046e0:	f107 010a 	add.w	r1, r7, #10
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
 80046e8:	60f8      	str	r0, [r7, #12]
      break;
 80046ea:	e034      	b.n	8004756 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->dev.usr_device->GetProductStrDescriptor(pdev->cfg.speed, &len);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	7892      	ldrb	r2, [r2, #2]
 80046f8:	f107 010a 	add.w	r1, r7, #10
 80046fc:	4610      	mov	r0, r2
 80046fe:	4798      	blx	r3
 8004700:	60f8      	str	r0, [r7, #12]
      break;
 8004702:	e028      	b.n	8004756 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->dev.usr_device->GetSerialStrDescriptor(pdev->cfg.speed, &len);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	7892      	ldrb	r2, [r2, #2]
 8004710:	f107 010a 	add.w	r1, r7, #10
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
 8004718:	60f8      	str	r0, [r7, #12]
      break;
 800471a:	e01c      	b.n	8004756 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->dev.usr_device->GetConfigurationStrDescriptor(pdev->cfg.speed, &len);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	7892      	ldrb	r2, [r2, #2]
 8004728:	f107 010a 	add.w	r1, r7, #10
 800472c:	4610      	mov	r0, r2
 800472e:	4798      	blx	r3
 8004730:	60f8      	str	r0, [r7, #12]
      break;
 8004732:	e010      	b.n	8004756 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->dev.usr_device->GetInterfaceStrDescriptor(pdev->cfg.speed, &len);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 35ec 	ldr.w	r3, [r3, #1516]	; 0x5ec
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	7892      	ldrb	r2, [r2, #2]
 8004740:	f107 010a 	add.w	r1, r7, #10
 8004744:	4610      	mov	r0, r2
 8004746:	4798      	blx	r3
 8004748:	60f8      	str	r0, [r7, #12]
      break;
 800474a:	e004      	b.n	8004756 <USBD_GetDescriptor+0x156>
    default:
#ifdef USB_SUPPORT_USER_STRING_DESC
      pbuf = pdev->dev.class_cb->GetUsrStrDescriptor(pdev->cfg.speed, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fa19 	bl	8004b86 <USBD_CtlError>
      return;
 8004754:	e025      	b.n	80047a2 <USBD_GetDescriptor+0x1a2>
#endif /* USBD_CtlError(pdev , req); */      
    }
    break;
 8004756:	e00f      	b.n	8004778 <USBD_GetDescriptor+0x178>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8004758:	6839      	ldr	r1, [r7, #0]
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa13 	bl	8004b86 <USBD_CtlError>
      return;
 8004760:	e01f      	b.n	80047a2 <USBD_GetDescriptor+0x1a2>
    {
      USBD_CtlError(pdev , req);
      return;
    }
#else
      USBD_CtlError(pdev , req);
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fa0e 	bl	8004b86 <USBD_CtlError>
      return;
 800476a:	e01a      	b.n	80047a2 <USBD_GetDescriptor+0x1a2>
#endif     

    
  default: 
     USBD_CtlError(pdev , req);
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa09 	bl	8004b86 <USBD_CtlError>
    return;
 8004774:	e015      	b.n	80047a2 <USBD_GetDescriptor+0x1a2>
    break;
 8004776:	bf00      	nop
  }
  
  if((len != 0)&& (req->wLength != 0))
 8004778:	897b      	ldrh	r3, [r7, #10]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d011      	beq.n	80047a2 <USBD_GetDescriptor+0x1a2>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	88db      	ldrh	r3, [r3, #6]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00d      	beq.n	80047a2 <USBD_GetDescriptor+0x1a2>
  {
    
    len = MIN(len , req->wLength);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	88da      	ldrh	r2, [r3, #6]
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	4293      	cmp	r3, r2
 800478e:	bf28      	it	cs
 8004790:	4613      	movcs	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	461a      	mov	r2, r3
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fd3b 	bl	8004218 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	889b      	ldrh	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12c      	bne.n	8004814 <USBD_SetAddress+0x6c>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	88db      	ldrh	r3, [r3, #6]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d128      	bne.n	8004814 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	885b      	ldrh	r3, [r3, #2]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047cc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d104      	bne.n	80047e2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80047d8:	6839      	ldr	r1, [r7, #0]
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f9d3 	bl	8004b86 <USBD_CtlError>
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 80047e0:	e01c      	b.n	800481c <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev.device_address = dev_addr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
      DCD_EP_SetAddress(pdev, dev_addr);               
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fe fa3c 	bl	8002c6c <DCD_EP_SetAddress>
      USBD_CtlSendStatus(pdev);                         
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fd77 	bl	80042e8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d004      	beq.n	800480a <USBD_SetAddress+0x62>
      {
        pdev->dev.device_status  = USB_OTG_ADDRESSED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8004808:	e008      	b.n	800481c <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev.device_status  = USB_OTG_DEFAULT; 
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
    if (pdev->dev.device_status == USB_OTG_CONFIGURED) 
 8004812:	e003      	b.n	800481c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8004814:	6839      	ldr	r1, [r7, #0]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f9b5 	bl	8004b86 <USBD_CtlError>
  } 
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	885b      	ldrh	r3, [r3, #2]
 8004832:	b2da      	uxtb	r2, r3
 8004834:	4b37      	ldr	r3, [pc, #220]	; (8004914 <USBD_SetConfig+0xf0>)
 8004836:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_CFG_MAX_NUM ) 
 8004838:	4b36      	ldr	r3, [pc, #216]	; (8004914 <USBD_SetConfig+0xf0>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d904      	bls.n	800484a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f99f 	bl	8004b86 <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
 8004848:	e05f      	b.n	800490a <USBD_SetConfig+0xe6>
    switch (pdev->dev.device_status) 
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004850:	2b02      	cmp	r3, #2
 8004852:	d002      	beq.n	800485a <USBD_SetConfig+0x36>
 8004854:	2b03      	cmp	r3, #3
 8004856:	d01b      	beq.n	8004890 <USBD_SetConfig+0x6c>
 8004858:	e052      	b.n	8004900 <USBD_SetConfig+0xdc>
      if (cfgidx) 
 800485a:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <USBD_SetConfig+0xf0>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <USBD_SetConfig+0x64>
        pdev->dev.device_config = cfgidx;
 8004862:	4b2c      	ldr	r3, [pc, #176]	; (8004914 <USBD_SetConfig+0xf0>)
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        pdev->dev.device_status = USB_OTG_CONFIGURED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2203      	movs	r2, #3
 8004870:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        USBD_SetCfg(pdev , cfgidx);
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <USBD_SetConfig+0xf0>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fbfa 	bl	8004074 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff fd31 	bl	80042e8 <USBD_CtlSendStatus>
      break;
 8004886:	e040      	b.n	800490a <USBD_SetConfig+0xe6>
         USBD_CtlSendStatus(pdev);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fd2d 	bl	80042e8 <USBD_CtlSendStatus>
      break;
 800488e:	e03c      	b.n	800490a <USBD_SetConfig+0xe6>
      if (cfgidx == 0) 
 8004890:	4b20      	ldr	r3, [pc, #128]	; (8004914 <USBD_SetConfig+0xf0>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d112      	bne.n	80048be <USBD_SetConfig+0x9a>
        pdev->dev.device_status = USB_OTG_ADDRESSED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        pdev->dev.device_config = cfgidx;          
 80048a0:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <USBD_SetConfig+0xf0>)
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_ClrCfg(pdev , cfgidx);
 80048aa:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <USBD_SetConfig+0xf0>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fbf7 	bl	80040a4 <USBD_ClrCfg>
        USBD_CtlSendStatus(pdev);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fd16 	bl	80042e8 <USBD_CtlSendStatus>
      break;
 80048bc:	e025      	b.n	800490a <USBD_SetConfig+0xe6>
      else  if (cfgidx != pdev->dev.device_config) 
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80048c4:	4b13      	ldr	r3, [pc, #76]	; (8004914 <USBD_SetConfig+0xf0>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d015      	beq.n	80048f8 <USBD_SetConfig+0xd4>
        USBD_ClrCfg(pdev , pdev->dev.device_config);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff fbe5 	bl	80040a4 <USBD_ClrCfg>
        pdev->dev.device_config = cfgidx;
 80048da:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <USBD_SetConfig+0xf0>)
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        USBD_SetCfg(pdev , cfgidx);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <USBD_SetConfig+0xf0>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff fbc2 	bl	8004074 <USBD_SetCfg>
        USBD_CtlSendStatus(pdev);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fcf9 	bl	80042e8 <USBD_CtlSendStatus>
      break;
 80048f6:	e008      	b.n	800490a <USBD_SetConfig+0xe6>
        USBD_CtlSendStatus(pdev);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fcf5 	bl	80042e8 <USBD_CtlSendStatus>
      break;
 80048fe:	e004      	b.n	800490a <USBD_SetConfig+0xe6>
       USBD_CtlError(pdev , req);                     
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f93f 	bl	8004b86 <USBD_CtlError>
      break;
 8004908:	bf00      	nop
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000178 	.word	0x20000178

08004918 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
 
  if (req->wLength != 1) 
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	88db      	ldrh	r3, [r3, #6]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d004      	beq.n	8004934 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f92a 	bl	8004b86 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8004932:	e01b      	b.n	800496c <USBD_GetConfig+0x54>
    switch (pdev->dev.device_status )  
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 800493a:	2b02      	cmp	r3, #2
 800493c:	d002      	beq.n	8004944 <USBD_GetConfig+0x2c>
 800493e:	2b03      	cmp	r3, #3
 8004940:	d006      	beq.n	8004950 <USBD_GetConfig+0x38>
 8004942:	e00e      	b.n	8004962 <USBD_GetConfig+0x4a>
      USBD_CtlSendData (pdev, 
 8004944:	2201      	movs	r2, #1
 8004946:	490b      	ldr	r1, [pc, #44]	; (8004974 <USBD_GetConfig+0x5c>)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fc65 	bl	8004218 <USBD_CtlSendData>
      break;
 800494e:	e00d      	b.n	800496c <USBD_GetConfig+0x54>
      USBD_CtlSendData (pdev, 
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004956:	2201      	movs	r2, #1
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fc5c 	bl	8004218 <USBD_CtlSendData>
      break;
 8004960:	e004      	b.n	800496c <USBD_GetConfig+0x54>
       USBD_CtlError(pdev , req);
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f90e 	bl	8004b86 <USBD_CtlError>
      break;
 800496a:	bf00      	nop
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000170 	.word	0x20000170

08004978 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USB_OTG_CORE_HANDLE  *pdev, 
                           USB_SETUP_REQ *req)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev.device_status) 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004988:	3b02      	subs	r3, #2
 800498a:	2b01      	cmp	r3, #1
 800498c:	d813      	bhi.n	80049b6 <USBD_GetStatus+0x3e>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    
#ifdef USBD_SELF_POWERED
    USBD_cfg_status = USB_CONFIG_SELF_POWERED;                                    
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <USBD_GetStatus+0x50>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
#else
    USBD_cfg_status = 0x00;                                    
#endif
                      
    if (pdev->dev.DevRemoteWakeup) 
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <USBD_GetStatus+0x32>
    {
      USBD_cfg_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <USBD_GetStatus+0x50>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f043 0302 	orr.w	r3, r3, #2
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <USBD_GetStatus+0x50>)
 80049a8:	6013      	str	r3, [r2, #0]
    }
    
    USBD_CtlSendData (pdev, 
 80049aa:	2202      	movs	r2, #2
 80049ac:	4906      	ldr	r1, [pc, #24]	; (80049c8 <USBD_GetStatus+0x50>)
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff fc32 	bl	8004218 <USBD_CtlSendData>
                      (uint8_t *)&USBD_cfg_status,
                      2);
    break;
 80049b4:	e004      	b.n	80049c0 <USBD_GetStatus+0x48>
    
  default :
    USBD_CtlError(pdev , req);                        
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8e4 	bl	8004b86 <USBD_CtlError>
    break;
 80049be:	bf00      	nop
  }
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000174 	.word	0x20000174

080049cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]

  USB_OTG_DCTL_TypeDef     dctl;
  uint8_t test_mode = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
 
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	885b      	ldrh	r3, [r3, #2]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10e      	bne.n	8004a00 <USBD_SetFeature+0x34>
  {
    pdev->dev.DevRemoteWakeup = 1;  
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    pdev->dev.class_cb->Setup (pdev, req);   
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fc75 	bl	80042e8 <USBD_CtlSendStatus>
    SET_TEST_MODE = dctl;
    pdev->dev.test_mode = 1;
    USBD_CtlSendStatus(pdev);
  }

}
 80049fe:	e04b      	b.n	8004a98 <USBD_SetFeature+0xcc>
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	885b      	ldrh	r3, [r3, #2]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d147      	bne.n	8004a98 <USBD_SetFeature+0xcc>
           ((req->wIndex & 0xFF) == 0))
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	889b      	ldrh	r3, [r3, #4]
 8004a0c:	b2db      	uxtb	r3, r3
  else if ((req->wValue == USB_FEATURE_TEST_MODE) && 
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d142      	bne.n	8004a98 <USBD_SetFeature+0xcc>
    dctl.d32 = USB_OTG_READ_REG32(&pdev->regs.DREGS->DCTL);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	60bb      	str	r3, [r7, #8]
    test_mode = req->wIndex >> 8;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	889b      	ldrh	r3, [r3, #4]
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	73fb      	strb	r3, [r7, #15]
    switch (test_mode) 
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d82b      	bhi.n	8004a84 <USBD_SetFeature+0xb8>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <USBD_SetFeature+0x68>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a49 	.word	0x08004a49
 8004a38:	08004a55 	.word	0x08004a55
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a6d 	.word	0x08004a6d
 8004a44:	08004a79 	.word	0x08004a79
      dctl.b.tstctl = 1;
 8004a48:	7a3b      	ldrb	r3, [r7, #8]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f362 1306 	bfi	r3, r2, #4, #3
 8004a50:	723b      	strb	r3, [r7, #8]
      break;
 8004a52:	e017      	b.n	8004a84 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 2;
 8004a54:	7a3b      	ldrb	r3, [r7, #8]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f362 1306 	bfi	r3, r2, #4, #3
 8004a5c:	723b      	strb	r3, [r7, #8]
      break;
 8004a5e:	e011      	b.n	8004a84 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 3;
 8004a60:	7a3b      	ldrb	r3, [r7, #8]
 8004a62:	2203      	movs	r2, #3
 8004a64:	f362 1306 	bfi	r3, r2, #4, #3
 8004a68:	723b      	strb	r3, [r7, #8]
      break;
 8004a6a:	e00b      	b.n	8004a84 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 4;
 8004a6c:	7a3b      	ldrb	r3, [r7, #8]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	f362 1306 	bfi	r3, r2, #4, #3
 8004a74:	723b      	strb	r3, [r7, #8]
      break;
 8004a76:	e005      	b.n	8004a84 <USBD_SetFeature+0xb8>
      dctl.b.tstctl = 5;
 8004a78:	7a3b      	ldrb	r3, [r7, #8]
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f362 1306 	bfi	r3, r2, #4, #3
 8004a80:	723b      	strb	r3, [r7, #8]
      break;
 8004a82:	bf00      	nop
    SET_TEST_MODE = dctl;
 8004a84:	4a06      	ldr	r2, [pc, #24]	; (8004aa0 <USBD_SetFeature+0xd4>)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6013      	str	r3, [r2, #0]
    pdev->dev.test_mode = 1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    USBD_CtlSendStatus(pdev);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fc28 	bl	80042e8 <USBD_CtlSendStatus>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000a18 	.word	0x20000a18

08004aa4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USB_OTG_CORE_HANDLE  *pdev, 
                            USB_SETUP_REQ *req)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev.device_status)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 8004ab4:	3b02      	subs	r3, #2
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d812      	bhi.n	8004ae0 <USBD_ClrFeature+0x3c>
  {
  case USB_OTG_ADDRESSED:
  case USB_OTG_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	885b      	ldrh	r3, [r3, #2]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d113      	bne.n	8004aea <USBD_ClrFeature+0x46>
    {
      pdev->dev.DevRemoteWakeup = 0; 
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
      pdev->dev.class_cb->Setup (pdev, req);   
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 35e4 	ldr.w	r3, [r3, #1508]	; 0x5e4
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fc05 	bl	80042e8 <USBD_CtlSendStatus>
    }
    break;
 8004ade:	e004      	b.n	8004aea <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f84f 	bl	8004b86 <USBD_CtlError>
    break;
 8004ae8:	e000      	b.n	8004aec <USBD_ClrFeature+0x48>
    break;
 8004aea:	bf00      	nop
  }
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdev->dev.setup_packet);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 25cc 	ldrb.w	r2, [r3, #1484]	; 0x5cc
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdev->dev.setup_packet +  1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 25cd 	ldrb.w	r2, [r3, #1485]	; 0x5cd
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdev->dev.setup_packet +  2);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 35ce 	ldrb.w	r3, [r3, #1486]	; 0x5ce
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 35cf 	ldrb.w	r3, [r3, #1487]	; 0x5cf
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdev->dev.setup_packet +  4);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 35d0 	ldrb.w	r3, [r3, #1488]	; 0x5d0
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 35d1 	ldrb.w	r3, [r3, #1489]	; 0x5d1
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	4413      	add	r3, r2
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdev->dev.setup_packet +  6);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 35d2 	ldrb.w	r3, [r3, #1490]	; 0x5d2
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 35d3 	ldrb.w	r3, [r3, #1491]	; 0x5d3
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	80da      	strh	r2, [r3, #6]
  
  pdev->dev.in_ep[0].ctl_data_len = req->wLength  ;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	88db      	ldrh	r3, [r3, #6]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  pdev->dev.device_state = USB_OTG_EP0_SETUP;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USB_OTG_CORE_HANDLE  *pdev,
                            USB_SETUP_REQ *req)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  
  DCD_EP_Stall(pdev , 0x80);
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fd fff0 	bl	8002b78 <DCD_EP_Stall>
  DCD_EP_Stall(pdev , 0);
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fd ffec 	bl	8002b78 <DCD_EP_Stall>
  USB_OTG_EP0_OutStart(pdev);  
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fd fe1b 	bl	80027dc <USB_OTG_EP0_OutStart>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d033      	beq.n	8004c2c <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f835 	bl	8004c34 <USBD_GetLen>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	3301      	adds	r3, #1
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	75fa      	strb	r2, [r7, #23]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4413      	add	r3, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	8812      	ldrh	r2, [r2, #0]
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	75fa      	strb	r2, [r7, #23]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	701a      	strb	r2, [r3, #0]
    
    while (*desc != NULL) 
 8004bfc:	e012      	b.n	8004c24 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	75fa      	strb	r2, [r7, #23]
 8004c04:	461a      	mov	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	441a      	add	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1c59      	adds	r1, r3, #1
 8004c0e:	60f9      	str	r1, [r7, #12]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	75fa      	strb	r2, [r7, #23]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4413      	add	r3, r2
 8004c20:	2200      	movs	r2, #0
 8004c22:	701a      	strb	r2, [r3, #0]
    while (*desc != NULL) 
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e8      	bne.n	8004bfe <USBD_GetString+0x50>
    }
  } 
}
 8004c2c:	bf00      	nop
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]

    while (*buf != NULL) 
 8004c40:	e005      	b.n	8004c4e <USBD_GetLen+0x1a>
    {
        len++;
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	3301      	adds	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
        buf++;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	607b      	str	r3, [r7, #4]
    while (*buf != NULL) 
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f5      	bne.n	8004c42 <USBD_GetLen+0xe>
    }

    return len;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <USBD_USR_Init>:
  USBD_USR_DeviceResumed,
  USBD_USR_DeviceConnected,
  USBD_USR_DeviceDisconnected,    
};

void USBD_USR_Init(void) {
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <USBD_USR_Init+0x14>)
 8004c6a:	2205      	movs	r2, #5
 8004c6c:	701a      	strb	r2, [r3, #0]
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000104 	.word	0x20000104

08004c7c <USBD_USR_DeviceReset>:

void USBD_USR_DeviceReset(uint8_t speed ) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8004c86:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <USBD_USR_DeviceReset+0x1c>)
 8004c88:	2205      	movs	r2, #5
 8004c8a:	701a      	strb	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	20000104 	.word	0x20000104

08004c9c <USBD_USR_DeviceConfigured>:

void USBD_USR_DeviceConfigured (void) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_CONNECTED;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <USBD_USR_DeviceConfigured+0x14>)
 8004ca2:	2206      	movs	r2, #6
 8004ca4:	701a      	strb	r2, [r3, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000104 	.word	0x20000104

08004cb4 <USBD_USR_DeviceSuspended>:

void USBD_USR_DeviceSuspended(void) {
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8004cb8:	4b03      	ldr	r3, [pc, #12]	; (8004cc8 <USBD_USR_DeviceSuspended+0x14>)
 8004cba:	2205      	movs	r2, #5
 8004cbc:	701a      	strb	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	20000104 	.word	0x20000104

08004ccc <USBD_USR_DeviceResumed>:

void USBD_USR_DeviceResumed(void) {
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <USBD_USR_DeviceResumed+0x14>)
 8004cd2:	2205      	movs	r2, #5
 8004cd4:	701a      	strb	r2, [r3, #0]
}
 8004cd6:	bf00      	nop
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	20000104 	.word	0x20000104

08004ce4 <USBD_USR_DeviceConnected>:

void USBD_USR_DeviceConnected (void) {
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <USBD_USR_DeviceConnected+0x14>)
 8004cea:	2205      	movs	r2, #5
 8004cec:	701a      	strb	r2, [r3, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	20000104 	.word	0x20000104

08004cfc <USBD_USR_DeviceDisconnected>:

void USBD_USR_DeviceDisconnected (void) {
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
	TM_USB_VCP_INT_Status = TM_USB_VCP_NOT_CONNECTED;
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <USBD_USR_DeviceDisconnected+0x14>)
 8004d02:	2205      	movs	r2, #5
 8004d04:	701a      	strb	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000104 	.word	0x20000104

08004d14 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8004d18:	4b38      	ldr	r3, [pc, #224]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <Audio_MAL_IRQHandler+0xec>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f7fb fd18 	bl	8000758 <DMA_GetFlagStatus>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d064      	beq.n	8004df8 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8004d2e:	4b35      	ldr	r3, [pc, #212]	; (8004e04 <Audio_MAL_IRQHandler+0xf0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04c      	beq.n	8004dd0 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8004d36:	bf00      	nop
 8004d38:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fb fcf3 	bl	8000728 <DMA_GetCmdStatus>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f7      	bne.n	8004d38 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8004d48:	4b2c      	ldr	r3, [pc, #176]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <Audio_MAL_IRQHandler+0xec>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f7fb fd3c 	bl	80007d0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8004d58:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <Audio_MAL_IRQHandler+0xf4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <Audio_MAL_IRQHandler+0xf8>)
 8004d60:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8004d62:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <Audio_MAL_IRQHandler+0xf0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bf28      	it	cs
 8004d6e:	4613      	movcs	r3, r2
 8004d70:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <Audio_MAL_IRQHandler+0xf8>)
 8004d72:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8004d74:	4b21      	ldr	r3, [pc, #132]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4924      	ldr	r1, [pc, #144]	; (8004e0c <Audio_MAL_IRQHandler+0xf8>)
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fc60 	bl	8000640 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fb fcb2 	bl	80006f0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <Audio_MAL_IRQHandler+0xf4>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <Audio_MAL_IRQHandler+0xf0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d98:	d203      	bcs.n	8004da2 <Audio_MAL_IRQHandler+0x8e>
 8004d9a:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <Audio_MAL_IRQHandler+0xf0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	e000      	b.n	8004da4 <Audio_MAL_IRQHandler+0x90>
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <Audio_MAL_IRQHandler+0xfc>)
 8004da4:	4413      	add	r3, r2
 8004da6:	4a18      	ldr	r2, [pc, #96]	; (8004e08 <Audio_MAL_IRQHandler+0xf4>)
 8004da8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8004daa:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <Audio_MAL_IRQHandler+0xf0>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <Audio_MAL_IRQHandler+0xf0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004db6:	428b      	cmp	r3, r1
 8004db8:	bf28      	it	cs
 8004dba:	460b      	movcs	r3, r1
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <Audio_MAL_IRQHandler+0xf0>)
 8004dc0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fb fc91 	bl	80006f0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8004dce:	e013      	b.n	8004df8 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb fc8a 	bl	80006f0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <Audio_MAL_IRQHandler+0xe8>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <Audio_MAL_IRQHandler+0xec>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f7fb fcf2 	bl	80007d0 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <Audio_MAL_IRQHandler+0xf4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2100      	movs	r1, #0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fdd2 	bl	800599c <EVAL_AUDIO_TransferComplete_CallBack>
}
 8004df8:	bf00      	nop
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	2000012c 	.word	0x2000012c
 8004e00:	20000130 	.word	0x20000130
 8004e04:	20000124 	.word	0x20000124
 8004e08:	20000b1c 	.word	0x20000b1c
 8004e0c:	20000b5c 	.word	0x20000b5c
 8004e10:	0001fffe 	.word	0x0001fffe

08004e14 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8004e18:	f7ff ff7c 	bl	8004d14 <Audio_MAL_IRQHandler>
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8004e24:	f7ff ff76 	bl	8004d14 <Audio_MAL_IRQHandler>
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8004e30:	2102      	movs	r1, #2
 8004e32:	480d      	ldr	r0, [pc, #52]	; (8004e68 <SPI3_IRQHandler+0x3c>)
 8004e34:	f7fc f85e 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d011      	beq.n	8004e62 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <SPI3_IRQHandler+0x40>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d106      	bne.n	8004e54 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8004e46:	f000 fdb4 	bl	80059b2 <EVAL_AUDIO_GetSampleCallBack>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	2004      	movs	r0, #4
 8004e50:	f7fb fbda 	bl	8000608 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8004e54:	f000 fdad 	bl	80059b2 <EVAL_AUDIO_GetSampleCallBack>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4802      	ldr	r0, [pc, #8]	; (8004e68 <SPI3_IRQHandler+0x3c>)
 8004e5e:	f7fc f83a 	bl	8000ed6 <SPI_I2S_SendData>
  }
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40003c00 	.word	0x40003c00
 8004e6c:	20000128 	.word	0x20000128

08004e70 <initADC>:
 *      Author: Stuart Lunt
 */

#include "ADC.h"

void initADC(){
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08c      	sub	sp, #48	; 0x30
 8004e74:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA
	RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004e76:	2101      	movs	r1, #1
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f7fb ff7b 	bl	8000d74 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8004e7e:	2101      	movs	r1, #1
 8004e80:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004e84:	f7fb ff76 	bl	8000d74 <RCC_APB2PeriphClockCmd>

	//Set up PA1 to ADC1 channel 1
	GPIO_InitTypeDef gpio;
	gpio.GPIO_Mode = GPIO_Mode_AN;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	gpio.GPIO_Pin = GPIO_Pin_1;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOA, &gpio);
 8004e98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4819      	ldr	r0, [pc, #100]	; (8004f04 <initADC+0x94>)
 8004ea0:	f7fb fd3c 	bl	800091c <GPIO_Init>

	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	//common init defaults are mode = independent, prescaler = 2, DMA disabled, two sampling delay = 5
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61bb      	str	r3, [r7, #24]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4;
 8004ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eac:	61fb      	str	r3, [r7, #28]
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	623b      	str	r3, [r7, #32]
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_CommonInit(&ADC_CommonInitStructure);
 8004eb6:	f107 0318 	add.w	r3, r7, #24
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fa5e 	bl	800037c <ADC_CommonInit>

	ADC_InitTypeDef adc;
	adc.ADC_ContinuousConvMode = DISABLE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	717b      	strb	r3, [r7, #5]
	adc.ADC_DataAlign = ADC_DataAlign_Right;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]
	adc.ADC_ExternalTrigConv = DISABLE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]
	adc.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60bb      	str	r3, [r7, #8]
	adc.ADC_NbrOfConversion = 1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	753b      	strb	r3, [r7, #20]
	adc.ADC_Resolution = ADC_Resolution_12b;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	603b      	str	r3, [r7, #0]
	adc.ADC_ScanConvMode = DISABLE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	713b      	strb	r3, [r7, #4]
	ADC_Init(ADC1, &adc);
 8004edc:	463b      	mov	r3, r7
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4809      	ldr	r0, [pc, #36]	; (8004f08 <initADC+0x98>)
 8004ee2:	f7fb f9f5 	bl	80002d0 <ADC_Init>
	ADC_Cmd(ADC1, ENABLE);
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4807      	ldr	r0, [pc, #28]	; (8004f08 <initADC+0x98>)
 8004eea:	f7fb fa6f 	bl	80003cc <ADC_Cmd>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_480Cycles); //should be fast enough. reduce if an issue
 8004eee:	2307      	movs	r3, #7
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	4804      	ldr	r0, [pc, #16]	; (8004f08 <initADC+0x98>)
 8004ef6:	f7fb fa85 	bl	8000404 <ADC_RegularChannelConfig>
}
 8004efa:	bf00      	nop
 8004efc:	3730      	adds	r7, #48	; 0x30
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40020000 	.word	0x40020000
 8004f08:	40012000 	.word	0x40012000

08004f0c <readADC>:

uint16_t readADC(){
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
	ADC_SoftwareStartConv(ADC1);
 8004f10:	4808      	ldr	r0, [pc, #32]	; (8004f34 <readADC+0x28>)
 8004f12:	f7fb fb41 	bl	8000598 <ADC_SoftwareStartConv>
	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 8004f16:	bf00      	nop
 8004f18:	2102      	movs	r1, #2
 8004f1a:	4806      	ldr	r0, [pc, #24]	; (8004f34 <readADC+0x28>)
 8004f1c:	f7fb fb59 	bl	80005d2 <ADC_GetFlagStatus>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f8      	beq.n	8004f18 <readADC+0xc>
	return ADC_GetConversionValue(ADC1);
 8004f26:	4803      	ldr	r0, [pc, #12]	; (8004f34 <readADC+0x28>)
 8004f28:	f7fb fb46 	bl	80005b8 <ADC_GetConversionValue>
 8004f2c:	4603      	mov	r3, r0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40012000 	.word	0x40012000

08004f38 <initSPI>:
 *      Author: Stuart Lunt
 */

#include "SPI.h"

void initSPI(){
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
	//Enable clock for GPIOB
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8004f3e:	2101      	movs	r1, #1
 8004f40:	2002      	movs	r0, #2
 8004f42:	f7fb feb7 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8004f46:	2101      	movs	r1, #1
 8004f48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f4c:	f7fb fef2 	bl	8000d34 <RCC_APB1PeriphClockCmd>
	 * PB15 - MOSI
	 */

	GPIO_InitTypeDef gpio;

	gpio.GPIO_Mode = GPIO_Mode_OUT;
 8004f50:	2301      	movs	r3, #1
 8004f52:	773b      	strb	r3, [r7, #28]
	gpio.GPIO_Pin = GPIO_Pin_12;
 8004f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f58:	61bb      	str	r3, [r7, #24]
	gpio.GPIO_PuPd = GPIO_PuPd_UP;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	77fb      	strb	r3, [r7, #31]
	gpio.GPIO_OType = GPIO_OType_PP;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	77bb      	strb	r3, [r7, #30]
	gpio.GPIO_Speed = GPIO_Speed_50MHz;
 8004f62:	2302      	movs	r3, #2
 8004f64:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &gpio);
 8004f66:	f107 0318 	add.w	r3, r7, #24
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4845      	ldr	r0, [pc, #276]	; (8005084 <initSPI+0x14c>)
 8004f6e:	f7fb fcd5 	bl	800091c <GPIO_Init>

	GPIO_WriteBit(GPIOB, GPIO_Pin_12, Bit_SET);
 8004f72:	2201      	movs	r2, #1
 8004f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f78:	4842      	ldr	r0, [pc, #264]	; (8005084 <initSPI+0x14c>)
 8004f7a:	f7fb fd91 	bl	8000aa0 <GPIO_WriteBit>
	//Set Pin 13 to SCL
	gpio.GPIO_Mode = GPIO_Mode_AF;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	773b      	strb	r3, [r7, #28]
	gpio.GPIO_Pin = GPIO_Pin_13;
 8004f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f86:	61bb      	str	r3, [r7, #24]
	gpio.GPIO_PuPd = GPIO_PuPd_UP;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	77fb      	strb	r3, [r7, #31]
	gpio.GPIO_OType = GPIO_OType_PP;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	77bb      	strb	r3, [r7, #30]
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 8004f90:	2303      	movs	r3, #3
 8004f92:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &gpio);
 8004f94:	f107 0318 	add.w	r3, r7, #24
 8004f98:	4619      	mov	r1, r3
 8004f9a:	483a      	ldr	r0, [pc, #232]	; (8005084 <initSPI+0x14c>)
 8004f9c:	f7fb fcbe 	bl	800091c <GPIO_Init>

	//MISO
	gpio.GPIO_Mode = GPIO_Mode_AF;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	773b      	strb	r3, [r7, #28]
	gpio.GPIO_Pin = GPIO_Pin_14;
 8004fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fa8:	61bb      	str	r3, [r7, #24]
	gpio.GPIO_PuPd = GPIO_PuPd_UP;
 8004faa:	2301      	movs	r3, #1
 8004fac:	77fb      	strb	r3, [r7, #31]
	gpio.GPIO_OType = GPIO_OType_PP;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	77bb      	strb	r3, [r7, #30]
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &gpio);
 8004fb6:	f107 0318 	add.w	r3, r7, #24
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4831      	ldr	r0, [pc, #196]	; (8005084 <initSPI+0x14c>)
 8004fbe:	f7fb fcad 	bl	800091c <GPIO_Init>

	//Set up MOSI
	gpio.GPIO_Mode = GPIO_Mode_AF;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	773b      	strb	r3, [r7, #28]
	gpio.GPIO_Pin = GPIO_Pin_15;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fca:	61bb      	str	r3, [r7, #24]
	gpio.GPIO_PuPd = GPIO_PuPd_DOWN;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	77fb      	strb	r3, [r7, #31]
	gpio.GPIO_OType = GPIO_OType_PP;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	77bb      	strb	r3, [r7, #30]
	gpio.GPIO_Speed = GPIO_Speed_100MHz;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOB, &gpio);
 8004fd8:	f107 0318 	add.w	r3, r7, #24
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4829      	ldr	r0, [pc, #164]	; (8005084 <initSPI+0x14c>)
 8004fe0:	f7fb fc9c 	bl	800091c <GPIO_Init>

	//Configure GPIO AF config;
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_SPI2);
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	210d      	movs	r1, #13
 8004fe8:	4826      	ldr	r0, [pc, #152]	; (8005084 <initSPI+0x14c>)
 8004fea:	f7fb fd71 	bl	8000ad0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_SPI2);
 8004fee:	2205      	movs	r2, #5
 8004ff0:	210e      	movs	r1, #14
 8004ff2:	4824      	ldr	r0, [pc, #144]	; (8005084 <initSPI+0x14c>)
 8004ff4:	f7fb fd6c 	bl	8000ad0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);
 8004ff8:	2205      	movs	r2, #5
 8004ffa:	210f      	movs	r1, #15
 8004ffc:	4821      	ldr	r0, [pc, #132]	; (8005084 <initSPI+0x14c>)
 8004ffe:	f7fb fd67 	bl	8000ad0 <GPIO_PinAFConfig>

	SPI_InitTypeDef spi;
	spi.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005002:	2300      	movs	r3, #0
 8005004:	80bb      	strh	r3, [r7, #4]
	spi.SPI_Mode = SPI_Mode_Master;
 8005006:	f44f 7382 	mov.w	r3, #260	; 0x104
 800500a:	80fb      	strh	r3, [r7, #6]
	spi.SPI_DataSize = SPI_DataSize_8b;
 800500c:	2300      	movs	r3, #0
 800500e:	813b      	strh	r3, [r7, #8]
	spi.SPI_CPOL = SPI_CPOL_High;
 8005010:	2302      	movs	r3, #2
 8005012:	817b      	strh	r3, [r7, #10]
	spi.SPI_CPHA = SPI_CPHA_2Edge;
 8005014:	2301      	movs	r3, #1
 8005016:	81bb      	strh	r3, [r7, #12]
	spi.SPI_NSS = SPI_NSS_Soft;
 8005018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800501c:	81fb      	strh	r3, [r7, #14]
	spi.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
 800501e:	2328      	movs	r3, #40	; 0x28
 8005020:	823b      	strh	r3, [r7, #16]
	spi.SPI_FirstBit = SPI_FirstBit_MSB;
 8005022:	2300      	movs	r3, #0
 8005024:	827b      	strh	r3, [r7, #18]
	spi.SPI_CRCPolynomial = 7;
 8005026:	2307      	movs	r3, #7
 8005028:	82bb      	strh	r3, [r7, #20]
	SPI_Init(SPI2, &spi);
 800502a:	1d3b      	adds	r3, r7, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4816      	ldr	r0, [pc, #88]	; (8005088 <initSPI+0x150>)
 8005030:	f7fb fee0 	bl	8000df4 <SPI_Init>
	SPI_Cmd(SPI2, ENABLE);
 8005034:	2101      	movs	r1, #1
 8005036:	4814      	ldr	r0, [pc, #80]	; (8005088 <initSPI+0x150>)
 8005038:	f7fb ff20 	bl	8000e7c <SPI_Cmd>

	writeSPI(USER_CTRL, USER_CTRL_INIT);
 800503c:	2150      	movs	r1, #80	; 0x50
 800503e:	206a      	movs	r0, #106	; 0x6a
 8005040:	f000 f8ec 	bl	800521c <writeSPI>
	writeSPI(PWR_MGMT_1, 0x00);
 8005044:	2100      	movs	r1, #0
 8005046:	206b      	movs	r0, #107	; 0x6b
 8005048:	f000 f8e8 	bl	800521c <writeSPI>
	writeSPI(PWR_MGMT_1, 0x01);
 800504c:	2101      	movs	r1, #1
 800504e:	206b      	movs	r0, #107	; 0x6b
 8005050:	f000 f8e4 	bl	800521c <writeSPI>
	writeSPI(GYRO_CONFIG_AD, GYRO_INIT_SETTINGS);
 8005054:	2118      	movs	r1, #24
 8005056:	201b      	movs	r0, #27
 8005058:	f000 f8e0 	bl	800521c <writeSPI>
	writeSPI(ACCEL_CONFIG_1_AD, ACC_CONFIG_1_SETTINGS);
 800505c:	2108      	movs	r1, #8
 800505e:	201c      	movs	r0, #28
 8005060:	f000 f8dc 	bl	800521c <writeSPI>
	writeSPI(ACCEL_CONFIG_2_AD, ACC_CONFIG_2_SETTINGS);
 8005064:	2101      	movs	r1, #1
 8005066:	201d      	movs	r0, #29
 8005068:	f000 f8d8 	bl	800521c <writeSPI>
	writeSPI(CONFIG_AD, CONFIG_INIT);
 800506c:	2101      	movs	r1, #1
 800506e:	201a      	movs	r0, #26
 8005070:	f000 f8d4 	bl	800521c <writeSPI>
	writeSPI(FIFO_EN, FIFO_INIT);
 8005074:	21f8      	movs	r1, #248	; 0xf8
 8005076:	2023      	movs	r0, #35	; 0x23
 8005078:	f000 f8d0 	bl	800521c <writeSPI>
}
 800507c:	bf00      	nop
 800507e:	3720      	adds	r7, #32
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40020400 	.word	0x40020400
 8005088:	40003800 	.word	0x40003800

0800508c <readSingleSPI>:

uint8_t readSingleSPI(uint8_t address){
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
	address = address|rw;
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800509c:	71fb      	strb	r3, [r7, #7]

	// select the chip
	select();
 800509e:	2200      	movs	r2, #0
 80050a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80050a4:	4827      	ldr	r0, [pc, #156]	; (8005144 <readSingleSPI+0xb8>)
 80050a6:	f7fb fcfb 	bl	8000aa0 <GPIO_WriteBit>

	// wait for a transmission to come through
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE)==RESET);
 80050aa:	bf00      	nop
 80050ac:	2102      	movs	r1, #2
 80050ae:	4826      	ldr	r0, [pc, #152]	; (8005148 <readSingleSPI+0xbc>)
 80050b0:	f7fb ff20 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f8      	beq.n	80050ac <readSingleSPI+0x20>
	// send the address byte
	sendData(SPI2, address);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	4619      	mov	r1, r3
 80050c0:	4821      	ldr	r0, [pc, #132]	; (8005148 <readSingleSPI+0xbc>)
 80050c2:	f7fb ff08 	bl	8000ed6 <SPI_I2S_SendData>
	// wait to receive a byte
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_RXNE)==RESET);
 80050c6:	bf00      	nop
 80050c8:	2101      	movs	r1, #1
 80050ca:	481f      	ldr	r0, [pc, #124]	; (8005148 <readSingleSPI+0xbc>)
 80050cc:	f7fb ff12 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f8      	beq.n	80050c8 <readSingleSPI+0x3c>
	// receive the actual byte
	SPI_I2S_ReceiveData(SPI2);
 80050d6:	481c      	ldr	r0, [pc, #112]	; (8005148 <readSingleSPI+0xbc>)
 80050d8:	f7fb fef0 	bl	8000ebc <SPI_I2S_ReceiveData>
	// make sure the line is free
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE)==RESET);
 80050dc:	bf00      	nop
 80050de:	2102      	movs	r1, #2
 80050e0:	4819      	ldr	r0, [pc, #100]	; (8005148 <readSingleSPI+0xbc>)
 80050e2:	f7fb ff07 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f8      	beq.n	80050de <readSingleSPI+0x52>
	// send an empty byte (dummy data)
	sendData(SPI2, 0x00);
 80050ec:	2100      	movs	r1, #0
 80050ee:	4816      	ldr	r0, [pc, #88]	; (8005148 <readSingleSPI+0xbc>)
 80050f0:	f7fb fef1 	bl	8000ed6 <SPI_I2S_SendData>
	// wait to receive a byte
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_RXNE)==RESET);
 80050f4:	bf00      	nop
 80050f6:	2101      	movs	r1, #1
 80050f8:	4813      	ldr	r0, [pc, #76]	; (8005148 <readSingleSPI+0xbc>)
 80050fa:	f7fb fefb 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f8      	beq.n	80050f6 <readSingleSPI+0x6a>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_BSY));
 8005104:	bf00      	nop
 8005106:	2180      	movs	r1, #128	; 0x80
 8005108:	480f      	ldr	r0, [pc, #60]	; (8005148 <readSingleSPI+0xbc>)
 800510a:	f7fb fef3 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f8      	bne.n	8005106 <readSingleSPI+0x7a>
	// deselect the chip
	for(int i = 0; i<5;i++);
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e002      	b.n	8005120 <readSingleSPI+0x94>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b04      	cmp	r3, #4
 8005124:	ddf9      	ble.n	800511a <readSingleSPI+0x8e>
	deselect();
 8005126:	2201      	movs	r2, #1
 8005128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800512c:	4805      	ldr	r0, [pc, #20]	; (8005144 <readSingleSPI+0xb8>)
 800512e:	f7fb fcb7 	bl	8000aa0 <GPIO_WriteBit>

	// return the SPI data
	return SPI2->DR;
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <readSingleSPI+0xbc>)
 8005134:	899b      	ldrh	r3, [r3, #12]
 8005136:	b29b      	uxth	r3, r3
 8005138:	b2db      	uxtb	r3, r3
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40020400 	.word	0x40020400
 8005148:	40003800 	.word	0x40003800

0800514c <readMultipleSPI>:

void readMultipleSPI(uint8_t address, uint8_t *readBuf, uint8_t bytes){
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	6039      	str	r1, [r7, #0]
 8005156:	71fb      	strb	r3, [r7, #7]
 8005158:	4613      	mov	r3, r2
 800515a:	71bb      	strb	r3, [r7, #6]
	address = address|rw;
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005162:	71fb      	strb	r3, [r7, #7]
	select();
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800516a:	482a      	ldr	r0, [pc, #168]	; (8005214 <readMultipleSPI+0xc8>)
 800516c:	f7fb fc98 	bl	8000aa0 <GPIO_WriteBit>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE)==RESET);
 8005170:	bf00      	nop
 8005172:	2102      	movs	r1, #2
 8005174:	4828      	ldr	r0, [pc, #160]	; (8005218 <readMultipleSPI+0xcc>)
 8005176:	f7fb febd 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f8      	beq.n	8005172 <readMultipleSPI+0x26>
	sendData(SPI2, address);
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	b29b      	uxth	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	4824      	ldr	r0, [pc, #144]	; (8005218 <readMultipleSPI+0xcc>)
 8005188:	f7fb fea5 	bl	8000ed6 <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_FLAG_RXNE)==RESET);
 800518c:	bf00      	nop
 800518e:	2101      	movs	r1, #1
 8005190:	4821      	ldr	r0, [pc, #132]	; (8005218 <readMultipleSPI+0xcc>)
 8005192:	f7fb feaf 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f8      	beq.n	800518e <readMultipleSPI+0x42>
	for(uint8_t i = 0; i<bytes;i++){
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e021      	b.n	80051e6 <readMultipleSPI+0x9a>
		address++;
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	3301      	adds	r3, #1
 80051a6:	71fb      	strb	r3, [r7, #7]
		while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE)==RESET);
 80051a8:	bf00      	nop
 80051aa:	2102      	movs	r1, #2
 80051ac:	481a      	ldr	r0, [pc, #104]	; (8005218 <readMultipleSPI+0xcc>)
 80051ae:	f7fb fea1 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f8      	beq.n	80051aa <readMultipleSPI+0x5e>
		sendData(SPI2, 0x00);
 80051b8:	2100      	movs	r1, #0
 80051ba:	4817      	ldr	r0, [pc, #92]	; (8005218 <readMultipleSPI+0xcc>)
 80051bc:	f7fb fe8b 	bl	8000ed6 <SPI_I2S_SendData>
		while(SPI_I2S_GetFlagStatus(SPI2,SPI_FLAG_RXNE)==RESET);
 80051c0:	bf00      	nop
 80051c2:	2101      	movs	r1, #1
 80051c4:	4814      	ldr	r0, [pc, #80]	; (8005218 <readMultipleSPI+0xcc>)
 80051c6:	f7fb fe95 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f8      	beq.n	80051c2 <readMultipleSPI+0x76>
		readBuf[i] = SPI2->DR;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	4a10      	ldr	r2, [pc, #64]	; (8005218 <readMultipleSPI+0xcc>)
 80051d8:	8992      	ldrh	r2, [r2, #12]
 80051da:	b292      	uxth	r2, r2
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<bytes;i++){
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	3301      	adds	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	79bb      	ldrb	r3, [r7, #6]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d3d9      	bcc.n	80051a2 <readMultipleSPI+0x56>
	}
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_BSY));
 80051ee:	bf00      	nop
 80051f0:	2180      	movs	r1, #128	; 0x80
 80051f2:	4809      	ldr	r0, [pc, #36]	; (8005218 <readMultipleSPI+0xcc>)
 80051f4:	f7fb fe7e 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f8      	bne.n	80051f0 <readMultipleSPI+0xa4>
	deselect();
 80051fe:	2201      	movs	r2, #1
 8005200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005204:	4803      	ldr	r0, [pc, #12]	; (8005214 <readMultipleSPI+0xc8>)
 8005206:	f7fb fc4b 	bl	8000aa0 <GPIO_WriteBit>

}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40020400 	.word	0x40020400
 8005218:	40003800 	.word	0x40003800

0800521c <writeSPI>:

void writeSPI(uint8_t address, uint8_t data){
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	460a      	mov	r2, r1
 8005226:	71fb      	strb	r3, [r7, #7]
 8005228:	4613      	mov	r3, r2
 800522a:	71bb      	strb	r3, [r7, #6]
	address = address;
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE)==RESET);
 800522c:	bf00      	nop
 800522e:	2102      	movs	r1, #2
 8005230:	4829      	ldr	r0, [pc, #164]	; (80052d8 <writeSPI+0xbc>)
 8005232:	f7fb fe5f 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f8      	beq.n	800522e <writeSPI+0x12>
	select();
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005242:	4826      	ldr	r0, [pc, #152]	; (80052dc <writeSPI+0xc0>)
 8005244:	f7fb fc2c 	bl	8000aa0 <GPIO_WriteBit>
	sendData(SPI2, address);
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	b29b      	uxth	r3, r3
 800524c:	4619      	mov	r1, r3
 800524e:	4822      	ldr	r0, [pc, #136]	; (80052d8 <writeSPI+0xbc>)
 8005250:	f7fb fe41 	bl	8000ed6 <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE)==RESET);
 8005254:	bf00      	nop
 8005256:	2102      	movs	r1, #2
 8005258:	481f      	ldr	r0, [pc, #124]	; (80052d8 <writeSPI+0xbc>)
 800525a:	f7fb fe4b 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f8      	beq.n	8005256 <writeSPI+0x3a>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8005264:	bf00      	nop
 8005266:	2101      	movs	r1, #1
 8005268:	481b      	ldr	r0, [pc, #108]	; (80052d8 <writeSPI+0xbc>)
 800526a:	f7fb fe43 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f8      	beq.n	8005266 <writeSPI+0x4a>
	sendData(SPI2, data);
 8005274:	79bb      	ldrb	r3, [r7, #6]
 8005276:	b29b      	uxth	r3, r3
 8005278:	4619      	mov	r1, r3
 800527a:	4817      	ldr	r0, [pc, #92]	; (80052d8 <writeSPI+0xbc>)
 800527c:	f7fb fe2b 	bl	8000ed6 <SPI_I2S_SendData>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_TXE)==RESET);
 8005280:	bf00      	nop
 8005282:	2102      	movs	r1, #2
 8005284:	4814      	ldr	r0, [pc, #80]	; (80052d8 <writeSPI+0xbc>)
 8005286:	f7fb fe35 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f8      	beq.n	8005282 <writeSPI+0x66>
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8005290:	bf00      	nop
 8005292:	2101      	movs	r1, #1
 8005294:	4810      	ldr	r0, [pc, #64]	; (80052d8 <writeSPI+0xbc>)
 8005296:	f7fb fe2d 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f8      	beq.n	8005292 <writeSPI+0x76>
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_BSY));
 80052a0:	bf00      	nop
 80052a2:	2180      	movs	r1, #128	; 0x80
 80052a4:	480c      	ldr	r0, [pc, #48]	; (80052d8 <writeSPI+0xbc>)
 80052a6:	f7fb fe25 	bl	8000ef4 <SPI_I2S_GetFlagStatus>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f8      	bne.n	80052a2 <writeSPI+0x86>
	for(int i = 0; i <5; i++);
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e002      	b.n	80052bc <writeSPI+0xa0>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	ddf9      	ble.n	80052b6 <writeSPI+0x9a>
	deselect();
 80052c2:	2201      	movs	r2, #1
 80052c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052c8:	4804      	ldr	r0, [pc, #16]	; (80052dc <writeSPI+0xc0>)
 80052ca:	f7fb fbe9 	bl	8000aa0 <GPIO_WriteBit>
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40003800 	.word	0x40003800
 80052dc:	40020400 	.word	0x40020400

080052e0 <swap>:
	}
	while(SPI_I2S_GetFlagStatus(SPI2,SPI_I2S_FLAG_BSY));
	deselect();
}

void swap (uint8_t *array, int num){
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<num; i=i+2){
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e016      	b.n	800531e <swap+0x3e>
		uint8_t temp = array[i];
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	72fb      	strb	r3, [r7, #11]
		array[i] = array[i+1];
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	4413      	add	r3, r2
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	3201      	adds	r2, #1
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	440a      	add	r2, r1
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	701a      	strb	r2, [r3, #0]
		array[i+1] = temp;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4413      	add	r3, r2
 8005314:	7afa      	ldrb	r2, [r7, #11]
 8005316:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<num; i=i+2){
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3302      	adds	r3, #2
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	dbe4      	blt.n	80052f0 <swap+0x10>
	}
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <TIM7_INIT>:
 *      Author: Stuart Lunt
 */

#include "control.h"

void TIM7_INIT(void){
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
	/*Initialise TIM7 on APB1 @ 48MHz*/
	TIM_TimeBaseInitTypeDef TIM_BaseStruct;

	//Enable clocks
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 800533a:	2101      	movs	r1, #1
 800533c:	2020      	movs	r0, #32
 800533e:	f7fb fcf9 	bl	8000d34 <RCC_APB1PeriphClockCmd>

	//Reset values to default
	TIM_TimeBaseStructInit(&TIM_BaseStruct);
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f7fb fe5d 	bl	8001004 <TIM_TimeBaseStructInit>

	//set up timer for 1kHz
	TIM_BaseStruct.TIM_Prescaler = 39; //Timer frequency = 84/(prescaler+1)	3 = 1khz
 800534a:	2327      	movs	r3, #39	; 0x27
 800534c:	80bb      	strh	r3, [r7, #4]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 800534e:	2300      	movs	r3, #0
 8005350:	80fb      	strh	r3, [r7, #6]
	TIM_BaseStruct.TIM_Period = 20999; // 21MHz/1kHz - 1
 8005352:	f245 2307 	movw	r3, #20999	; 0x5207
 8005356:	60bb      	str	r3, [r7, #8]
	TIM_BaseStruct.TIM_ClockDivision = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	81bb      	strh	r3, [r7, #12]
	TIM_BaseStruct.TIM_RepetitionCounter = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	73bb      	strb	r3, [r7, #14]

	//Initialize TIM7
	TIM_TimeBaseInit(TIM7, &TIM_BaseStruct);
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4809      	ldr	r0, [pc, #36]	; (800538c <TIM7_INIT+0x58>)
 8005366:	f7fb fde1 	bl	8000f2c <TIM_TimeBaseInit>

	TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);
 800536a:	2201      	movs	r2, #1
 800536c:	2101      	movs	r1, #1
 800536e:	4807      	ldr	r0, [pc, #28]	; (800538c <TIM7_INIT+0x58>)
 8005370:	f7fb ff32 	bl	80011d8 <TIM_ITConfig>
	//Start TIM7
	TIM_Cmd(TIM7, ENABLE);
 8005374:	2101      	movs	r1, #1
 8005376:	4805      	ldr	r0, [pc, #20]	; (800538c <TIM7_INIT+0x58>)
 8005378:	f7fb fe78 	bl	800106c <TIM_Cmd>

	run = 0;
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <TIM7_INIT+0x5c>)
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40001400 	.word	0x40001400
 8005390:	20000b98 	.word	0x20000b98

08005394 <TIM7_NVIC_Init>:

void TIM7_NVIC_Init(void){
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	NVIC_InitStruct.NVIC_IRQChannel = TIM7_IRQn;
 800539a:	2337      	movs	r3, #55	; 0x37
 800539c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800539e:	2301      	movs	r3, #1
 80053a0:	71fb      	strb	r3, [r7, #7]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC_InitStruct);
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fa ff1f 	bl	80001f0 <NVIC_Init>
}
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <TIM7_IRQHandler>:

void TIM7_IRQHandler(void){
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
	run = 1;
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <TIM7_IRQHandler+0x18>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]
	TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 80053c6:	2101      	movs	r1, #1
 80053c8:	4803      	ldr	r0, [pc, #12]	; (80053d8 <TIM7_IRQHandler+0x1c>)
 80053ca:	f7fb ff29 	bl	8001220 <TIM_ClearITPendingBit>
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000b98 	.word	0x20000b98
 80053d8:	40001400 	.word	0x40001400

080053dc <start>:

//Check status of the loop control variable
int start(){
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
	return run;
 80053e0:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <start+0x14>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000b98 	.word	0x20000b98

080053f4 <reset>:

//Resets the loop control variable
void reset(){
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
	run =0;
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <reset+0x14>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20000b98 	.word	0x20000b98

0800540c <ENCODER_Init>:
 *      Updated: Stuart Lunt
 */

#include "encoder.h"

void ENCODER_Init(){
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
	 *
	 * TIM2_CH1  PA15
	 * TIM2_CH2  PB3
	 */

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8005412:	2101      	movs	r1, #1
 8005414:	2002      	movs	r0, #2
 8005416:	f7fb fc4d 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800541a:	2101      	movs	r1, #1
 800541c:	2001      	movs	r0, #1
 800541e:	f7fb fc49 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8005422:	2101      	movs	r1, #1
 8005424:	2001      	movs	r0, #1
 8005426:	f7fb fc85 	bl	8000d34 <RCC_APB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800542a:	2302      	movs	r3, #2
 800542c:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800542e:	2303      	movs	r3, #3
 8005430:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005432:	2300      	movs	r3, #0
 8005434:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 800543a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543e:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005440:	f107 0310 	add.w	r3, r7, #16
 8005444:	4619      	mov	r1, r3
 8005446:	481d      	ldr	r0, [pc, #116]	; (80054bc <ENCODER_Init+0xb0>)
 8005448:	f7fb fa68 	bl	800091c <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 800544c:	2308      	movs	r3, #8
 800544e:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005450:	f107 0310 	add.w	r3, r7, #16
 8005454:	4619      	mov	r1, r3
 8005456:	481a      	ldr	r0, [pc, #104]	; (80054c0 <ENCODER_Init+0xb4>)
 8005458:	f7fb fa60 	bl	800091c <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_TIM2);
 800545c:	2201      	movs	r2, #1
 800545e:	210f      	movs	r1, #15
 8005460:	4816      	ldr	r0, [pc, #88]	; (80054bc <ENCODER_Init+0xb0>)
 8005462:	f7fb fb35 	bl	8000ad0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_TIM2);
 8005466:	2201      	movs	r2, #1
 8005468:	2103      	movs	r1, #3
 800546a:	4815      	ldr	r0, [pc, #84]	; (80054c0 <ENCODER_Init+0xb4>)
 800546c:	f7fb fb30 	bl	8000ad0 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 0xffffffff;
 8005470:	f04f 33ff 	mov.w	r3, #4294967295
 8005474:	60bb      	str	r3, [r7, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	80bb      	strh	r3, [r7, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800547e:	2300      	movs	r3, #0
 8005480:	80fb      	strh	r3, [r7, #6]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	4619      	mov	r1, r3
 8005486:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800548a:	f7fb fd4f 	bl	8000f2c <TIM_TimeBaseInit>

	/* Configure the timer */
	TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 800548e:	2300      	movs	r3, #0
 8005490:	2200      	movs	r2, #0
 8005492:	2103      	movs	r1, #3
 8005494:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8005498:	f7fb fed3 	bl	8001242 <TIM_EncoderInterfaceConfig>

	TIM_SetCounter(TIM2, 0x7fffffff); //setting counter to prevent overflow //remember to change in EKF
 800549c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80054a4:	f7fb fdc8 	bl	8001038 <TIM_SetCounter>

	/* TIM4 counter enable */
	TIM_Cmd(TIM2, ENABLE);
 80054a8:	2101      	movs	r1, #1
 80054aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80054ae:	f7fb fddd 	bl	800106c <TIM_Cmd>

}
 80054b2:	bf00      	nop
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40020000 	.word	0x40020000
 80054c0:	40020400 	.word	0x40020400

080054c4 <loggingInit>:
//DMA buffer data



//Initialise UART and DMA
void loggingInit(){
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b096      	sub	sp, #88	; 0x58
 80054c8:	af00      	add	r7, sp, #0
		USART_InitTypeDef USART_InitStruct;
		GPIO_InitTypeDef GPIO_InitStruct;
		DMA_InitTypeDef DMA_InitStruct;
		NVIC_InitTypeDef NVIC_InitStruct;

		USART_BaudRate = 230400;
 80054ca:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <loggingInit+0x130>)
 80054cc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80054d0:	601a      	str	r2, [r3, #0]

		// enable clocks
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80054d2:	2101      	movs	r1, #1
 80054d4:	2002      	movs	r0, #2
 80054d6:	f7fb fbed 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80054da:	2101      	movs	r1, #1
 80054dc:	2010      	movs	r0, #16
 80054de:	f7fb fc49 	bl	8000d74 <RCC_APB2PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80054e2:	2101      	movs	r1, #1
 80054e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80054e8:	f7fb fbe4 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);
 80054ec:	2101      	movs	r1, #1
 80054ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80054f2:	f7fb fbdf 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>

		// init pins
		GPIO_StructInit(&GPIO_InitStruct);
 80054f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fb fa9c 	bl	8000a38 <GPIO_StructInit>

		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8005500:	23c0      	movs	r3, #192	; 0xc0
 8005502:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8005504:	2302      	movs	r3, #2
 8005506:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8005516:	2303      	movs	r3, #3
 8005518:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005520:	4619      	mov	r1, r3
 8005522:	4835      	ldr	r0, [pc, #212]	; (80055f8 <loggingInit+0x134>)
 8005524:	f7fb f9fa 	bl	800091c <GPIO_Init>

		// selective alternative functions
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 8005528:	2207      	movs	r2, #7
 800552a:	2106      	movs	r1, #6
 800552c:	4832      	ldr	r0, [pc, #200]	; (80055f8 <loggingInit+0x134>)
 800552e:	f7fb facf 	bl	8000ad0 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8005532:	2207      	movs	r2, #7
 8005534:	2107      	movs	r1, #7
 8005536:	4830      	ldr	r0, [pc, #192]	; (80055f8 <loggingInit+0x134>)
 8005538:	f7fb faca 	bl	8000ad0 <GPIO_PinAFConfig>

		// init  UART


		USART_InitStruct.USART_BaudRate = USART_BaudRate;
 800553c:	4b2d      	ldr	r3, [pc, #180]	; (80055f4 <loggingInit+0x130>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	64bb      	str	r3, [r7, #72]	; 0x48
		USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005542:	2300      	movs	r3, #0
 8005544:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8005548:	230c      	movs	r3, #12
 800554a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		USART_InitStruct.USART_Parity = USART_Parity_No;
 800554e:	2300      	movs	r3, #0
 8005550:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8005554:	2300      	movs	r3, #0
 8005556:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 800555a:	2300      	movs	r3, #0
 800555c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

		USART_Init(USART1, &USART_InitStruct);
 8005560:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005564:	4619      	mov	r1, r3
 8005566:	4825      	ldr	r0, [pc, #148]	; (80055fc <loggingInit+0x138>)
 8005568:	f7fb feb8 	bl	80012dc <USART_Init>



//		/* Configure DMA for USART TX, DMA2, Stream7, Channel4 */
		DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)DMA_TX_Buffer;
 800556c:	4b24      	ldr	r3, [pc, #144]	; (8005600 <loggingInit+0x13c>)
 800556e:	60fb      	str	r3, [r7, #12]
		DMA_InitStruct.DMA_BufferSize = DMA_TX_BUFFER_SIZE;
 8005570:	2328      	movs	r3, #40	; 0x28
 8005572:	617b      	str	r3, [r7, #20]
		DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&USART1->DR;
 8005574:	4b23      	ldr	r3, [pc, #140]	; (8005604 <loggingInit+0x140>)
 8005576:	60bb      	str	r3, [r7, #8]
		DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8005578:	2340      	movs	r3, #64	; 0x40
 800557a:	613b      	str	r3, [r7, #16]
		DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800557c:	2300      	movs	r3, #0
 800557e:	61bb      	str	r3, [r7, #24]
		DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8005580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005584:	61fb      	str	r3, [r7, #28]
		DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005586:	2300      	movs	r3, #0
 8005588:	623b      	str	r3, [r7, #32]
		DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
		DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 800558e:	2300      	movs	r3, #0
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
		DMA_InitStruct.DMA_Priority = DMA_Priority_VeryHigh;
 8005592:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
		DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8005598:	2300      	movs	r3, #0
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
		DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 800559c:	2303      	movs	r3, #3
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
		DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80055a0:	2300      	movs	r3, #0
 80055a2:	63bb      	str	r3, [r7, #56]	; 0x38
		DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80055a4:	2300      	movs	r3, #0
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		DMA_InitStruct.DMA_Channel = DMA_Channel_4;
 80055a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ac:	607b      	str	r3, [r7, #4]

		DMA_Init(DMA2_Stream7, &DMA_InitStruct);
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4815      	ldr	r0, [pc, #84]	; (8005608 <loggingInit+0x144>)
 80055b4:	f7fb f844 	bl	8000640 <DMA_Init>

//		USART_ITConfig(USART1, USART_IT_TC, ENABLE);
		DMA_ITConfig(DMA2_Stream7, DMA_IT_TC, ENABLE);
 80055b8:	2201      	movs	r2, #1
 80055ba:	2110      	movs	r1, #16
 80055bc:	4812      	ldr	r0, [pc, #72]	; (8005608 <loggingInit+0x144>)
 80055be:	f7fb f935 	bl	800082c <DMA_ITConfig>

//		/* Enable global interrupts for DMA stream */
		NVIC_InitStruct.NVIC_IRQChannel = DMA2_Stream7_IRQn;
 80055c2:	2346      	movs	r3, #70	; 0x46
 80055c4:	703b      	strb	r3, [r7, #0]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	70fb      	strb	r3, [r7, #3]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80055ca:	2300      	movs	r3, #0
 80055cc:	707b      	strb	r3, [r7, #1]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	70bb      	strb	r3, [r7, #2]
		NVIC_Init(&NVIC_InitStruct);
 80055d2:	463b      	mov	r3, r7
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fa fe0b 	bl	80001f0 <NVIC_Init>

//		/* Enable transfer complete interrupt */


		USART_DMACmd(USART1, USART_DMAReq_Tx, ENABLE);
 80055da:	2201      	movs	r2, #1
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	4807      	ldr	r0, [pc, #28]	; (80055fc <loggingInit+0x138>)
 80055e0:	f7fb ff56 	bl	8001490 <USART_DMACmd>
		/* Enable USART */
		USART_Cmd(USART1, ENABLE);
 80055e4:	2101      	movs	r1, #1
 80055e6:	4805      	ldr	r0, [pc, #20]	; (80055fc <loggingInit+0x138>)
 80055e8:	f7fb ff32 	bl	8001450 <USART_Cmd>
}
 80055ec:	bf00      	nop
 80055ee:	3758      	adds	r7, #88	; 0x58
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000b9c 	.word	0x20000b9c
 80055f8:	40020400 	.word	0x40020400
 80055fc:	40011000 	.word	0x40011000
 8005600:	20000ba0 	.word	0x20000ba0
 8005604:	40011004 	.word	0x40011004
 8005608:	400264b8 	.word	0x400264b8

0800560c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	DMA_Cmd(DMA2_Stream7, DISABLE);
 8005610:	2100      	movs	r1, #0
 8005612:	4804      	ldr	r0, [pc, #16]	; (8005624 <DMA2_Stream7_IRQHandler+0x18>)
 8005614:	f7fb f86c 	bl	80006f0 <DMA_Cmd>
	DMA_ClearITPendingBit(DMA2_Stream7, DMA_IT_TCIF7);
 8005618:	4903      	ldr	r1, [pc, #12]	; (8005628 <DMA2_Stream7_IRQHandler+0x1c>)
 800561a:	4802      	ldr	r0, [pc, #8]	; (8005624 <DMA2_Stream7_IRQHandler+0x18>)
 800561c:	f7fb f940 	bl	80008a0 <DMA_ClearITPendingBit>
}
 8005620:	bf00      	nop
 8005622:	bd80      	pop	{r7, pc}
 8005624:	400264b8 	.word	0x400264b8
 8005628:	28008000 	.word	0x28008000

0800562c <serialTerminal_packetize>:

CommsTask_TransmitPacketStruct serialTerminal_packetize(uint8_t* payload_to_pack, uint16_t length_of_payload)
{
 800562c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800562e:	b091      	sub	sp, #68	; 0x44
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  CommsTask_TransmitPacketStruct pkt_to_tx;
  uint16_t raw_data_pointer = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t packet_data_pointer = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint8_t char_to_pack;
  memset(pkt_to_tx.data, 0, COMMS_TX_BUFFER_SIZE);
 8005642:	f107 0310 	add.w	r3, r7, #16
 8005646:	2228      	movs	r2, #40	; 0x28
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fbcc 	bl	8005de8 <memset>

  //put start char
  pkt_to_tx.data[packet_data_pointer++] = 0x7E; //0x7E = '~'
 8005650:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8005656:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800565a:	4413      	add	r3, r2
 800565c:	227e      	movs	r2, #126	; 0x7e
 800565e:	f803 2c30 	strb.w	r2, [r3, #-48]

  //put opcode 0x23 = '#'
  pkt_to_tx.data[packet_data_pointer++] = 0x23;
 8005662:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8005668:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800566c:	4413      	add	r3, r2
 800566e:	2223      	movs	r2, #35	; 0x23
 8005670:	f803 2c30 	strb.w	r2, [r3, #-48]

  //put data
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payload; raw_data_pointer++, packet_data_pointer++)
 8005674:	2300      	movs	r3, #0
 8005676:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005678:	e03d      	b.n	80056f6 <serialTerminal_packetize+0xca>
  { //for both bytes of the pkt_code,
    char_to_pack = payload_to_pack[raw_data_pointer];
 800567a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	4413      	add	r3, r2
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (char_to_pack == 0x7E)
 8005686:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800568a:	2b7e      	cmp	r3, #126	; 0x7e
 800568c:	d110      	bne.n	80056b0 <serialTerminal_packetize+0x84>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 800568e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8005694:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005698:	4413      	add	r3, r2
 800569a:	227d      	movs	r2, #125	; 0x7d
 800569c:	f803 2c30 	strb.w	r2, [r3, #-48]
      pkt_to_tx.data[packet_data_pointer] = 0x5E;
 80056a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80056a6:	4413      	add	r3, r2
 80056a8:	225e      	movs	r2, #94	; 0x5e
 80056aa:	f803 2c30 	strb.w	r2, [r3, #-48]
 80056ae:	e01c      	b.n	80056ea <serialTerminal_packetize+0xbe>
    }
    else if (char_to_pack == 0x7D)
 80056b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80056b4:	2b7d      	cmp	r3, #125	; 0x7d
 80056b6:	d110      	bne.n	80056da <serialTerminal_packetize+0xae>
    {
      pkt_to_tx.data[packet_data_pointer++] = 0x7D;
 80056b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	87ba      	strh	r2, [r7, #60]	; 0x3c
 80056be:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80056c2:	4413      	add	r3, r2
 80056c4:	227d      	movs	r2, #125	; 0x7d
 80056c6:	f803 2c30 	strb.w	r2, [r3, #-48]
      pkt_to_tx.data[packet_data_pointer] = 0x5D;
 80056ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80056d0:	4413      	add	r3, r2
 80056d2:	225d      	movs	r2, #93	; 0x5d
 80056d4:	f803 2c30 	strb.w	r2, [r3, #-48]
 80056d8:	e007      	b.n	80056ea <serialTerminal_packetize+0xbe>
    }
    else
    {
      pkt_to_tx.data[packet_data_pointer] = char_to_pack;
 80056da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80056e0:	4413      	add	r3, r2
 80056e2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80056e6:	f803 2c30 	strb.w	r2, [r3, #-48]
  for (raw_data_pointer = 0; raw_data_pointer < length_of_payload; raw_data_pointer++, packet_data_pointer++)
 80056ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80056ec:	3301      	adds	r3, #1
 80056ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80056f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056f2:	3301      	adds	r3, #1
 80056f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80056f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3bd      	bcc.n	800567a <serialTerminal_packetize+0x4e>
    }
  }

  //put end char
  pkt_to_tx.data[packet_data_pointer++] = 0x7E;
 80056fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	87ba      	strh	r2, [r7, #60]	; 0x3c
 8005704:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005708:	4413      	add	r3, r2
 800570a:	227e      	movs	r2, #126	; 0x7e
 800570c:	f803 2c30 	strb.w	r2, [r3, #-48]

  //set pkt length
  pkt_to_tx.bytes_to_tx = packet_data_pointer;
 8005710:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005712:	873b      	strh	r3, [r7, #56]	; 0x38

  return pkt_to_tx;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f107 0410 	add.w	r4, r7, #16
 800571a:	469e      	mov	lr, r3
 800571c:	f104 0c20 	add.w	ip, r4, #32
 8005720:	4675      	mov	r5, lr
 8005722:	4626      	mov	r6, r4
 8005724:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005726:	6028      	str	r0, [r5, #0]
 8005728:	6069      	str	r1, [r5, #4]
 800572a:	60aa      	str	r2, [r5, #8]
 800572c:	60eb      	str	r3, [r5, #12]
 800572e:	3410      	adds	r4, #16
 8005730:	f10e 0e10 	add.w	lr, lr, #16
 8005734:	4564      	cmp	r4, ip
 8005736:	d1f3      	bne.n	8005720 <serialTerminal_packetize+0xf4>
 8005738:	4672      	mov	r2, lr
 800573a:	4623      	mov	r3, r4
 800573c:	cb03      	ldmia	r3!, {r0, r1}
 800573e:	6010      	str	r0, [r2, #0]
 8005740:	6051      	str	r1, [r2, #4]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	8113      	strh	r3, [r2, #8]
}
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	3744      	adds	r7, #68	; 0x44
 800574a:	46bd      	mov	sp, r7
 800574c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005750 <main>:
 **  Abstract: main program
 **
 **===========================================================================
 */
int main(void)
{
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	b09d      	sub	sp, #116	; 0x74
 8005754:	af00      	add	r7, sp, #0
	TIM7_INIT();
 8005756:	f7ff fded 	bl	8005334 <TIM7_INIT>
	TIM7_NVIC_Init();
 800575a:	f7ff fe1b 	bl	8005394 <TIM7_NVIC_Init>
	ENCODER_Init();
 800575e:	f7ff fe55 	bl	800540c <ENCODER_Init>
	uint32_t m=0;
 8005762:	2300      	movs	r3, #0
 8005764:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t n=0;
 8005766:	2300      	movs	r3, #0
 8005768:	66bb      	str	r3, [r7, #104]	; 0x68
	for(m=0;m<65000;m++)
 800576a:	2300      	movs	r3, #0
 800576c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800576e:	e00e      	b.n	800578e <main+0x3e>
	{
		for(n=0;n<650;n++)
 8005770:	2300      	movs	r3, #0
 8005772:	66bb      	str	r3, [r7, #104]	; 0x68
 8005774:	e003      	b.n	800577e <main+0x2e>
		{
			asm("nop");
 8005776:	bf00      	nop
		for(n=0;n<650;n++)
 8005778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800577a:	3301      	adds	r3, #1
 800577c:	66bb      	str	r3, [r7, #104]	; 0x68
 800577e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005780:	f240 2289 	movw	r2, #649	; 0x289
 8005784:	4293      	cmp	r3, r2
 8005786:	d9f6      	bls.n	8005776 <main+0x26>
	for(m=0;m<65000;m++)
 8005788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578a:	3301      	adds	r3, #1
 800578c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800578e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005790:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8005794:	4293      	cmp	r3, r2
 8005796:	d9eb      	bls.n	8005770 <main+0x20>
		}
	}
	initSPI();
 8005798:	f7ff fbce 	bl	8004f38 <initSPI>
	PWM_Init();
 800579c:	f000 f912 	bl	80059c4 <PWM_Init>
	loggingInit();
 80057a0:	f7ff fe90 	bl	80054c4 <loggingInit>
	ADC_DeInit();
 80057a4:	f7fa fd86 	bl	80002b4 <ADC_DeInit>
	initADC();
 80057a8:	f7ff fb62 	bl	8004e70 <initADC>
	setDutyCycle(10);
 80057ac:	200a      	movs	r0, #10
 80057ae:	f000 f971 	bl	8005a94 <setDutyCycle>

	//Initalise USB VCP
	TM_USB_VCP_Init();
 80057b2:	f000 fa8d 	bl	8005cd0 <TM_USB_VCP_Init>

	GPIO_InitTypeDef GPIO_InitDef;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80057b6:	2101      	movs	r1, #1
 80057b8:	2001      	movs	r0, #1
 80057ba:	f7fb fa7b 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>
	//Pin 0
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_0;
 80057be:	2301      	movs	r3, #1
 80057c0:	663b      	str	r3, [r7, #96]	; 0x60
	//Mode output
	GPIO_InitDef.GPIO_Mode = GPIO_Mode_IN;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	//Output type push-pull
	GPIO_InitDef.GPIO_OType = GPIO_OType_PP;
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	//With pull down resistor
	GPIO_InitDef.GPIO_PuPd = GPIO_PuPd_DOWN;
 80057ce:	2302      	movs	r3, #2
 80057d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	//50MHz pin speed
	GPIO_InitDef.GPIO_Speed = GPIO_Speed_50MHz;
 80057d4:	2302      	movs	r3, #2
 80057d6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Initialize pin on GPIOA port
	GPIO_Init(GPIOA, &GPIO_InitDef);
 80057da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80057de:	4619      	mov	r1, r3
 80057e0:	4866      	ldr	r0, [pc, #408]	; (800597c <main+0x22c>)
 80057e2:	f7fb f89b 	bl	800091c <GPIO_Init>
	GPIO_WriteBit(GPIOD, GPIO_Pin_2, Bit_SET);
 80057e6:	2201      	movs	r2, #1
 80057e8:	2104      	movs	r1, #4
 80057ea:	4865      	ldr	r0, [pc, #404]	; (8005980 <main+0x230>)
 80057ec:	f7fb f958 	bl	8000aa0 <GPIO_WriteBit>
	 *  Otherwise the interrupt table located in flash will be used.
	 *  See also the <system_*.c> file and how the SystemInit() function updates
	 *  SCB->VTOR register.
	 *  E.g.  SCB->VTOR = 0x20000000;
	 */
	setDutyCycle(30);
 80057f0:	201e      	movs	r0, #30
 80057f2:	f000 f94f 	bl	8005a94 <setDutyCycle>
	volatile int power1 = readSingleSPI(107);
 80057f6:	206b      	movs	r0, #107	; 0x6b
 80057f8:	f7ff fc48 	bl	800508c <readSingleSPI>
 80057fc:	4603      	mov	r3, r0
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c
	volatile int power2 = readSingleSPI(108);
 8005800:	206c      	movs	r0, #108	; 0x6c
 8005802:	f7ff fc43 	bl	800508c <readSingleSPI>
 8005806:	4603      	mov	r3, r0
 8005808:	65bb      	str	r3, [r7, #88]	; 0x58
	volatile int whoami = readSingleSPI(117);
 800580a:	2075      	movs	r0, #117	; 0x75
 800580c:	f7ff fc3e 	bl	800508c <readSingleSPI>
 8005810:	4603      	mov	r3, r0
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
	volatile int fifo = readSingleSPI(35);
 8005814:	2023      	movs	r0, #35	; 0x23
 8005816:	f7ff fc39 	bl	800508c <readSingleSPI>
 800581a:	4603      	mov	r3, r0
 800581c:	653b      	str	r3, [r7, #80]	; 0x50
	/* Infinite loop */
	while (1){
		loopCount++;
 800581e:	4b59      	ldr	r3, [pc, #356]	; (8005984 <main+0x234>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	4b57      	ldr	r3, [pc, #348]	; (8005984 <main+0x234>)
 8005828:	801a      	strh	r2, [r3, #0]
		count = TIM_GetCounter(TIM2);
 800582a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800582e:	f7fb fc11 	bl	8001054 <TIM_GetCounter>
 8005832:	4602      	mov	r2, r0
 8005834:	4b54      	ldr	r3, [pc, #336]	; (8005988 <main+0x238>)
 8005836:	601a      	str	r2, [r3, #0]
		current = readADC();
 8005838:	f7ff fb68 	bl	8004f0c <readADC>
 800583c:	4603      	mov	r3, r0
 800583e:	461a      	mov	r2, r3
 8005840:	4b52      	ldr	r3, [pc, #328]	; (800598c <main+0x23c>)
 8005842:	801a      	strh	r2, [r3, #0]

		if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)) {
 8005844:	2101      	movs	r1, #1
 8005846:	484d      	ldr	r0, [pc, #308]	; (800597c <main+0x22c>)
 8005848:	f7fb f910 	bl	8000a6c <GPIO_ReadInputDataBit>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d026      	beq.n	80058a0 <main+0x150>
			if(pwm == 50){
 8005852:	4b4f      	ldr	r3, [pc, #316]	; (8005990 <main+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b32      	cmp	r3, #50	; 0x32
 8005858:	d103      	bne.n	8005862 <main+0x112>
				pwm = 0;
 800585a:	4b4d      	ldr	r3, [pc, #308]	; (8005990 <main+0x240>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e002      	b.n	8005868 <main+0x118>
			} else {
				pwm = 50;
 8005862:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <main+0x240>)
 8005864:	2232      	movs	r2, #50	; 0x32
 8005866:	601a      	str	r2, [r3, #0]
			}
			for(m=0;m<65000;m++)
 8005868:	2300      	movs	r3, #0
 800586a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800586c:	e00e      	b.n	800588c <main+0x13c>
			{
				for(n=0;n<650;n++)
 800586e:	2300      	movs	r3, #0
 8005870:	66bb      	str	r3, [r7, #104]	; 0x68
 8005872:	e003      	b.n	800587c <main+0x12c>
				{
					asm("nop");
 8005874:	bf00      	nop
				for(n=0;n<650;n++)
 8005876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005878:	3301      	adds	r3, #1
 800587a:	66bb      	str	r3, [r7, #104]	; 0x68
 800587c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800587e:	f240 2289 	movw	r2, #649	; 0x289
 8005882:	4293      	cmp	r3, r2
 8005884:	d9f6      	bls.n	8005874 <main+0x124>
			for(m=0;m<65000;m++)
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	3301      	adds	r3, #1
 800588a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800588c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8005892:	4293      	cmp	r3, r2
 8005894:	d9eb      	bls.n	800586e <main+0x11e>
				}
			}
			setDutyCycle(pwm);
 8005896:	4b3e      	ldr	r3, [pc, #248]	; (8005990 <main+0x240>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f8fa 	bl	8005a94 <setDutyCycle>
			uint16_t k[7];
		}rawData;

		uint8_t rawData2[14];

		memset(rawData.i, 0, 14);
 80058a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058a4:	220e      	movs	r2, #14
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fa9d 	bl	8005de8 <memset>
		//Transmit data in xyz order
		/*Data in XYZ order but gyro x is at pos 0. Not sure why. TODO: Fix order*/
		readMultipleSPI(116, rawData.i, 14);
 80058ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058b2:	220e      	movs	r2, #14
 80058b4:	4619      	mov	r1, r3
 80058b6:	2074      	movs	r0, #116	; 0x74
 80058b8:	f7ff fc48 	bl	800514c <readMultipleSPI>
//		int x = ((readSingleSPI(114))<<8) + readSingleSPI(115);
		swap(rawData.i, 14);
 80058bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058c0:	210e      	movs	r1, #14
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff fd0c 	bl	80052e0 <swap>
//		int16_t procData[7];
//		for(int i=0; i<7; ++i){
//			procData[i] = ((rawData2[2*i])<<8) + rawData2[2*i+1];
//		}

		data.i[0] = count;
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <main+0x238>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <main+0x244>)
 80058ce:	6013      	str	r3, [r2, #0]
		data.a[2] = loopCount;
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <main+0x234>)
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	4b2f      	ldr	r3, [pc, #188]	; (8005994 <main+0x244>)
 80058d6:	809a      	strh	r2, [r3, #4]
		data.j[3] = rawData.j[0];
 80058d8:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80058dc:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <main+0x244>)
 80058de:	80da      	strh	r2, [r3, #6]
		data.j[4] = rawData.j[1];
 80058e0:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 80058e4:	4b2b      	ldr	r3, [pc, #172]	; (8005994 <main+0x244>)
 80058e6:	811a      	strh	r2, [r3, #8]
		data.j[5] = rawData.j[2];
 80058e8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 80058ec:	4b29      	ldr	r3, [pc, #164]	; (8005994 <main+0x244>)
 80058ee:	815a      	strh	r2, [r3, #10]
		data.j[6] = rawData.j[3];
 80058f0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <main+0x244>)
 80058f6:	819a      	strh	r2, [r3, #12]
		data.j[7] = rawData.j[4];
 80058f8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <main+0x244>)
 80058fe:	81da      	strh	r2, [r3, #14]
		data.j[8] = rawData.j[5];
 8005900:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8005904:	4b23      	ldr	r3, [pc, #140]	; (8005994 <main+0x244>)
 8005906:	821a      	strh	r2, [r3, #16]
		data.a[9] = rawData.k[6];
 8005908:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800590c:	4b21      	ldr	r3, [pc, #132]	; (8005994 <main+0x244>)
 800590e:	825a      	strh	r2, [r3, #18]
		data.j[10] =current;
 8005910:	4b1e      	ldr	r3, [pc, #120]	; (800598c <main+0x23c>)
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b21a      	sxth	r2, r3
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <main+0x244>)
 8005918:	829a      	strh	r2, [r3, #20]

		encode = serialTerminal_packetize(data.k, 22);
 800591a:	4c1f      	ldr	r4, [pc, #124]	; (8005998 <main+0x248>)
 800591c:	463b      	mov	r3, r7
 800591e:	2216      	movs	r2, #22
 8005920:	491c      	ldr	r1, [pc, #112]	; (8005994 <main+0x244>)
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fe82 	bl	800562c <serialTerminal_packetize>
 8005928:	463b      	mov	r3, r7
 800592a:	4620      	mov	r0, r4
 800592c:	f103 0420 	add.w	r4, r3, #32
 8005930:	4602      	mov	r2, r0
 8005932:	4619      	mov	r1, r3
 8005934:	f8d1 e000 	ldr.w	lr, [r1]
 8005938:	684e      	ldr	r6, [r1, #4]
 800593a:	688d      	ldr	r5, [r1, #8]
 800593c:	68c9      	ldr	r1, [r1, #12]
 800593e:	f8c2 e000 	str.w	lr, [r2]
 8005942:	6056      	str	r6, [r2, #4]
 8005944:	6095      	str	r5, [r2, #8]
 8005946:	60d1      	str	r1, [r2, #12]
 8005948:	3310      	adds	r3, #16
 800594a:	3010      	adds	r0, #16
 800594c:	42a3      	cmp	r3, r4
 800594e:	d1ef      	bne.n	8005930 <main+0x1e0>
 8005950:	4602      	mov	r2, r0
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	6859      	ldr	r1, [r3, #4]
 8005956:	6010      	str	r0, [r2, #0]
 8005958:	6051      	str	r1, [r2, #4]
 800595a:	891b      	ldrh	r3, [r3, #8]
 800595c:	8113      	strh	r3, [r2, #8]

		TM_USB_VCP_Send(encode.data, encode.bytes_to_tx);
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <main+0x248>)
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	4619      	mov	r1, r3
 8005964:	480c      	ldr	r0, [pc, #48]	; (8005998 <main+0x248>)
 8005966:	f000 f9df 	bl	8005d28 <TM_USB_VCP_Send>

		while(start()==0);
 800596a:	bf00      	nop
 800596c:	f7ff fd36 	bl	80053dc <start>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0fa      	beq.n	800596c <main+0x21c>
		reset();
 8005976:	f7ff fd3d 	bl	80053f4 <reset>
	while (1){
 800597a:	e750      	b.n	800581e <main+0xce>
 800597c:	40020000 	.word	0x40020000
 8005980:	40020c00 	.word	0x40020c00
 8005984:	20000180 	.word	0x20000180
 8005988:	2000017c 	.word	0x2000017c
 800598c:	20000bfa 	.word	0x20000bfa
 8005990:	20000184 	.word	0x20000184
 8005994:	20000c0c 	.word	0x20000c0c
 8005998:	20000bd0 	.word	0x20000bd0

0800599c <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 80059a6:	bf00      	nop
}
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 80059b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <PWM_Init>:
 */

#include "motor.h"

//Set up motor PWM
void PWM_Init(void){
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	; 0x28
 80059c8:	af00      	add	r7, sp, #0
	//Enable clocks
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM9, ENABLE);
 80059ca:	2101      	movs	r1, #1
 80059cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80059d0:	f7fb f9d0 	bl	8000d74 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE|RCC_AHB1Periph_GPIOD, ENABLE);
 80059d4:	2101      	movs	r1, #1
 80059d6:	2018      	movs	r0, #24
 80059d8:	f7fb f96c 	bl	8000cb4 <RCC_AHB1PeriphClockCmd>

	//Set up GPIO E5 for PWM
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_5;
 80059dc:	2320      	movs	r3, #32
 80059de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80059ec:	2302      	movs	r3, #2
 80059ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80059f2:	2303      	movs	r3, #3
 80059f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059f8:	f107 0320 	add.w	r3, r7, #32
 80059fc:	4619      	mov	r1, r3
 80059fe:	4822      	ldr	r0, [pc, #136]	; (8005a88 <PWM_Init+0xc4>)
 8005a00:	f7fa ff8c 	bl	800091c <GPIO_Init>

	//Set up GPIO for direction control
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
 8005a04:	2304      	movs	r3, #4
 8005a06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a20:	f107 0320 	add.w	r3, r7, #32
 8005a24:	4619      	mov	r1, r3
 8005a26:	4819      	ldr	r0, [pc, #100]	; (8005a8c <PWM_Init+0xc8>)
 8005a28:	f7fa ff78 	bl	800091c <GPIO_Init>

	//Set source to the timer
	GPIO_PinAFConfig(GPIOE, GPIO_PinSource5, GPIO_AF_TIM9);
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	2105      	movs	r1, #5
 8005a30:	4815      	ldr	r0, [pc, #84]	; (8005a88 <PWM_Init+0xc4>)
 8005a32:	f7fb f84d 	bl	8000ad0 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef TIM_BaseStruct;

	//Initialise timer for 10kHz PWM
	TIM_BaseStruct.TIM_Prescaler = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	82bb      	strh	r3, [r7, #20]
	TIM_BaseStruct.TIM_ClockDivision = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	83bb      	strh	r3, [r7, #28]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	82fb      	strh	r3, [r7, #22]
	TIM_BaseStruct.TIM_Period = 8399;
 8005a42:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8005a46:	61bb      	str	r3, [r7, #24]

	//Initialise TIM9
	TIM_TimeBaseInit(TIM9, &TIM_BaseStruct);
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4810      	ldr	r0, [pc, #64]	; (8005a90 <PWM_Init+0xcc>)
 8005a50:	f7fb fa6c 	bl	8000f2c <TIM_TimeBaseInit>


	//Initialise PWM
	TIM_OCInitTypeDef TIM_OCStruct;
	TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8005a54:	2360      	movs	r3, #96	; 0x60
 8005a56:	803b      	strh	r3, [r7, #0]
	TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	807b      	strh	r3, [r7, #2]
	TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	81bb      	strh	r3, [r7, #12]
	TIM_OCStruct.TIM_Pulse = 4199;
 8005a60:	f241 0367 	movw	r3, #4199	; 0x1067
 8005a64:	60bb      	str	r3, [r7, #8]
	TIM_OC1Init(TIM9, &TIM_OCStruct);
 8005a66:	463b      	mov	r3, r7
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4809      	ldr	r0, [pc, #36]	; (8005a90 <PWM_Init+0xcc>)
 8005a6c:	f7fb fb1e 	bl	80010ac <TIM_OC1Init>

	TIM_OC1PreloadConfig(TIM9, TIM_OCPreload_Enable);
 8005a70:	2108      	movs	r1, #8
 8005a72:	4807      	ldr	r0, [pc, #28]	; (8005a90 <PWM_Init+0xcc>)
 8005a74:	f7fb fb94 	bl	80011a0 <TIM_OC1PreloadConfig>

	TIM_Cmd(TIM9, ENABLE);
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4805      	ldr	r0, [pc, #20]	; (8005a90 <PWM_Init+0xcc>)
 8005a7c:	f7fb faf6 	bl	800106c <TIM_Cmd>
}
 8005a80:	bf00      	nop
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40020c00 	.word	0x40020c00
 8005a90:	40014000 	.word	0x40014000

08005a94 <setDutyCycle>:
/*
 * Changes the duty cycle of the PWM
 * 0% = 0
 * 100% = 8399
 */
void setDutyCycle(int percent){
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	int comp = percent*89;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2259      	movs	r2, #89	; 0x59
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	60fb      	str	r3, [r7, #12]
	TIM9->CCR1 = comp;
 8005aa6:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <setDutyCycle+0x24>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6353      	str	r3, [r2, #52]	; 0x34
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40014000 	.word	0x40014000

08005abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ac2:	e003      	b.n	8005acc <LoopCopyDataInit>

08005ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005aca:	3104      	adds	r1, #4

08005acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005acc:	480b      	ldr	r0, [pc, #44]	; (8005afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ad4:	d3f6      	bcc.n	8005ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8005ad6:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ad8:	e002      	b.n	8005ae0 <LoopFillZerobss>

08005ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005adc:	f842 3b04 	str.w	r3, [r2], #4

08005ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ae4:	d3f9      	bcc.n	8005ada <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ae6:	f000 f841 	bl	8005b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aea:	f000 f959 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005aee:	f7ff fe2f 	bl	8005750 <main>
  bx  lr    
 8005af2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005af4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005af8:	08005e7c 	.word	0x08005e7c
  ldr  r0, =_sdata
 8005afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b00:	20000134 	.word	0x20000134
  ldr  r2, =_sbss
 8005b04:	20000134 	.word	0x20000134
  ldr  r3, = _ebss
 8005b08:	200012b0 	.word	0x200012b0

08005b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b0c:	e7fe      	b.n	8005b0c <ADC_IRQHandler>

08005b0e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	af00      	add	r7, sp, #0
}
 8005b12:	bf00      	nop
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005b20:	e7fe      	b.n	8005b20 <HardFault_Handler+0x4>

08005b22 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005b26:	e7fe      	b.n	8005b26 <MemManage_Handler+0x4>

08005b28 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005b2c:	e7fe      	b.n	8005b2c <BusFault_Handler+0x4>

08005b2e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005b32:	e7fe      	b.n	8005b32 <UsageFault_Handler+0x4>

08005b34 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <SystemInit+0x60>)
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <SystemInit+0x60>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005b80:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <SystemInit+0x64>)
 8005b82:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <SystemInit+0x64>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b8c:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <SystemInit+0x64>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b92:	4a0f      	ldr	r2, [pc, #60]	; (8005bd0 <SystemInit+0x64>)
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <SystemInit+0x64>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <SystemInit+0x64>)
 8005ba4:	4a0b      	ldr	r2, [pc, #44]	; (8005bd4 <SystemInit+0x68>)
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ba8:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <SystemInit+0x64>)
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <SystemInit+0x64>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <SystemInit+0x64>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005bba:	f000 f80d 	bl	8005bd8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bbe:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <SystemInit+0x60>)
 8005bc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bc4:	609a      	str	r2, [r3, #8]
#endif
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	e000ed00 	.word	0xe000ed00
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	24003010 	.word	0x24003010

08005bd8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	2300      	movs	r3, #0
 8005be4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005be6:	4a36      	ldr	r2, [pc, #216]	; (8005cc0 <SetSysClock+0xe8>)
 8005be8:	4b35      	ldr	r3, [pc, #212]	; (8005cc0 <SetSysClock+0xe8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005bf2:	4b33      	ldr	r3, [pc, #204]	; (8005cc0 <SetSysClock+0xe8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <SetSysClock+0x38>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005c0e:	d1f0      	bne.n	8005bf2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005c10:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <SetSysClock+0xe8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	e001      	b.n	8005c26 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005c22:	2300      	movs	r3, #0
 8005c24:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d142      	bne.n	8005cb2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <SetSysClock+0xe8>)
 8005c2e:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <SetSysClock+0xe8>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8005c38:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <SetSysClock+0xec>)
 8005c3a:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <SetSysClock+0xec>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c42:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005c44:	4a1e      	ldr	r2, [pc, #120]	; (8005cc0 <SetSysClock+0xe8>)
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <SetSysClock+0xe8>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005c4c:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <SetSysClock+0xe8>)
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <SetSysClock+0xe8>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c56:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005c58:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <SetSysClock+0xe8>)
 8005c5a:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <SetSysClock+0xe8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005c62:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 8005c64:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <SetSysClock+0xe8>)
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <SetSysClock+0xf0>)
 8005c68:	605a      	str	r2, [r3, #4]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005c6a:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <SetSysClock+0xe8>)
 8005c6c:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <SetSysClock+0xe8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c74:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005c76:	bf00      	nop
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <SetSysClock+0xe8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f9      	beq.n	8005c78 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <SetSysClock+0xf4>)
 8005c86:	f240 6205 	movw	r2, #1541	; 0x605
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005c8c:	4a0c      	ldr	r2, [pc, #48]	; (8005cc0 <SetSysClock+0xe8>)
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <SetSysClock+0xe8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005c98:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <SetSysClock+0xe8>)
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <SetSysClock+0xe8>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f043 0302 	orr.w	r3, r3, #2
 8005ca2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005ca4:	bf00      	nop
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <SetSysClock+0xe8>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d1f9      	bne.n	8005ca6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	07405408 	.word	0x07405408
 8005ccc:	40023c00 	.word	0x40023c00

08005cd0 <TM_USB_VCP_Init>:
USB_OTG_CORE_HANDLE	USB_OTG_dev;

/* USB VCP Internal receive buffer */
extern uint8_t TM_INT_USB_VCP_ReceiveBuffer[USB_VCP_RECEIVE_BUFFER_LENGTH];

TM_USB_VCP_Result TM_USB_VCP_Init(void) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af02      	add	r7, sp, #8
	/* Initialize USB */
	USBD_Init(	&USB_OTG_dev,
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <TM_USB_VCP_Init+0x38>)
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <TM_USB_VCP_Init+0x3c>)
 8005cdc:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <TM_USB_VCP_Init+0x40>)
 8005cde:	2101      	movs	r1, #1
 8005ce0:	480c      	ldr	r0, [pc, #48]	; (8005d14 <TM_USB_VCP_Init+0x44>)
 8005ce2:	f7fd fff0 	bl	8003cc6 <USBD_Init>
				&USR_desc, 
				&USBD_CDC_cb, 
				&USR_cb);
	
	/* Reset buffer counters */
	tm_int_usb_vcp_buf_in = 0;
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <TM_USB_VCP_Init+0x48>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
	tm_int_usb_vcp_buf_out = 0;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <TM_USB_VCP_Init+0x4c>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
	tm_int_usb_vcp_buf_num = 0;
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <TM_USB_VCP_Init+0x50>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
	
	/* Initialized */
	TM_USB_VCP_INT_Init = 1;
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <TM_USB_VCP_Init+0x54>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
	
	/* Return OK */
	return TM_USB_VCP_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000108 	.word	0x20000108
 8005d0c:	20000058 	.word	0x20000058
 8005d10:	200000d0 	.word	0x200000d0
 8005d14:	20000cbc 	.word	0x20000cbc
 8005d18:	20000c30 	.word	0x20000c30
 8005d1c:	20000c38 	.word	0x20000c38
 8005d20:	20000c34 	.word	0x20000c34
 8005d24:	20000188 	.word	0x20000188

08005d28 <TM_USB_VCP_Send>:
	
	/* Return OK */
	return TM_USB_VCP_OK;
}

TM_USB_VCP_Result TM_USB_VCP_Send(uint8_t* DataArray, uint32_t Length) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
	/* Send array */
	VCP_DataTx(DataArray, Length);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fd ff7b 	bl	8003c30 <VCP_DataTx>
	
	/* Return OK */
	return TM_USB_VCP_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <TM_INT_USB_VCP_AddReceived>:

	/* Return number of characters in string */
	return i;
}

TM_USB_VCP_Result TM_INT_USB_VCP_AddReceived(uint8_t c) {
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
	/* Still available data in buffer */
	if (tm_int_usb_vcp_buf_num < USB_VCP_RECEIVE_BUFFER_LENGTH) {
 8005d4e:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <TM_INT_USB_VCP_AddReceived+0x50>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b7f      	cmp	r3, #127	; 0x7f
 8005d54:	d817      	bhi.n	8005d86 <TM_INT_USB_VCP_AddReceived+0x42>
		/* Check for overflow */
		if (tm_int_usb_vcp_buf_in >= USB_VCP_RECEIVE_BUFFER_LENGTH) {
 8005d56:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <TM_INT_USB_VCP_AddReceived+0x54>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5c:	d902      	bls.n	8005d64 <TM_INT_USB_VCP_AddReceived+0x20>
			tm_int_usb_vcp_buf_in = 0;
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <TM_INT_USB_VCP_AddReceived+0x54>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
		}
		/* Add character to buffer */
		TM_INT_USB_VCP_ReceiveBuffer[tm_int_usb_vcp_buf_in] = c;
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <TM_INT_USB_VCP_AddReceived+0x54>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	490c      	ldr	r1, [pc, #48]	; (8005d9c <TM_INT_USB_VCP_AddReceived+0x58>)
 8005d6a:	79fa      	ldrb	r2, [r7, #7]
 8005d6c:	54ca      	strb	r2, [r1, r3]
		/* Increase counters */
		tm_int_usb_vcp_buf_in++;
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <TM_INT_USB_VCP_AddReceived+0x54>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <TM_INT_USB_VCP_AddReceived+0x54>)
 8005d76:	6013      	str	r3, [r2, #0]
		tm_int_usb_vcp_buf_num++;
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <TM_INT_USB_VCP_AddReceived+0x50>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <TM_INT_USB_VCP_AddReceived+0x50>)
 8005d80:	6013      	str	r3, [r2, #0]
		
		/* Return OK */
		return TM_USB_VCP_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <TM_INT_USB_VCP_AddReceived+0x44>
	}
	
	/* Return Buffer full */
	return TM_USB_VCP_RECEIVE_BUFFER_FULL;
 8005d86:	2302      	movs	r3, #2
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	20000c34 	.word	0x20000c34
 8005d98:	20000c30 	.word	0x20000c30
 8005d9c:	20000c3c 	.word	0x20000c3c

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	4e0d      	ldr	r6, [pc, #52]	; (8005dd8 <__libc_init_array+0x38>)
 8005da4:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da6:	1ba4      	subs	r4, r4, r6
 8005da8:	10a4      	asrs	r4, r4, #2
 8005daa:	2500      	movs	r5, #0
 8005dac:	42a5      	cmp	r5, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	4e0b      	ldr	r6, [pc, #44]	; (8005de0 <__libc_init_array+0x40>)
 8005db2:	4c0c      	ldr	r4, [pc, #48]	; (8005de4 <__libc_init_array+0x44>)
 8005db4:	f000 f820 	bl	8005df8 <_init>
 8005db8:	1ba4      	subs	r4, r4, r6
 8005dba:	10a4      	asrs	r4, r4, #2
 8005dbc:	2500      	movs	r5, #0
 8005dbe:	42a5      	cmp	r5, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc8:	4798      	blx	r3
 8005dca:	3501      	adds	r5, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd2:	4798      	blx	r3
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	08005e74 	.word	0x08005e74
 8005ddc:	08005e74 	.word	0x08005e74
 8005de0:	08005e74 	.word	0x08005e74
 8005de4:	08005e78 	.word	0x08005e78

08005de8 <memset>:
 8005de8:	4402      	add	r2, r0
 8005dea:	4603      	mov	r3, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <_init>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr

08005e04 <_fini>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr
